
UARTMOGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08006158  08006158  00007158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080065a8  080065a8  000075a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b0  080065b0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b0  080065b0  000075b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065b4  080065b4  000075b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080065b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          0000403c  200001d8  200001d8  000081d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004214  20004214  000081d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008179  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001716  00000000  00000000  0001037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  00011a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b9  00000000  00000000  00012228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002386d  00000000  00000000  000127e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090b4  00000000  00000000  0003604e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3fb9  00000000  00000000  0003f102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001130bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f0c  00000000  00000000  00113100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0011600c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006140 	.word	0x08006140

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	08006140 	.word	0x08006140

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <f1>:
/* Function declarations */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

double f1(double x) {
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	ed87 0b00 	vstr	d0, [r7]
    if (x <= 1)
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	4b27      	ldr	r3, [pc, #156]	@ (8000fa0 <f1+0xac>)
 8000f04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f08:	f7ff fe02 	bl	8000b10 <__aeabi_dcmple>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d004      	beq.n	8000f1c <f1+0x28>
        return -x;
 8000f12:	683c      	ldr	r4, [r7, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000f1a:	e037      	b.n	8000f8c <f1+0x98>
    else if (x <= 3)
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <f1+0xb0>)
 8000f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f26:	f7ff fdf3 	bl	8000b10 <__aeabi_dcmple>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00c      	beq.n	8000f4a <f1+0x56>
        return x - 2;
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f3c:	f7ff f9b4 	bl	80002a8 <__aeabi_dsub>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4614      	mov	r4, r2
 8000f46:	461d      	mov	r5, r3
 8000f48:	e020      	b.n	8000f8c <f1+0x98>
    else if (x <= 4)
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <f1+0xb4>)
 8000f50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f54:	f7ff fddc 	bl	8000b10 <__aeabi_dcmple>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <f1+0x82>
        return 4 - x;
 8000f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	4910      	ldr	r1, [pc, #64]	@ (8000fa8 <f1+0xb4>)
 8000f68:	f7ff f99e 	bl	80002a8 <__aeabi_dsub>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4614      	mov	r4, r2
 8000f72:	461d      	mov	r5, r3
 8000f74:	e00a      	b.n	8000f8c <f1+0x98>
    else
        return x - 4;
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <f1+0xb4>)
 8000f7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f80:	f7ff f992 	bl	80002a8 <__aeabi_dsub>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4614      	mov	r4, r2
 8000f8a:	461d      	mov	r5, r3
}
 8000f8c:	ec45 4b17 	vmov	d7, r4, r5
 8000f90:	eeb0 0a47 	vmov.f32	s0, s14
 8000f94:	eef0 0a67 	vmov.f32	s1, s15
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	3ff00000 	.word	0x3ff00000
 8000fa4:	40080000 	.word	0x40080000
 8000fa8:	40100000 	.word	0x40100000

08000fac <f2>:

double f2(double x) {
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	ed87 0b00 	vstr	d0, [r7]
    return (x - 5) * (x - 5);
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <f2+0x50>)
 8000fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc0:	f7ff f972 	bl	80002a8 <__aeabi_dsub>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4614      	mov	r4, r2
 8000fca:	461d      	mov	r5, r3
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <f2+0x50>)
 8000fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fd6:	f7ff f967 	bl	80002a8 <__aeabi_dsub>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f7ff fb19 	bl	8000618 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fee:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff2:	eef0 0a67 	vmov.f32	s1, s15
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffc:	40140000 	.word	0x40140000

08001000 <Dominance>:

int Dominance(double x1, double x2) {
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	ed87 0b02 	vstr	d0, [r7, #8]
 800100a:	ed87 1b00 	vstr	d1, [r7]
    if ((f1(x1) <= f1(x2) && f2(x1) <= f2(x2)) &&
 800100e:	ed97 0b02 	vldr	d0, [r7, #8]
 8001012:	f7ff ff6f 	bl	8000ef4 <f1>
 8001016:	ec55 4b10 	vmov	r4, r5, d0
 800101a:	ed97 0b00 	vldr	d0, [r7]
 800101e:	f7ff ff69 	bl	8000ef4 <f1>
 8001022:	ec53 2b10 	vmov	r2, r3, d0
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff fd71 	bl	8000b10 <__aeabi_dcmple>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d03a      	beq.n	80010aa <Dominance+0xaa>
 8001034:	ed97 0b02 	vldr	d0, [r7, #8]
 8001038:	f7ff ffb8 	bl	8000fac <f2>
 800103c:	ec55 4b10 	vmov	r4, r5, d0
 8001040:	ed97 0b00 	vldr	d0, [r7]
 8001044:	f7ff ffb2 	bl	8000fac <f2>
 8001048:	ec53 2b10 	vmov	r2, r3, d0
 800104c:	4620      	mov	r0, r4
 800104e:	4629      	mov	r1, r5
 8001050:	f7ff fd5e 	bl	8000b10 <__aeabi_dcmple>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d027      	beq.n	80010aa <Dominance+0xaa>
        (f1(x1) < f1(x2) || f2(x1) < f2(x2)))
 800105a:	ed97 0b02 	vldr	d0, [r7, #8]
 800105e:	f7ff ff49 	bl	8000ef4 <f1>
 8001062:	ec55 4b10 	vmov	r4, r5, d0
 8001066:	ed97 0b00 	vldr	d0, [r7]
 800106a:	f7ff ff43 	bl	8000ef4 <f1>
 800106e:	ec53 2b10 	vmov	r2, r3, d0
    if ((f1(x1) <= f1(x2) && f2(x1) <= f2(x2)) &&
 8001072:	4620      	mov	r0, r4
 8001074:	4629      	mov	r1, r5
 8001076:	f7ff fd41 	bl	8000afc <__aeabi_dcmplt>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d112      	bne.n	80010a6 <Dominance+0xa6>
        (f1(x1) < f1(x2) || f2(x1) < f2(x2)))
 8001080:	ed97 0b02 	vldr	d0, [r7, #8]
 8001084:	f7ff ff92 	bl	8000fac <f2>
 8001088:	ec55 4b10 	vmov	r4, r5, d0
 800108c:	ed97 0b00 	vldr	d0, [r7]
 8001090:	f7ff ff8c 	bl	8000fac <f2>
 8001094:	ec53 2b10 	vmov	r2, r3, d0
 8001098:	4620      	mov	r0, r4
 800109a:	4629      	mov	r1, r5
 800109c:	f7ff fd2e 	bl	8000afc <__aeabi_dcmplt>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <Dominance+0xaa>
        return 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <Dominance+0xac>
    return 0;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdb0      	pop	{r4, r5, r7, pc}

080010b4 <euclidean>:

double euclidean(double a1, double a2, double b1, double b2) {
 80010b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b8:	b088      	sub	sp, #32
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	ed87 0b06 	vstr	d0, [r7, #24]
 80010c0:	ed87 1b04 	vstr	d1, [r7, #16]
 80010c4:	ed87 2b02 	vstr	d2, [r7, #8]
 80010c8:	ed87 3b00 	vstr	d3, [r7]
    return sqrt((a1 - b1)*(a1 - b1) + (a2 - b2)*(a2 - b2));
 80010cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010d4:	f7ff f8e8 	bl	80002a8 <__aeabi_dsub>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4614      	mov	r4, r2
 80010de:	461d      	mov	r5, r3
 80010e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010e8:	f7ff f8de 	bl	80002a8 <__aeabi_dsub>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4620      	mov	r0, r4
 80010f2:	4629      	mov	r1, r5
 80010f4:	f7ff fa90 	bl	8000618 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4614      	mov	r4, r2
 80010fe:	461d      	mov	r5, r3
 8001100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001104:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001108:	f7ff f8ce 	bl	80002a8 <__aeabi_dsub>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4690      	mov	r8, r2
 8001112:	4699      	mov	r9, r3
 8001114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001118:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800111c:	f7ff f8c4 	bl	80002a8 <__aeabi_dsub>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4640      	mov	r0, r8
 8001126:	4649      	mov	r1, r9
 8001128:	f7ff fa76 	bl	8000618 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff f8ba 	bl	80002ac <__adddf3>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	ec43 2b17 	vmov	d7, r2, r3
 8001140:	eeb0 0a47 	vmov.f32	s0, s14
 8001144:	eef0 0a67 	vmov.f32	s1, s15
 8001148:	f004 fef8 	bl	8005f3c <sqrt>
 800114c:	eeb0 7a40 	vmov.f32	s14, s0
 8001150:	eef0 7a60 	vmov.f32	s15, s1
}
 8001154:	eeb0 0a47 	vmov.f32	s0, s14
 8001158:	eef0 0a67 	vmov.f32	s1, s15
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001164:	0000      	movs	r0, r0
	...

08001168 <rand_double>:

double rand_double(double min, double max) {
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001172:	ed87 1b00 	vstr	d1, [r7]
    return min + (max - min) * ((double)rand() / RAND_MAX);
 8001176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800117a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800117e:	f7ff f893 	bl	80002a8 <__aeabi_dsub>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4614      	mov	r4, r2
 8001188:	461d      	mov	r5, r3
 800118a:	f002 f9a7 	bl	80034dc <rand>
 800118e:	4603      	mov	r3, r0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9d7 	bl	8000544 <__aeabi_i2d>
 8001196:	a310      	add	r3, pc, #64	@ (adr r3, 80011d8 <rand_double+0x70>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fb66 	bl	800086c <__aeabi_ddiv>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4620      	mov	r0, r4
 80011a6:	4629      	mov	r1, r5
 80011a8:	f7ff fa36 	bl	8000618 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011b8:	f7ff f878 	bl	80002ac <__adddf3>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80011c4:	eeb0 0a47 	vmov.f32	s0, s14
 80011c8:	eef0 0a67 	vmov.f32	s1, s15
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bdb0      	pop	{r4, r5, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	ffc00000 	.word	0xffc00000
 80011dc:	41dfffff 	.word	0x41dfffff

080011e0 <main>:

/* Entry point */
int main(void)
{
 80011e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011e4:	ed2d 8b06 	vpush	{d8-d10}
 80011e8:	b096      	sub	sp, #88	@ 0x58
 80011ea:	af02      	add	r7, sp, #8
  HAL_Init();
 80011ec:	f000 fd6c 	bl	8001cc8 <HAL_Init>
  SystemClock_Config();
 80011f0:	f000 fb02 	bl	80017f8 <SystemClock_Config>
  MX_GPIO_Init();
 80011f4:	f000 fb9c 	bl	8001930 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011f8:	f000 fb70 	bl	80018dc <MX_USART1_UART_Init>

  printf("Khoi dong MOGA v2!\r\n");
 80011fc:	48a0      	ldr	r0, [pc, #640]	@ (8001480 <main+0x2a0>)
 80011fe:	f002 ff2b 	bl	8004058 <puts>

  srand(HAL_GetTick());  // dùng thời gian hệ thống STM32 để tạo seed
 8001202:	f000 fdc7 	bl	8001d94 <HAL_GetTick>
 8001206:	4603      	mov	r3, r0
 8001208:	4618      	mov	r0, r3
 800120a:	f002 f939 	bl	8003480 <srand>

  int i, j, h, p1, p2, t;
  double ap, SUMR, t1, t2, r;

  for (i = 0; i < POP_SIZE; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001212:	e012      	b.n	800123a <main+0x5a>
    x[i] = rand_double(MIN, MAX);
 8001214:	ed9f 1b90 	vldr	d1, [pc, #576]	@ 8001458 <main+0x278>
 8001218:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 8001460 <main+0x280>
 800121c:	f7ff ffa4 	bl	8001168 <rand_double>
 8001220:	eeb0 7a40 	vmov.f32	s14, s0
 8001224:	eef0 7a60 	vmov.f32	s15, s1
 8001228:	4a96      	ldr	r2, [pc, #600]	@ (8001484 <main+0x2a4>)
 800122a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4413      	add	r3, r2
 8001230:	ed83 7b00 	vstr	d7, [r3]
  for (i = 0; i < POP_SIZE; i++) {
 8001234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001236:	3301      	adds	r3, #1
 8001238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800123a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800123c:	2b63      	cmp	r3, #99	@ 0x63
 800123e:	dde9      	ble.n	8001214 <main+0x34>
  }

  SUMR = (MAX - MIN) / 30.0;
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b90      	ldr	r3, [pc, #576]	@ (8001488 <main+0x2a8>)
 8001246:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  r = RATE;
 800124a:	a387      	add	r3, pc, #540	@ (adr r3, 8001468 <main+0x288>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  for (h = 0; h < GENERATIONS; h++) {
 8001254:	2300      	movs	r3, #0
 8001256:	647b      	str	r3, [r7, #68]	@ 0x44
 8001258:	e2a8      	b.n	80017ac <main+0x5cc>
    for (i = 0; i < POP_SIZE; i++) {
 800125a:	2300      	movs	r3, #0
 800125c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800125e:	e0d2      	b.n	8001406 <main+0x226>
      t = POP_SIZE + i;
 8001260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001262:	3364      	adds	r3, #100	@ 0x64
 8001264:	61fb      	str	r3, [r7, #28]
      p1 = rand() % POP_SIZE;
 8001266:	f002 f939 	bl	80034dc <rand>
 800126a:	4603      	mov	r3, r0
 800126c:	4a87      	ldr	r2, [pc, #540]	@ (800148c <main+0x2ac>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	1151      	asrs	r1, r2, #5
 8001274:	17da      	asrs	r2, r3, #31
 8001276:	1a8a      	subs	r2, r1, r2
 8001278:	2164      	movs	r1, #100	@ 0x64
 800127a:	fb01 f202 	mul.w	r2, r1, r2
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      p2 = rand() % POP_SIZE;
 8001282:	f002 f92b 	bl	80034dc <rand>
 8001286:	4603      	mov	r3, r0
 8001288:	4a80      	ldr	r2, [pc, #512]	@ (800148c <main+0x2ac>)
 800128a:	fb82 1203 	smull	r1, r2, r2, r3
 800128e:	1151      	asrs	r1, r2, #5
 8001290:	17da      	asrs	r2, r3, #31
 8001292:	1a8a      	subs	r2, r1, r2
 8001294:	2164      	movs	r1, #100	@ 0x64
 8001296:	fb01 f202 	mul.w	r2, r1, r2
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	617b      	str	r3, [r7, #20]
      ap = rand_double(0, 1);
 800129e:	ed9f 1b74 	vldr	d1, [pc, #464]	@ 8001470 <main+0x290>
 80012a2:	ed9f 0b75 	vldr	d0, [pc, #468]	@ 8001478 <main+0x298>
 80012a6:	f7ff ff5f 	bl	8001168 <rand_double>
 80012aa:	ed87 0b02 	vstr	d0, [r7, #8]
      x[t] = x[p1] * ap + x[p2] * (1 - ap);
 80012ae:	4a75      	ldr	r2, [pc, #468]	@ (8001484 <main+0x2a4>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012be:	f7ff f9ab 	bl	8000618 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4690      	mov	r8, r2
 80012c8:	4699      	mov	r9, r3
 80012ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001484 <main+0x2a4>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	4413      	add	r3, r2
 80012d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012da:	f04f 0000 	mov.w	r0, #0
 80012de:	496c      	ldr	r1, [pc, #432]	@ (8001490 <main+0x2b0>)
 80012e0:	f7fe ffe2 	bl	80002a8 <__aeabi_dsub>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f994 	bl	8000618 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4640      	mov	r0, r8
 80012f6:	4649      	mov	r1, r9
 80012f8:	f7fe ffd8 	bl	80002ac <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4860      	ldr	r0, [pc, #384]	@ (8001484 <main+0x2a4>)
 8001302:	69f9      	ldr	r1, [r7, #28]
 8001304:	00c9      	lsls	r1, r1, #3
 8001306:	4401      	add	r1, r0
 8001308:	e9c1 2300 	strd	r2, r3, [r1]
      ap = rand_double(0, 1);
 800130c:	ed9f 1b58 	vldr	d1, [pc, #352]	@ 8001470 <main+0x290>
 8001310:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8001478 <main+0x298>
 8001314:	f7ff ff28 	bl	8001168 <rand_double>
 8001318:	ed87 0b02 	vstr	d0, [r7, #8]
      r = (GENERATIONS * 2.0 - h) / (GENERATIONS * 2.0) * r;
 800131c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800131e:	f7ff f911 	bl	8000544 <__aeabi_i2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	f04f 0000 	mov.w	r0, #0
 800132a:	495a      	ldr	r1, [pc, #360]	@ (8001494 <main+0x2b4>)
 800132c:	f7fe ffbc 	bl	80002a8 <__aeabi_dsub>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b55      	ldr	r3, [pc, #340]	@ (8001494 <main+0x2b4>)
 800133e:	f7ff fa95 	bl	800086c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800134a:	f7ff f965 	bl	8000618 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
      if (ap <= r) x[t] += rand_double(-SUMR, SUMR);
 8001356:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800135a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800135e:	f7ff fbd7 	bl	8000b10 <__aeabi_dcmple>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d01d      	beq.n	80013a4 <main+0x1c4>
 8001368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800136e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8001378:	ed97 0b00 	vldr	d0, [r7]
 800137c:	f7ff fef4 	bl	8001168 <rand_double>
 8001380:	ec51 0b10 	vmov	r0, r1, d0
 8001384:	4a3f      	ldr	r2, [pc, #252]	@ (8001484 <main+0x2a4>)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	4413      	add	r3, r2
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7fe ff8c 	bl	80002ac <__adddf3>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	483a      	ldr	r0, [pc, #232]	@ (8001484 <main+0x2a4>)
 800139a:	69f9      	ldr	r1, [r7, #28]
 800139c:	00c9      	lsls	r1, r1, #3
 800139e:	4401      	add	r1, r0
 80013a0:	e9c1 2300 	strd	r2, r3, [r1]
      if (x[t] > MAX) x[t] = MAX;
 80013a4:	4a37      	ldr	r2, [pc, #220]	@ (8001484 <main+0x2a4>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <main+0x2b8>)
 80013b6:	f7ff fbbf 	bl	8000b38 <__aeabi_dcmpgt>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <main+0x1f2>
 80013c0:	4a30      	ldr	r2, [pc, #192]	@ (8001484 <main+0x2a4>)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	18d1      	adds	r1, r2, r3
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <main+0x2b8>)
 80013ce:	e9c1 2300 	strd	r2, r3, [r1]
      if (x[t] < MIN) x[t] = MIN;
 80013d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001484 <main+0x2a4>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <main+0x2bc>)
 80013e4:	f7ff fb8a 	bl	8000afc <__aeabi_dcmplt>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d008      	beq.n	8001400 <main+0x220>
 80013ee:	4a25      	ldr	r2, [pc, #148]	@ (8001484 <main+0x2a4>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	18d1      	adds	r1, r2, r3
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <main+0x2bc>)
 80013fc:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < POP_SIZE; i++) {
 8001400:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001402:	3301      	adds	r3, #1
 8001404:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001408:	2b63      	cmp	r3, #99	@ 0x63
 800140a:	f77f af29 	ble.w	8001260 <main+0x80>
    }

    for (i = 0; i < POP_SIZE * 2; i++) {
 800140e:	2300      	movs	r3, #0
 8001410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001412:	e016      	b.n	8001442 <main+0x262>
      y[i] = 0;
 8001414:	4a22      	ldr	r2, [pc, #136]	@ (80014a0 <main+0x2c0>)
 8001416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	18d1      	adds	r1, r2, r3
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9c1 2300 	strd	r2, r3, [r1]
      s[i] = 0;
 8001428:	4a1e      	ldr	r2, [pc, #120]	@ (80014a4 <main+0x2c4>)
 800142a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	18d1      	adds	r1, r2, r3
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < POP_SIZE * 2; i++) {
 800143c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800143e:	3301      	adds	r3, #1
 8001440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001444:	2bc7      	cmp	r3, #199	@ 0xc7
 8001446:	dde5      	ble.n	8001414 <main+0x234>
    }

    for (i = 0; i < POP_SIZE * 2; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800144c:	e100      	b.n	8001650 <main+0x470>
      for (j = 0; j < POP_SIZE * 2; j++) {
 800144e:	2300      	movs	r3, #0
 8001450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001452:	e0c7      	b.n	80015e4 <main+0x404>
 8001454:	f3af 8000 	nop.w
 8001458:	00000000 	.word	0x00000000
 800145c:	40240000 	.word	0x40240000
 8001460:	00000000 	.word	0x00000000
 8001464:	c0140000 	.word	0xc0140000
 8001468:	9999999a 	.word	0x9999999a
 800146c:	3fd99999 	.word	0x3fd99999
 8001470:	00000000 	.word	0x00000000
 8001474:	3ff00000 	.word	0x3ff00000
	...
 8001480:	08006158 	.word	0x08006158
 8001484:	20000240 	.word	0x20000240
 8001488:	3fe00000 	.word	0x3fe00000
 800148c:	51eb851f 	.word	0x51eb851f
 8001490:	3ff00000 	.word	0x3ff00000
 8001494:	40440000 	.word	0x40440000
 8001498:	40240000 	.word	0x40240000
 800149c:	c0140000 	.word	0xc0140000
 80014a0:	200011e0 	.word	0x200011e0
 80014a4:	20002180 	.word	0x20002180
        if (Dominance(x[j], x[i])) y[i]++;
 80014a8:	4aa1      	ldr	r2, [pc, #644]	@ (8001730 <main+0x550>)
 80014aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	ed93 7b00 	vldr	d7, [r3]
 80014b4:	4a9e      	ldr	r2, [pc, #632]	@ (8001730 <main+0x550>)
 80014b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	ed93 6b00 	vldr	d6, [r3]
 80014c0:	eeb0 1a46 	vmov.f32	s2, s12
 80014c4:	eef0 1a66 	vmov.f32	s3, s13
 80014c8:	eeb0 0a47 	vmov.f32	s0, s14
 80014cc:	eef0 0a67 	vmov.f32	s1, s15
 80014d0:	f7ff fd96 	bl	8001000 <Dominance>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d012      	beq.n	8001500 <main+0x320>
 80014da:	4a96      	ldr	r2, [pc, #600]	@ (8001734 <main+0x554>)
 80014dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b93      	ldr	r3, [pc, #588]	@ (8001738 <main+0x558>)
 80014ec:	f7fe fede 	bl	80002ac <__adddf3>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	488f      	ldr	r0, [pc, #572]	@ (8001734 <main+0x554>)
 80014f6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80014f8:	00c9      	lsls	r1, r1, #3
 80014fa:	4401      	add	r1, r0
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
        if (euclidean(f1(x[i]), f2(x[i]), f1(x[j]), f2(x[j])) <= RADIUS)
 8001500:	4a8b      	ldr	r2, [pc, #556]	@ (8001730 <main+0x550>)
 8001502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	ed93 7b00 	vldr	d7, [r3]
 800150c:	eeb0 0a47 	vmov.f32	s0, s14
 8001510:	eef0 0a67 	vmov.f32	s1, s15
 8001514:	f7ff fcee 	bl	8000ef4 <f1>
 8001518:	eeb0 8a40 	vmov.f32	s16, s0
 800151c:	eef0 8a60 	vmov.f32	s17, s1
 8001520:	4a83      	ldr	r2, [pc, #524]	@ (8001730 <main+0x550>)
 8001522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	ed93 7b00 	vldr	d7, [r3]
 800152c:	eeb0 0a47 	vmov.f32	s0, s14
 8001530:	eef0 0a67 	vmov.f32	s1, s15
 8001534:	f7ff fd3a 	bl	8000fac <f2>
 8001538:	eeb0 9a40 	vmov.f32	s18, s0
 800153c:	eef0 9a60 	vmov.f32	s19, s1
 8001540:	4a7b      	ldr	r2, [pc, #492]	@ (8001730 <main+0x550>)
 8001542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	ed93 7b00 	vldr	d7, [r3]
 800154c:	eeb0 0a47 	vmov.f32	s0, s14
 8001550:	eef0 0a67 	vmov.f32	s1, s15
 8001554:	f7ff fcce 	bl	8000ef4 <f1>
 8001558:	eeb0 aa40 	vmov.f32	s20, s0
 800155c:	eef0 aa60 	vmov.f32	s21, s1
 8001560:	4a73      	ldr	r2, [pc, #460]	@ (8001730 <main+0x550>)
 8001562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	ed93 7b00 	vldr	d7, [r3]
 800156c:	eeb0 0a47 	vmov.f32	s0, s14
 8001570:	eef0 0a67 	vmov.f32	s1, s15
 8001574:	f7ff fd1a 	bl	8000fac <f2>
 8001578:	eeb0 7a40 	vmov.f32	s14, s0
 800157c:	eef0 7a60 	vmov.f32	s15, s1
 8001580:	eeb0 3a47 	vmov.f32	s6, s14
 8001584:	eef0 3a67 	vmov.f32	s7, s15
 8001588:	eeb0 2a4a 	vmov.f32	s4, s20
 800158c:	eef0 2a6a 	vmov.f32	s5, s21
 8001590:	eeb0 1a49 	vmov.f32	s2, s18
 8001594:	eef0 1a69 	vmov.f32	s3, s19
 8001598:	eeb0 0a48 	vmov.f32	s0, s16
 800159c:	eef0 0a68 	vmov.f32	s1, s17
 80015a0:	f7ff fd88 	bl	80010b4 <euclidean>
 80015a4:	ec51 0b10 	vmov	r0, r1, d0
 80015a8:	a35f      	add	r3, pc, #380	@ (adr r3, 8001728 <main+0x548>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff faaf 	bl	8000b10 <__aeabi_dcmple>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d012      	beq.n	80015de <main+0x3fe>
          s[i]++;
 80015b8:	4a60      	ldr	r2, [pc, #384]	@ (800173c <main+0x55c>)
 80015ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001738 <main+0x558>)
 80015ca:	f7fe fe6f 	bl	80002ac <__adddf3>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	485a      	ldr	r0, [pc, #360]	@ (800173c <main+0x55c>)
 80015d4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80015d6:	00c9      	lsls	r1, r1, #3
 80015d8:	4401      	add	r1, r0
 80015da:	e9c1 2300 	strd	r2, r3, [r1]
      for (j = 0; j < POP_SIZE * 2; j++) {
 80015de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015e0:	3301      	adds	r3, #1
 80015e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80015e8:	f77f af5e 	ble.w	80014a8 <main+0x2c8>
      }
      p[i] = 1.0 / (y[i] + 1) + 1.0 / s[i];
 80015ec:	4a51      	ldr	r2, [pc, #324]	@ (8001734 <main+0x554>)
 80015ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001738 <main+0x558>)
 80015fe:	f7fe fe55 	bl	80002ac <__adddf3>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	f04f 0000 	mov.w	r0, #0
 800160a:	494b      	ldr	r1, [pc, #300]	@ (8001738 <main+0x558>)
 800160c:	f7ff f92e 	bl	800086c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4614      	mov	r4, r2
 8001616:	461d      	mov	r5, r3
 8001618:	4a48      	ldr	r2, [pc, #288]	@ (800173c <main+0x55c>)
 800161a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f04f 0000 	mov.w	r0, #0
 8001628:	4943      	ldr	r1, [pc, #268]	@ (8001738 <main+0x558>)
 800162a:	f7ff f91f 	bl	800086c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fe39 	bl	80002ac <__adddf3>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4840      	ldr	r0, [pc, #256]	@ (8001740 <main+0x560>)
 8001640:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001642:	00c9      	lsls	r1, r1, #3
 8001644:	4401      	add	r1, r0
 8001646:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < POP_SIZE * 2; i++) {
 800164a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800164c:	3301      	adds	r3, #1
 800164e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001652:	2bc7      	cmp	r3, #199	@ 0xc7
 8001654:	f77f aefb 	ble.w	800144e <main+0x26e>
    }

    for (i = 0; i < POP_SIZE * 2; i++) {
 8001658:	2300      	movs	r3, #0
 800165a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800165c:	e055      	b.n	800170a <main+0x52a>
      for (j = i + 1; j < POP_SIZE * 2; j++) {
 800165e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001660:	3301      	adds	r3, #1
 8001662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001664:	e04b      	b.n	80016fe <main+0x51e>
        if (p[i] < p[j]) {
 8001666:	4a36      	ldr	r2, [pc, #216]	@ (8001740 <main+0x560>)
 8001668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4413      	add	r3, r2
 800166e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001672:	4a33      	ldr	r2, [pc, #204]	@ (8001740 <main+0x560>)
 8001674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7ff fa3d 	bl	8000afc <__aeabi_dcmplt>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d037      	beq.n	80016f8 <main+0x518>
          t1 = p[i]; t2 = x[i];
 8001688:	4a2d      	ldr	r2, [pc, #180]	@ (8001740 <main+0x560>)
 800168a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8001698:	4a25      	ldr	r2, [pc, #148]	@ (8001730 <main+0x550>)
 800169a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
          p[i] = p[j]; x[i] = x[j];
 80016a8:	4a25      	ldr	r2, [pc, #148]	@ (8001740 <main+0x560>)
 80016aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4413      	add	r3, r2
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	4822      	ldr	r0, [pc, #136]	@ (8001740 <main+0x560>)
 80016b6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80016b8:	00c9      	lsls	r1, r1, #3
 80016ba:	4401      	add	r1, r0
 80016bc:	e9c1 2300 	strd	r2, r3, [r1]
 80016c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001730 <main+0x550>)
 80016c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	4818      	ldr	r0, [pc, #96]	@ (8001730 <main+0x550>)
 80016ce:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80016d0:	00c9      	lsls	r1, r1, #3
 80016d2:	4401      	add	r1, r0
 80016d4:	e9c1 2300 	strd	r2, r3, [r1]
          p[j] = t1; x[j] = t2;
 80016d8:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <main+0x560>)
 80016da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	18d1      	adds	r1, r2, r3
 80016e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016e4:	e9c1 2300 	strd	r2, r3, [r1]
 80016e8:	4a11      	ldr	r2, [pc, #68]	@ (8001730 <main+0x550>)
 80016ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	18d1      	adds	r1, r2, r3
 80016f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016f4:	e9c1 2300 	strd	r2, r3, [r1]
      for (j = i + 1; j < POP_SIZE * 2; j++) {
 80016f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016fa:	3301      	adds	r3, #1
 80016fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001700:	2bc7      	cmp	r3, #199	@ 0xc7
 8001702:	ddb0      	ble.n	8001666 <main+0x486>
    for (i = 0; i < POP_SIZE * 2; i++) {
 8001704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001706:	3301      	adds	r3, #1
 8001708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800170a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800170c:	2bc7      	cmp	r3, #199	@ 0xc7
 800170e:	dda6      	ble.n	800165e <main+0x47e>
        }
      }
    }

    printf("The he %d:\r\n", h + 1);
 8001710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001712:	3301      	adds	r3, #1
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	@ (8001744 <main+0x564>)
 8001718:	f002 fc36 	bl	8003f88 <iprintf>
    for (i = 0; i < POP_SIZE; i++) {
 800171c:	2300      	movs	r3, #0
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001720:	e03a      	b.n	8001798 <main+0x5b8>
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	47ae147b 	.word	0x47ae147b
 800172c:	3f847ae1 	.word	0x3f847ae1
 8001730:	20000240 	.word	0x20000240
 8001734:	200011e0 	.word	0x200011e0
 8001738:	3ff00000 	.word	0x3ff00000
 800173c:	20002180 	.word	0x20002180
 8001740:	20003120 	.word	0x20003120
 8001744:	0800616c 	.word	0x0800616c
      printf("%f %f\r\n", f1(x[i]), f2(x[i]));
 8001748:	4a1f      	ldr	r2, [pc, #124]	@ (80017c8 <main+0x5e8>)
 800174a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	ed93 7b00 	vldr	d7, [r3]
 8001754:	eeb0 0a47 	vmov.f32	s0, s14
 8001758:	eef0 0a67 	vmov.f32	s1, s15
 800175c:	f7ff fbca 	bl	8000ef4 <f1>
 8001760:	ec55 4b10 	vmov	r4, r5, d0
 8001764:	4a18      	ldr	r2, [pc, #96]	@ (80017c8 <main+0x5e8>)
 8001766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	4413      	add	r3, r2
 800176c:	ed93 7b00 	vldr	d7, [r3]
 8001770:	eeb0 0a47 	vmov.f32	s0, s14
 8001774:	eef0 0a67 	vmov.f32	s1, s15
 8001778:	f7ff fc18 	bl	8000fac <f2>
 800177c:	eeb0 7a40 	vmov.f32	s14, s0
 8001780:	eef0 7a60 	vmov.f32	s15, s1
 8001784:	ed8d 7b00 	vstr	d7, [sp]
 8001788:	4622      	mov	r2, r4
 800178a:	462b      	mov	r3, r5
 800178c:	480f      	ldr	r0, [pc, #60]	@ (80017cc <main+0x5ec>)
 800178e:	f002 fbfb 	bl	8003f88 <iprintf>
    for (i = 0; i < POP_SIZE; i++) {
 8001792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001794:	3301      	adds	r3, #1
 8001796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800179a:	2b63      	cmp	r3, #99	@ 0x63
 800179c:	ddd4      	ble.n	8001748 <main+0x568>
    }

    HAL_Delay(400);
 800179e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80017a2:	f000 fb03 	bl	8001dac <HAL_Delay>
  for (h = 0; h < GENERATIONS; h++) {
 80017a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a8:	3301      	adds	r3, #1
 80017aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80017ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ae:	2b13      	cmp	r3, #19
 80017b0:	f77f ad53 	ble.w	800125a <main+0x7a>
  }

  printf("Hoan thanh %d the he.\r\n", GENERATIONS);
 80017b4:	2114      	movs	r1, #20
 80017b6:	4806      	ldr	r0, [pc, #24]	@ (80017d0 <main+0x5f0>)
 80017b8:	f002 fbe6 	bl	8003f88 <iprintf>

  while (1) {
    HAL_Delay(1000);
 80017bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c0:	f000 faf4 	bl	8001dac <HAL_Delay>
 80017c4:	e7fa      	b.n	80017bc <main+0x5dc>
 80017c6:	bf00      	nop
 80017c8:	20000240 	.word	0x20000240
 80017cc:	0800617c 	.word	0x0800617c
 80017d0:	08006184 	.word	0x08006184

080017d4 <__io_putchar>:
  }
}

/* Redirect printf to UART1 */
int __io_putchar(int ch)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80017dc:	1d39      	adds	r1, r7, #4
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	2201      	movs	r2, #1
 80017e4:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <__io_putchar+0x20>)
 80017e6:	f001 fa8f 	bl	8002d08 <HAL_UART_Transmit>
  return ch;
 80017ea:	687b      	ldr	r3, [r7, #4]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200001f4 	.word	0x200001f4

080017f8 <SystemClock_Config>:

/* Clock Configuration */
void SystemClock_Config(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b094      	sub	sp, #80	@ 0x50
 80017fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	2230      	movs	r2, #48	@ 0x30
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fd06 	bl	8004218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	4b2c      	ldr	r3, [pc, #176]	@ (80018d4 <SystemClock_Config+0xdc>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	4a2b      	ldr	r2, [pc, #172]	@ (80018d4 <SystemClock_Config+0xdc>)
 8001826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182a:	6413      	str	r3, [r2, #64]	@ 0x40
 800182c:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <SystemClock_Config+0xdc>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <SystemClock_Config+0xe0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001844:	4a24      	ldr	r2, [pc, #144]	@ (80018d8 <SystemClock_Config+0xe0>)
 8001846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <SystemClock_Config+0xe0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001858:	2302      	movs	r3, #2
 800185a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800185c:	2301      	movs	r3, #1
 800185e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001860:	2310      	movs	r3, #16
 8001862:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001864:	2302      	movs	r3, #2
 8001866:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001868:	2300      	movs	r3, #0
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800186c:	2308      	movs	r3, #8
 800186e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001870:	235a      	movs	r3, #90	@ 0x5a
 8001872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001874:	2302      	movs	r3, #2
 8001876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001878:	2304      	movs	r3, #4
 800187a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fd99 	bl	80023b8 <HAL_RCC_OscConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0x98>
 800188c:	f000 f86a 	bl	8001964 <Error_Handler>

  if (HAL_PWREx_EnableOverDrive() != HAL_OK) Error_Handler();
 8001890:	f000 fd42 	bl	8002318 <HAL_PWREx_EnableOverDrive>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SystemClock_Config+0xa6>
 800189a:	f000 f863 	bl	8001964 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|
 800189e:	230f      	movs	r3, #15
 80018a0:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a2:	2302      	movs	r3, #2
 80018a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2102      	movs	r1, #2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fff4 	bl	80028a8 <HAL_RCC_ClockConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0xd2>
    Error_Handler();
 80018c6:	f000 f84d 	bl	8001964 <Error_Handler>
}
 80018ca:	bf00      	nop
 80018cc:	3750      	adds	r7, #80	@ 0x50
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000

080018dc <MX_USART1_UART_Init>:

/* UART1 */
static void MX_USART1_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <MX_USART1_UART_Init+0x50>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001914:	f001 f9a8 	bl	8002c68 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART1_UART_Init+0x46>
    Error_Handler();
 800191e:	f000 f821 	bl	8001964 <Error_Handler>
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200001f4 	.word	0x200001f4
 800192c:	40011000 	.word	0x40011000

08001930 <MX_GPIO_Init>:

/* GPIO */
static void MX_GPIO_Init(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_GPIO_Init+0x30>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <MX_GPIO_Init+0x30>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_GPIO_Init+0x30>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <Error_Handler>:

/* Error Handler */
void Error_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001968:	b672      	cpsid	i
}
 800196a:	bf00      	nop
  __disable_irq();
  while (1) {
    printf("Loi he thong!\r\n");
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <Error_Handler+0x1c>)
 800196e:	f002 fb73 	bl	8004058 <puts>
    HAL_Delay(1000);
 8001972:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001976:	f000 fa19 	bl	8001dac <HAL_Delay>
    printf("Loi he thong!\r\n");
 800197a:	bf00      	nop
 800197c:	e7f6      	b.n	800196c <Error_Handler+0x8>
 800197e:	bf00      	nop
 8001980:	0800619c 	.word	0x0800619c

08001984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a0f      	ldr	r2, [pc, #60]	@ (80019d0 <HAL_MspInit+0x4c>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <HAL_MspInit+0x4c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4a08      	ldr	r2, [pc, #32]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	@ 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <HAL_UART_MspInit+0x84>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12c      	bne.n	8001a50 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a00:	f043 0310 	orr.w	r3, r3, #16
 8001a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_UART_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a2e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a40:	2307      	movs	r3, #7
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4805      	ldr	r0, [pc, #20]	@ (8001a60 <HAL_UART_MspInit+0x8c>)
 8001a4c:	f000 fab8 	bl	8001fc0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <NMI_Handler+0x4>

08001a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aba:	f000 f957 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_kill>:

int _kill(int pid, int sig)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001adc:	f002 fbee 	bl	80042bc <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2216      	movs	r2, #22
 8001ae4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_exit>:

void _exit (int status)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001afa:	f04f 31ff 	mov.w	r1, #4294967295
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffe7 	bl	8001ad2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <_exit+0x12>

08001b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	e00a      	b.n	8001b30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b1a:	f3af 8000 	nop.w
 8001b1e:	4601      	mov	r1, r0
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	60ba      	str	r2, [r7, #8]
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf0      	blt.n	8001b1a <_read+0x12>
  }

  return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e009      	b.n	8001b68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe39 	bl	80017d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_write+0x12>
  }
  return len;
 8001b70:	687b      	ldr	r3, [r7, #4]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <_close>:

int _close(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ba2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_isatty>:

int _isatty(int file)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	@ (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f002 fb52 	bl	80042bc <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20030000 	.word	0x20030000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	200040c0 	.word	0x200040c0
 8001c4c:	20004218 	.word	0x20004218

08001c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <SystemInit+0x20>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c5a:	4a05      	ldr	r2, [pc, #20]	@ (8001c70 <SystemInit+0x20>)
 8001c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c78:	f7ff ffea 	bl	8001c50 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c7c:	480c      	ldr	r0, [pc, #48]	@ (8001cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7e:	490d      	ldr	r1, [pc, #52]	@ (8001cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c80:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c84:	e002      	b.n	8001c8c <LoopCopyDataInit>

08001c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8a:	3304      	adds	r3, #4

08001c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c90:	d3f9      	bcc.n	8001c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c94:	4c0a      	ldr	r4, [pc, #40]	@ (8001cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c98:	e001      	b.n	8001c9e <LoopFillZerobss>

08001c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c9c:	3204      	adds	r2, #4

08001c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca0:	d3fb      	bcc.n	8001c9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ca2:	f002 fb11 	bl	80042c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca6:	f7ff fa9b 	bl	80011e0 <main>
  bx  lr    
 8001caa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cb8:	080065b8 	.word	0x080065b8
  ldr r2, =_sbss
 8001cbc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001cc0:	20004214 	.word	0x20004214

08001cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <ADC_IRQHandler>
	...

08001cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <HAL_Init+0x40>)
 8001cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d08 <HAL_Init+0x40>)
 8001cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a07      	ldr	r2, [pc, #28]	@ (8001d08 <HAL_Init+0x40>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf0:	2003      	movs	r0, #3
 8001cf2:	f000 f931 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	f000 f808 	bl	8001d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfc:	f7ff fe42 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00

08001d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_InitTick+0x54>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <HAL_InitTick+0x58>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f93b 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00e      	b.n	8001d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d80a      	bhi.n	8001d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f000 f911 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d4c:	4a06      	ldr	r2, [pc, #24]	@ (8001d68 <HAL_InitTick+0x5c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000008 	.word	0x20000008
 8001d68:	20000004 	.word	0x20000004

08001d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_IncTick+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_IncTick+0x24>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <HAL_IncTick+0x24>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	200040c4 	.word	0x200040c4

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200040c4 	.word	0x200040c4

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd2:	bf00      	nop
 8001dd4:	f7ff ffde 	bl	8001d94 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	@ (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	@ (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	@ 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f7ff ff8e 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff47 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f80:	f7ff ff5c 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f7ff ff8e 	bl	8001eac <NVIC_EncodePriority>
 8001f90:	4602      	mov	r2, r0
 8001f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff5d 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9e:	bf00      	nop
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffb0 	bl	8001f14 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e177      	b.n	80022cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 8166 	bne.w	80022c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	2b02      	cmp	r3, #2
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80c0 	beq.w	80022c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b66      	ldr	r3, [pc, #408]	@ (80022e4 <HAL_GPIO_Init+0x324>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	4a65      	ldr	r2, [pc, #404]	@ (80022e4 <HAL_GPIO_Init+0x324>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002154:	6453      	str	r3, [r2, #68]	@ 0x44
 8002156:	4b63      	ldr	r3, [pc, #396]	@ (80022e4 <HAL_GPIO_Init+0x324>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002162:	4a61      	ldr	r2, [pc, #388]	@ (80022e8 <HAL_GPIO_Init+0x328>)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	3302      	adds	r3, #2
 800216a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	220f      	movs	r2, #15
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a58      	ldr	r2, [pc, #352]	@ (80022ec <HAL_GPIO_Init+0x32c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d037      	beq.n	80021fe <HAL_GPIO_Init+0x23e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a57      	ldr	r2, [pc, #348]	@ (80022f0 <HAL_GPIO_Init+0x330>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d031      	beq.n	80021fa <HAL_GPIO_Init+0x23a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a56      	ldr	r2, [pc, #344]	@ (80022f4 <HAL_GPIO_Init+0x334>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d02b      	beq.n	80021f6 <HAL_GPIO_Init+0x236>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a55      	ldr	r2, [pc, #340]	@ (80022f8 <HAL_GPIO_Init+0x338>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d025      	beq.n	80021f2 <HAL_GPIO_Init+0x232>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a54      	ldr	r2, [pc, #336]	@ (80022fc <HAL_GPIO_Init+0x33c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01f      	beq.n	80021ee <HAL_GPIO_Init+0x22e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a53      	ldr	r2, [pc, #332]	@ (8002300 <HAL_GPIO_Init+0x340>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d019      	beq.n	80021ea <HAL_GPIO_Init+0x22a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a52      	ldr	r2, [pc, #328]	@ (8002304 <HAL_GPIO_Init+0x344>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x226>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a51      	ldr	r2, [pc, #324]	@ (8002308 <HAL_GPIO_Init+0x348>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x222>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a50      	ldr	r2, [pc, #320]	@ (800230c <HAL_GPIO_Init+0x34c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x21e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002310 <HAL_GPIO_Init+0x350>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x21a>
 80021d6:	2309      	movs	r3, #9
 80021d8:	e012      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021da:	230a      	movs	r3, #10
 80021dc:	e010      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021de:	2308      	movs	r3, #8
 80021e0:	e00e      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021e2:	2307      	movs	r3, #7
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021e6:	2306      	movs	r3, #6
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x240>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002210:	4935      	ldr	r1, [pc, #212]	@ (80022e8 <HAL_GPIO_Init+0x328>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221e:	4b3d      	ldr	r3, [pc, #244]	@ (8002314 <HAL_GPIO_Init+0x354>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002242:	4a34      	ldr	r2, [pc, #208]	@ (8002314 <HAL_GPIO_Init+0x354>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002248:	4b32      	ldr	r3, [pc, #200]	@ (8002314 <HAL_GPIO_Init+0x354>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800226c:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_GPIO_Init+0x354>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002272:	4b28      	ldr	r3, [pc, #160]	@ (8002314 <HAL_GPIO_Init+0x354>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002296:	4a1f      	ldr	r2, [pc, #124]	@ (8002314 <HAL_GPIO_Init+0x354>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_GPIO_Init+0x354>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <HAL_GPIO_Init+0x354>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae84 	bls.w	8001fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3724      	adds	r7, #36	@ 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40021c00 	.word	0x40021c00
 800230c:	40022000 	.word	0x40022000
 8002310:	40022400 	.word	0x40022400
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_PWREx_EnableOverDrive+0x94>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002344:	f7ff fd26 	bl	8001d94 <HAL_GetTick>
 8002348:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800234a:	e009      	b.n	8002360 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800234c:	f7ff fd22 	bl	8001d94 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800235a:	d901      	bls.n	8002360 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e01f      	b.n	80023a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002360:	4b13      	ldr	r3, [pc, #76]	@ (80023b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236c:	d1ee      	bne.n	800234c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002374:	f7ff fd0e 	bl	8001d94 <HAL_GetTick>
 8002378:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800237a:	e009      	b.n	8002390 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800237c:	f7ff fd0a 	bl	8001d94 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800238a:	d901      	bls.n	8002390 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e007      	b.n	80023a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800239c:	d1ee      	bne.n	800237c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	420e0040 	.word	0x420e0040
 80023b0:	40007000 	.word	0x40007000
 80023b4:	420e0044 	.word	0x420e0044

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e267      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d075      	beq.n	80024c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023d6:	4b88      	ldr	r3, [pc, #544]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d00c      	beq.n	80023fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e2:	4b85      	ldr	r3, [pc, #532]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d112      	bne.n	8002414 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ee:	4b82      	ldr	r3, [pc, #520]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023fa:	d10b      	bne.n	8002414 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	4b7e      	ldr	r3, [pc, #504]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05b      	beq.n	80024c0 <HAL_RCC_OscConfig+0x108>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d157      	bne.n	80024c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e242      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x74>
 800241e:	4b76      	ldr	r3, [pc, #472]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a75      	ldr	r2, [pc, #468]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e01d      	b.n	8002468 <HAL_RCC_OscConfig+0xb0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x98>
 8002436:	4b70      	ldr	r3, [pc, #448]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6f      	ldr	r2, [pc, #444]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b6d      	ldr	r3, [pc, #436]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6c      	ldr	r2, [pc, #432]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0xb0>
 8002450:	4b69      	ldr	r3, [pc, #420]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a68      	ldr	r2, [pc, #416]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a65      	ldr	r2, [pc, #404]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7ff fc90 	bl	8001d94 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff fc8c 	bl	8001d94 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e207      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b5b      	ldr	r3, [pc, #364]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0xc0>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fc7c 	bl	8001d94 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff fc78 	bl	8001d94 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	@ 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1f3      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	4b51      	ldr	r3, [pc, #324]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0xe8>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d063      	beq.n	8002596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024ce:	4b4a      	ldr	r3, [pc, #296]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d11c      	bne.n	8002520 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e6:	4b44      	ldr	r3, [pc, #272]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	4b41      	ldr	r3, [pc, #260]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x152>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e1c7      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4937      	ldr	r1, [pc, #220]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	e03a      	b.n	8002596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002528:	4b34      	ldr	r3, [pc, #208]	@ (80025fc <HAL_RCC_OscConfig+0x244>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff fc31 	bl	8001d94 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7ff fc2d 	bl	8001d94 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e1a8      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002548:	4b2b      	ldr	r3, [pc, #172]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b28      	ldr	r3, [pc, #160]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4925      	ldr	r1, [pc, #148]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <HAL_RCC_OscConfig+0x244>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff fc10 	bl	8001d94 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002578:	f7ff fc0c 	bl	8001d94 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e187      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d036      	beq.n	8002610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025aa:	4b15      	ldr	r3, [pc, #84]	@ (8002600 <HAL_RCC_OscConfig+0x248>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7ff fbf0 	bl	8001d94 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff fbec 	bl	8001d94 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e167      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_OscConfig+0x240>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x200>
 80025d6:	e01b      	b.n	8002610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCC_OscConfig+0x248>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025de:	f7ff fbd9 	bl	8001d94 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	e00e      	b.n	8002604 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e6:	f7ff fbd5 	bl	8001d94 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d907      	bls.n	8002604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e150      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	42470000 	.word	0x42470000
 8002600:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b88      	ldr	r3, [pc, #544]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ea      	bne.n	80025e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8097 	beq.w	800274c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b81      	ldr	r3, [pc, #516]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	4b7d      	ldr	r3, [pc, #500]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002636:	4a7c      	ldr	r2, [pc, #496]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263c:	6413      	str	r3, [r2, #64]	@ 0x40
 800263e:	4b7a      	ldr	r3, [pc, #488]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b77      	ldr	r3, [pc, #476]	@ (800282c <HAL_RCC_OscConfig+0x474>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d118      	bne.n	800268c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b74      	ldr	r3, [pc, #464]	@ (800282c <HAL_RCC_OscConfig+0x474>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a73      	ldr	r2, [pc, #460]	@ (800282c <HAL_RCC_OscConfig+0x474>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7ff fb95 	bl	8001d94 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7ff fb91 	bl	8001d94 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e10c      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	4b6a      	ldr	r3, [pc, #424]	@ (800282c <HAL_RCC_OscConfig+0x474>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2ea>
 8002694:	4b64      	ldr	r3, [pc, #400]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002698:	4a63      	ldr	r2, [pc, #396]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a0:	e01c      	b.n	80026dc <HAL_RCC_OscConfig+0x324>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x30c>
 80026aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0x324>
 80026c4:	4b58      	ldr	r3, [pc, #352]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c8:	4a57      	ldr	r2, [pc, #348]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d0:	4b55      	ldr	r3, [pc, #340]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d4:	4a54      	ldr	r2, [pc, #336]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7ff fb56 	bl	8001d94 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7ff fb52 	bl	8001d94 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0cb      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	4b49      	ldr	r3, [pc, #292]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ee      	beq.n	80026ec <HAL_RCC_OscConfig+0x334>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7ff fb40 	bl	8001d94 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7ff fb3c 	bl	8001d94 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0b5      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	4b3e      	ldr	r3, [pc, #248]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ee      	bne.n	8002718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b39      	ldr	r3, [pc, #228]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	4a38      	ldr	r2, [pc, #224]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a1 	beq.w	8002898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002756:	4b34      	ldr	r3, [pc, #208]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b08      	cmp	r3, #8
 8002760:	d05c      	beq.n	800281c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d141      	bne.n	80027ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276a:	4b31      	ldr	r3, [pc, #196]	@ (8002830 <HAL_RCC_OscConfig+0x478>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff fb10 	bl	8001d94 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7ff fb0c 	bl	8001d94 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e087      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	4b27      	ldr	r3, [pc, #156]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	491b      	ldr	r1, [pc, #108]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <HAL_RCC_OscConfig+0x478>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7ff fae5 	bl	8001d94 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7ff fae1 	bl	8001d94 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e05c      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e0:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x416>
 80027ec:	e054      	b.n	8002898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b10      	ldr	r3, [pc, #64]	@ (8002830 <HAL_RCC_OscConfig+0x478>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7ff face 	bl	8001d94 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7ff faca 	bl	8001d94 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e045      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_RCC_OscConfig+0x470>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x444>
 800281a:	e03d      	b.n	8002898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e038      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
 8002828:	40023800 	.word	0x40023800
 800282c:	40007000 	.word	0x40007000
 8002830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002834:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <HAL_RCC_OscConfig+0x4ec>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d028      	beq.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d121      	bne.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d11a      	bne.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800286a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	3b01      	subs	r3, #1
 800287e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0cc      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b68      	ldr	r3, [pc, #416]	@ (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d90c      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b65      	ldr	r3, [pc, #404]	@ (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b63      	ldr	r3, [pc, #396]	@ (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0b8      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028fc:	4b59      	ldr	r3, [pc, #356]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a58      	ldr	r2, [pc, #352]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002906:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002914:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800291e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b50      	ldr	r3, [pc, #320]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	494d      	ldr	r1, [pc, #308]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d044      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d119      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e07f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d003      	beq.n	8002966 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002962:	2b03      	cmp	r3, #3
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	4b3f      	ldr	r3, [pc, #252]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e06f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002976:	4b3b      	ldr	r3, [pc, #236]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e067      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002986:	4b37      	ldr	r3, [pc, #220]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4934      	ldr	r1, [pc, #208]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002998:	f7ff f9fc 	bl	8001d94 <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7ff f9f8 	bl	8001d94 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e04f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 020c 	and.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1eb      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d20c      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b20      	ldr	r3, [pc, #128]	@ (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e032      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4916      	ldr	r1, [pc, #88]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1a:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	490e      	ldr	r1, [pc, #56]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a2e:	f000 f821 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	490a      	ldr	r1, [pc, #40]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	5ccb      	ldrb	r3, [r1, r3]
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	4a09      	ldr	r2, [pc, #36]	@ (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a4a:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff f95c 	bl	8001d0c <HAL_InitTick>

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023c00 	.word	0x40023c00
 8002a64:	40023800 	.word	0x40023800
 8002a68:	080061ac 	.word	0x080061ac
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b090      	sub	sp, #64	@ 0x40
 8002a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a8c:	4b59      	ldr	r3, [pc, #356]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d00d      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	f200 80a1 	bhi.w	8002be0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_GetSysClockFreq+0x3a>
 8002aa6:	e09b      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aac:	e09b      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aae:	4b53      	ldr	r3, [pc, #332]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ab2:	e098      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002abc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002abe:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d028      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aca:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	623b      	str	r3, [r7, #32]
 8002ad4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002adc:	2100      	movs	r1, #0
 8002ade:	4b47      	ldr	r3, [pc, #284]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae0:	fb03 f201 	mul.w	r2, r3, r1
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	4a43      	ldr	r2, [pc, #268]	@ (8002bfc <HAL_RCC_GetSysClockFreq+0x188>)
 8002aee:	fba0 1202 	umull	r1, r2, r0, r2
 8002af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002af4:	460a      	mov	r2, r1
 8002af6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002afa:	4413      	add	r3, r2
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b00:	2200      	movs	r2, #0
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	61fa      	str	r2, [r7, #28]
 8002b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b0e:	f7fe f85b 	bl	8000bc8 <__aeabi_uldivmod>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4613      	mov	r3, r2
 8002b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b1a:	e053      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1c:	4b35      	ldr	r3, [pc, #212]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	2200      	movs	r2, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	617a      	str	r2, [r7, #20]
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b2e:	f04f 0b00 	mov.w	fp, #0
 8002b32:	4652      	mov	r2, sl
 8002b34:	465b      	mov	r3, fp
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	0159      	lsls	r1, r3, #5
 8002b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b44:	0150      	lsls	r0, r2, #5
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b66:	ebb2 0408 	subs.w	r4, r2, r8
 8002b6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	00eb      	lsls	r3, r5, #3
 8002b78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7c:	00e2      	lsls	r2, r4, #3
 8002b7e:	4614      	mov	r4, r2
 8002b80:	461d      	mov	r5, r3
 8002b82:	eb14 030a 	adds.w	r3, r4, sl
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	eb45 030b 	adc.w	r3, r5, fp
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	028b      	lsls	r3, r1, #10
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	028a      	lsls	r2, r1, #10
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	60fa      	str	r2, [r7, #12]
 8002bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bb8:	f7fe f806 	bl	8000bc8 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002bd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bde:	e002      	b.n	8002be6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002be2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3740      	adds	r7, #64	@ 0x40
 8002bec:	46bd      	mov	sp, r7
 8002bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	017d7840 	.word	0x017d7840

08002c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c04:	4b03      	ldr	r3, [pc, #12]	@ (8002c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000000 	.word	0x20000000

08002c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c1c:	f7ff fff0 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	@ (8002c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	0a9b      	lsrs	r3, r3, #10
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	@ (8002c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	080061bc 	.word	0x080061bc

08002c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c44:	f7ff ffdc 	bl	8002c00 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0b5b      	lsrs	r3, r3, #13
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	@ (8002c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	080061bc 	.word	0x080061bc

08002c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e042      	b.n	8002d00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fea0 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2224      	movs	r2, #36	@ 0x24
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f973 	bl	8002f98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695a      	ldr	r2, [r3, #20]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d175      	bne.n	8002e14 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_UART_Transmit+0x2c>
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e06e      	b.n	8002e16 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	@ 0x21
 8002d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7ff f825 	bl	8001d94 <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d60:	d108      	bne.n	8002d74 <HAL_UART_Transmit+0x6c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d104      	bne.n	8002d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	e003      	b.n	8002d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d7c:	e02e      	b.n	8002ddc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	@ 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f848 	bl	8002e1e <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e03a      	b.n	8002e16 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10b      	bne.n	8002dbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	3302      	adds	r3, #2
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e007      	b.n	8002dce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1cb      	bne.n	8002d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	2140      	movs	r1, #64	@ 0x40
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f814 	bl	8002e1e <UART_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e006      	b.n	8002e16 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	603b      	str	r3, [r7, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2e:	e03b      	b.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e36:	d037      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	f7fe ffac 	bl	8001d94 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	6a3a      	ldr	r2, [r7, #32]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d302      	bcc.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e03a      	b.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d023      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b80      	cmp	r3, #128	@ 0x80
 8002e64:	d020      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b40      	cmp	r3, #64	@ 0x40
 8002e6a:	d01d      	beq.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d116      	bne.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f81d 	bl	8002ed0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2208      	movs	r2, #8
 8002e9a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e00f      	b.n	8002ec8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d0b4      	beq.n	8002e30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b095      	sub	sp, #84	@ 0x54
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ef8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002efe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e5      	bne.n	8002ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3314      	adds	r3, #20
 8002f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f34:	e841 2300 	strex	r3, r2, [r1]
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1e5      	bne.n	8002f0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d119      	bne.n	8002f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	330c      	adds	r3, #12
 8002f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	e853 3f00 	ldrex	r3, [r3]
 8002f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 0310 	bic.w	r3, r3, #16
 8002f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f68:	61ba      	str	r2, [r7, #24]
 8002f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6979      	ldr	r1, [r7, #20]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	613b      	str	r3, [r7, #16]
   return(result);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e5      	bne.n	8002f48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f8a:	bf00      	nop
 8002f8c:	3754      	adds	r7, #84	@ 0x54
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b0c0      	sub	sp, #256	@ 0x100
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	68d9      	ldr	r1, [r3, #12]
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	ea40 0301 	orr.w	r3, r0, r1
 8002fc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ff0:	f021 010c 	bic.w	r1, r1, #12
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ffe:	430b      	orrs	r3, r1
 8003000:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003012:	6999      	ldr	r1, [r3, #24]
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	ea40 0301 	orr.w	r3, r0, r1
 800301e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b8f      	ldr	r3, [pc, #572]	@ (8003264 <UART_SetConfig+0x2cc>)
 8003028:	429a      	cmp	r2, r3
 800302a:	d005      	beq.n	8003038 <UART_SetConfig+0xa0>
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b8d      	ldr	r3, [pc, #564]	@ (8003268 <UART_SetConfig+0x2d0>)
 8003034:	429a      	cmp	r2, r3
 8003036:	d104      	bne.n	8003042 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003038:	f7ff fe02 	bl	8002c40 <HAL_RCC_GetPCLK2Freq>
 800303c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003040:	e003      	b.n	800304a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003042:	f7ff fde9 	bl	8002c18 <HAL_RCC_GetPCLK1Freq>
 8003046:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003054:	f040 810c 	bne.w	8003270 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800305c:	2200      	movs	r2, #0
 800305e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003062:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003066:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800306a:	4622      	mov	r2, r4
 800306c:	462b      	mov	r3, r5
 800306e:	1891      	adds	r1, r2, r2
 8003070:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003072:	415b      	adcs	r3, r3
 8003074:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003076:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800307a:	4621      	mov	r1, r4
 800307c:	eb12 0801 	adds.w	r8, r2, r1
 8003080:	4629      	mov	r1, r5
 8003082:	eb43 0901 	adc.w	r9, r3, r1
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800309a:	4690      	mov	r8, r2
 800309c:	4699      	mov	r9, r3
 800309e:	4623      	mov	r3, r4
 80030a0:	eb18 0303 	adds.w	r3, r8, r3
 80030a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030a8:	462b      	mov	r3, r5
 80030aa:	eb49 0303 	adc.w	r3, r9, r3
 80030ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030c6:	460b      	mov	r3, r1
 80030c8:	18db      	adds	r3, r3, r3
 80030ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80030cc:	4613      	mov	r3, r2
 80030ce:	eb42 0303 	adc.w	r3, r2, r3
 80030d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030dc:	f7fd fd74 	bl	8000bc8 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b61      	ldr	r3, [pc, #388]	@ (800326c <UART_SetConfig+0x2d4>)
 80030e6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	011c      	lsls	r4, r3, #4
 80030ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003108:	415b      	adcs	r3, r3
 800310a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800310c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003110:	4641      	mov	r1, r8
 8003112:	eb12 0a01 	adds.w	sl, r2, r1
 8003116:	4649      	mov	r1, r9
 8003118:	eb43 0b01 	adc.w	fp, r3, r1
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003128:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800312c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003130:	4692      	mov	sl, r2
 8003132:	469b      	mov	fp, r3
 8003134:	4643      	mov	r3, r8
 8003136:	eb1a 0303 	adds.w	r3, sl, r3
 800313a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800313e:	464b      	mov	r3, r9
 8003140:	eb4b 0303 	adc.w	r3, fp, r3
 8003144:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003154:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003158:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800315c:	460b      	mov	r3, r1
 800315e:	18db      	adds	r3, r3, r3
 8003160:	643b      	str	r3, [r7, #64]	@ 0x40
 8003162:	4613      	mov	r3, r2
 8003164:	eb42 0303 	adc.w	r3, r2, r3
 8003168:	647b      	str	r3, [r7, #68]	@ 0x44
 800316a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800316e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003172:	f7fd fd29 	bl	8000bc8 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4611      	mov	r1, r2
 800317c:	4b3b      	ldr	r3, [pc, #236]	@ (800326c <UART_SetConfig+0x2d4>)
 800317e:	fba3 2301 	umull	r2, r3, r3, r1
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2264      	movs	r2, #100	@ 0x64
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	1acb      	subs	r3, r1, r3
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003192:	4b36      	ldr	r3, [pc, #216]	@ (800326c <UART_SetConfig+0x2d4>)
 8003194:	fba3 2302 	umull	r2, r3, r3, r2
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031a0:	441c      	add	r4, r3
 80031a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031b4:	4642      	mov	r2, r8
 80031b6:	464b      	mov	r3, r9
 80031b8:	1891      	adds	r1, r2, r2
 80031ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031bc:	415b      	adcs	r3, r3
 80031be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031c4:	4641      	mov	r1, r8
 80031c6:	1851      	adds	r1, r2, r1
 80031c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80031ca:	4649      	mov	r1, r9
 80031cc:	414b      	adcs	r3, r1
 80031ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031dc:	4659      	mov	r1, fp
 80031de:	00cb      	lsls	r3, r1, #3
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e6:	4651      	mov	r1, sl
 80031e8:	00ca      	lsls	r2, r1, #3
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	4642      	mov	r2, r8
 80031f2:	189b      	adds	r3, r3, r2
 80031f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031f8:	464b      	mov	r3, r9
 80031fa:	460a      	mov	r2, r1
 80031fc:	eb42 0303 	adc.w	r3, r2, r3
 8003200:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003210:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003218:	460b      	mov	r3, r1
 800321a:	18db      	adds	r3, r3, r3
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800321e:	4613      	mov	r3, r2
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003226:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800322a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800322e:	f7fd fccb 	bl	8000bc8 <__aeabi_uldivmod>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <UART_SetConfig+0x2d4>)
 8003238:	fba3 1302 	umull	r1, r3, r3, r2
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	2164      	movs	r1, #100	@ 0x64
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	3332      	adds	r3, #50	@ 0x32
 800324a:	4a08      	ldr	r2, [pc, #32]	@ (800326c <UART_SetConfig+0x2d4>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	f003 0207 	and.w	r2, r3, #7
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4422      	add	r2, r4
 800325e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003260:	e106      	b.n	8003470 <UART_SetConfig+0x4d8>
 8003262:	bf00      	nop
 8003264:	40011000 	.word	0x40011000
 8003268:	40011400 	.word	0x40011400
 800326c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003274:	2200      	movs	r2, #0
 8003276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800327a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800327e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003282:	4642      	mov	r2, r8
 8003284:	464b      	mov	r3, r9
 8003286:	1891      	adds	r1, r2, r2
 8003288:	6239      	str	r1, [r7, #32]
 800328a:	415b      	adcs	r3, r3
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
 800328e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003292:	4641      	mov	r1, r8
 8003294:	1854      	adds	r4, r2, r1
 8003296:	4649      	mov	r1, r9
 8003298:	eb43 0501 	adc.w	r5, r3, r1
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	00eb      	lsls	r3, r5, #3
 80032a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032aa:	00e2      	lsls	r2, r4, #3
 80032ac:	4614      	mov	r4, r2
 80032ae:	461d      	mov	r5, r3
 80032b0:	4643      	mov	r3, r8
 80032b2:	18e3      	adds	r3, r4, r3
 80032b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032b8:	464b      	mov	r3, r9
 80032ba:	eb45 0303 	adc.w	r3, r5, r3
 80032be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032de:	4629      	mov	r1, r5
 80032e0:	008b      	lsls	r3, r1, #2
 80032e2:	4621      	mov	r1, r4
 80032e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e8:	4621      	mov	r1, r4
 80032ea:	008a      	lsls	r2, r1, #2
 80032ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032f0:	f7fd fc6a 	bl	8000bc8 <__aeabi_uldivmod>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4b60      	ldr	r3, [pc, #384]	@ (800347c <UART_SetConfig+0x4e4>)
 80032fa:	fba3 2302 	umull	r2, r3, r3, r2
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	011c      	lsls	r4, r3, #4
 8003302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003306:	2200      	movs	r2, #0
 8003308:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800330c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003310:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	1891      	adds	r1, r2, r2
 800331a:	61b9      	str	r1, [r7, #24]
 800331c:	415b      	adcs	r3, r3
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003324:	4641      	mov	r1, r8
 8003326:	1851      	adds	r1, r2, r1
 8003328:	6139      	str	r1, [r7, #16]
 800332a:	4649      	mov	r1, r9
 800332c:	414b      	adcs	r3, r1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800333c:	4659      	mov	r1, fp
 800333e:	00cb      	lsls	r3, r1, #3
 8003340:	4651      	mov	r1, sl
 8003342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003346:	4651      	mov	r1, sl
 8003348:	00ca      	lsls	r2, r1, #3
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	4603      	mov	r3, r0
 8003350:	4642      	mov	r2, r8
 8003352:	189b      	adds	r3, r3, r2
 8003354:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003358:	464b      	mov	r3, r9
 800335a:	460a      	mov	r2, r1
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800336e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800337c:	4649      	mov	r1, r9
 800337e:	008b      	lsls	r3, r1, #2
 8003380:	4641      	mov	r1, r8
 8003382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003386:	4641      	mov	r1, r8
 8003388:	008a      	lsls	r2, r1, #2
 800338a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800338e:	f7fd fc1b 	bl	8000bc8 <__aeabi_uldivmod>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4611      	mov	r1, r2
 8003398:	4b38      	ldr	r3, [pc, #224]	@ (800347c <UART_SetConfig+0x4e4>)
 800339a:	fba3 2301 	umull	r2, r3, r3, r1
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	2264      	movs	r2, #100	@ 0x64
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	1acb      	subs	r3, r1, r3
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	3332      	adds	r3, #50	@ 0x32
 80033ac:	4a33      	ldr	r2, [pc, #204]	@ (800347c <UART_SetConfig+0x4e4>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b8:	441c      	add	r4, r3
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80033c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80033c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033c8:	4642      	mov	r2, r8
 80033ca:	464b      	mov	r3, r9
 80033cc:	1891      	adds	r1, r2, r2
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	415b      	adcs	r3, r3
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033d8:	4641      	mov	r1, r8
 80033da:	1851      	adds	r1, r2, r1
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	4649      	mov	r1, r9
 80033e0:	414b      	adcs	r3, r1
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033f0:	4659      	mov	r1, fp
 80033f2:	00cb      	lsls	r3, r1, #3
 80033f4:	4651      	mov	r1, sl
 80033f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fa:	4651      	mov	r1, sl
 80033fc:	00ca      	lsls	r2, r1, #3
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	4603      	mov	r3, r0
 8003404:	4642      	mov	r2, r8
 8003406:	189b      	adds	r3, r3, r2
 8003408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800340a:	464b      	mov	r3, r9
 800340c:	460a      	mov	r2, r1
 800340e:	eb42 0303 	adc.w	r3, r2, r3
 8003412:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	663b      	str	r3, [r7, #96]	@ 0x60
 800341e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800342c:	4649      	mov	r1, r9
 800342e:	008b      	lsls	r3, r1, #2
 8003430:	4641      	mov	r1, r8
 8003432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003436:	4641      	mov	r1, r8
 8003438:	008a      	lsls	r2, r1, #2
 800343a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800343e:	f7fd fbc3 	bl	8000bc8 <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4b0d      	ldr	r3, [pc, #52]	@ (800347c <UART_SetConfig+0x4e4>)
 8003448:	fba3 1302 	umull	r1, r3, r3, r2
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	2164      	movs	r1, #100	@ 0x64
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	3332      	adds	r3, #50	@ 0x32
 800345a:	4a08      	ldr	r2, [pc, #32]	@ (800347c <UART_SetConfig+0x4e4>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4422      	add	r2, r4
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003476:	46bd      	mov	sp, r7
 8003478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347c:	51eb851f 	.word	0x51eb851f

08003480 <srand>:
 8003480:	b538      	push	{r3, r4, r5, lr}
 8003482:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <srand+0x44>)
 8003484:	681d      	ldr	r5, [r3, #0]
 8003486:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003488:	4604      	mov	r4, r0
 800348a:	b9b3      	cbnz	r3, 80034ba <srand+0x3a>
 800348c:	2018      	movs	r0, #24
 800348e:	f001 fe05 	bl	800509c <malloc>
 8003492:	4602      	mov	r2, r0
 8003494:	6328      	str	r0, [r5, #48]	@ 0x30
 8003496:	b920      	cbnz	r0, 80034a2 <srand+0x22>
 8003498:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <srand+0x48>)
 800349a:	480c      	ldr	r0, [pc, #48]	@ (80034cc <srand+0x4c>)
 800349c:	2146      	movs	r1, #70	@ 0x46
 800349e:	f000 ff3b 	bl	8004318 <__assert_func>
 80034a2:	490b      	ldr	r1, [pc, #44]	@ (80034d0 <srand+0x50>)
 80034a4:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <srand+0x54>)
 80034a6:	e9c0 1300 	strd	r1, r3, [r0]
 80034aa:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <srand+0x58>)
 80034ac:	6083      	str	r3, [r0, #8]
 80034ae:	230b      	movs	r3, #11
 80034b0:	8183      	strh	r3, [r0, #12]
 80034b2:	2100      	movs	r1, #0
 80034b4:	2001      	movs	r0, #1
 80034b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80034ba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80034bc:	2200      	movs	r2, #0
 80034be:	611c      	str	r4, [r3, #16]
 80034c0:	615a      	str	r2, [r3, #20]
 80034c2:	bd38      	pop	{r3, r4, r5, pc}
 80034c4:	20000018 	.word	0x20000018
 80034c8:	080061c4 	.word	0x080061c4
 80034cc:	080061db 	.word	0x080061db
 80034d0:	abcd330e 	.word	0xabcd330e
 80034d4:	e66d1234 	.word	0xe66d1234
 80034d8:	0005deec 	.word	0x0005deec

080034dc <rand>:
 80034dc:	4b16      	ldr	r3, [pc, #88]	@ (8003538 <rand+0x5c>)
 80034de:	b510      	push	{r4, lr}
 80034e0:	681c      	ldr	r4, [r3, #0]
 80034e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80034e4:	b9b3      	cbnz	r3, 8003514 <rand+0x38>
 80034e6:	2018      	movs	r0, #24
 80034e8:	f001 fdd8 	bl	800509c <malloc>
 80034ec:	4602      	mov	r2, r0
 80034ee:	6320      	str	r0, [r4, #48]	@ 0x30
 80034f0:	b920      	cbnz	r0, 80034fc <rand+0x20>
 80034f2:	4b12      	ldr	r3, [pc, #72]	@ (800353c <rand+0x60>)
 80034f4:	4812      	ldr	r0, [pc, #72]	@ (8003540 <rand+0x64>)
 80034f6:	2152      	movs	r1, #82	@ 0x52
 80034f8:	f000 ff0e 	bl	8004318 <__assert_func>
 80034fc:	4911      	ldr	r1, [pc, #68]	@ (8003544 <rand+0x68>)
 80034fe:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <rand+0x6c>)
 8003500:	e9c0 1300 	strd	r1, r3, [r0]
 8003504:	4b11      	ldr	r3, [pc, #68]	@ (800354c <rand+0x70>)
 8003506:	6083      	str	r3, [r0, #8]
 8003508:	230b      	movs	r3, #11
 800350a:	8183      	strh	r3, [r0, #12]
 800350c:	2100      	movs	r1, #0
 800350e:	2001      	movs	r0, #1
 8003510:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003514:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003516:	480e      	ldr	r0, [pc, #56]	@ (8003550 <rand+0x74>)
 8003518:	690b      	ldr	r3, [r1, #16]
 800351a:	694c      	ldr	r4, [r1, #20]
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <rand+0x78>)
 800351e:	4358      	muls	r0, r3
 8003520:	fb02 0004 	mla	r0, r2, r4, r0
 8003524:	fba3 3202 	umull	r3, r2, r3, r2
 8003528:	3301      	adds	r3, #1
 800352a:	eb40 0002 	adc.w	r0, r0, r2
 800352e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003532:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003536:	bd10      	pop	{r4, pc}
 8003538:	20000018 	.word	0x20000018
 800353c:	080061c4 	.word	0x080061c4
 8003540:	080061db 	.word	0x080061db
 8003544:	abcd330e 	.word	0xabcd330e
 8003548:	e66d1234 	.word	0xe66d1234
 800354c:	0005deec 	.word	0x0005deec
 8003550:	5851f42d 	.word	0x5851f42d
 8003554:	4c957f2d 	.word	0x4c957f2d

08003558 <__cvt>:
 8003558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	ec57 6b10 	vmov	r6, r7, d0
 8003560:	2f00      	cmp	r7, #0
 8003562:	460c      	mov	r4, r1
 8003564:	4619      	mov	r1, r3
 8003566:	463b      	mov	r3, r7
 8003568:	bfbb      	ittet	lt
 800356a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800356e:	461f      	movlt	r7, r3
 8003570:	2300      	movge	r3, #0
 8003572:	232d      	movlt	r3, #45	@ 0x2d
 8003574:	700b      	strb	r3, [r1, #0]
 8003576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003578:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800357c:	4691      	mov	r9, r2
 800357e:	f023 0820 	bic.w	r8, r3, #32
 8003582:	bfbc      	itt	lt
 8003584:	4632      	movlt	r2, r6
 8003586:	4616      	movlt	r6, r2
 8003588:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800358c:	d005      	beq.n	800359a <__cvt+0x42>
 800358e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003592:	d100      	bne.n	8003596 <__cvt+0x3e>
 8003594:	3401      	adds	r4, #1
 8003596:	2102      	movs	r1, #2
 8003598:	e000      	b.n	800359c <__cvt+0x44>
 800359a:	2103      	movs	r1, #3
 800359c:	ab03      	add	r3, sp, #12
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	ab02      	add	r3, sp, #8
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	ec47 6b10 	vmov	d0, r6, r7
 80035a8:	4653      	mov	r3, sl
 80035aa:	4622      	mov	r2, r4
 80035ac:	f000 ff5c 	bl	8004468 <_dtoa_r>
 80035b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80035b4:	4605      	mov	r5, r0
 80035b6:	d119      	bne.n	80035ec <__cvt+0x94>
 80035b8:	f019 0f01 	tst.w	r9, #1
 80035bc:	d00e      	beq.n	80035dc <__cvt+0x84>
 80035be:	eb00 0904 	add.w	r9, r0, r4
 80035c2:	2200      	movs	r2, #0
 80035c4:	2300      	movs	r3, #0
 80035c6:	4630      	mov	r0, r6
 80035c8:	4639      	mov	r1, r7
 80035ca:	f7fd fa8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80035ce:	b108      	cbz	r0, 80035d4 <__cvt+0x7c>
 80035d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80035d4:	2230      	movs	r2, #48	@ 0x30
 80035d6:	9b03      	ldr	r3, [sp, #12]
 80035d8:	454b      	cmp	r3, r9
 80035da:	d31e      	bcc.n	800361a <__cvt+0xc2>
 80035dc:	9b03      	ldr	r3, [sp, #12]
 80035de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80035e0:	1b5b      	subs	r3, r3, r5
 80035e2:	4628      	mov	r0, r5
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	b004      	add	sp, #16
 80035e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80035f0:	eb00 0904 	add.w	r9, r0, r4
 80035f4:	d1e5      	bne.n	80035c2 <__cvt+0x6a>
 80035f6:	7803      	ldrb	r3, [r0, #0]
 80035f8:	2b30      	cmp	r3, #48	@ 0x30
 80035fa:	d10a      	bne.n	8003612 <__cvt+0xba>
 80035fc:	2200      	movs	r2, #0
 80035fe:	2300      	movs	r3, #0
 8003600:	4630      	mov	r0, r6
 8003602:	4639      	mov	r1, r7
 8003604:	f7fd fa70 	bl	8000ae8 <__aeabi_dcmpeq>
 8003608:	b918      	cbnz	r0, 8003612 <__cvt+0xba>
 800360a:	f1c4 0401 	rsb	r4, r4, #1
 800360e:	f8ca 4000 	str.w	r4, [sl]
 8003612:	f8da 3000 	ldr.w	r3, [sl]
 8003616:	4499      	add	r9, r3
 8003618:	e7d3      	b.n	80035c2 <__cvt+0x6a>
 800361a:	1c59      	adds	r1, r3, #1
 800361c:	9103      	str	r1, [sp, #12]
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	e7d9      	b.n	80035d6 <__cvt+0x7e>

08003622 <__exponent>:
 8003622:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003624:	2900      	cmp	r1, #0
 8003626:	bfba      	itte	lt
 8003628:	4249      	neglt	r1, r1
 800362a:	232d      	movlt	r3, #45	@ 0x2d
 800362c:	232b      	movge	r3, #43	@ 0x2b
 800362e:	2909      	cmp	r1, #9
 8003630:	7002      	strb	r2, [r0, #0]
 8003632:	7043      	strb	r3, [r0, #1]
 8003634:	dd29      	ble.n	800368a <__exponent+0x68>
 8003636:	f10d 0307 	add.w	r3, sp, #7
 800363a:	461d      	mov	r5, r3
 800363c:	270a      	movs	r7, #10
 800363e:	461a      	mov	r2, r3
 8003640:	fbb1 f6f7 	udiv	r6, r1, r7
 8003644:	fb07 1416 	mls	r4, r7, r6, r1
 8003648:	3430      	adds	r4, #48	@ 0x30
 800364a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800364e:	460c      	mov	r4, r1
 8003650:	2c63      	cmp	r4, #99	@ 0x63
 8003652:	f103 33ff 	add.w	r3, r3, #4294967295
 8003656:	4631      	mov	r1, r6
 8003658:	dcf1      	bgt.n	800363e <__exponent+0x1c>
 800365a:	3130      	adds	r1, #48	@ 0x30
 800365c:	1e94      	subs	r4, r2, #2
 800365e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003662:	1c41      	adds	r1, r0, #1
 8003664:	4623      	mov	r3, r4
 8003666:	42ab      	cmp	r3, r5
 8003668:	d30a      	bcc.n	8003680 <__exponent+0x5e>
 800366a:	f10d 0309 	add.w	r3, sp, #9
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	42ac      	cmp	r4, r5
 8003672:	bf88      	it	hi
 8003674:	2300      	movhi	r3, #0
 8003676:	3302      	adds	r3, #2
 8003678:	4403      	add	r3, r0
 800367a:	1a18      	subs	r0, r3, r0
 800367c:	b003      	add	sp, #12
 800367e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003680:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003684:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003688:	e7ed      	b.n	8003666 <__exponent+0x44>
 800368a:	2330      	movs	r3, #48	@ 0x30
 800368c:	3130      	adds	r1, #48	@ 0x30
 800368e:	7083      	strb	r3, [r0, #2]
 8003690:	70c1      	strb	r1, [r0, #3]
 8003692:	1d03      	adds	r3, r0, #4
 8003694:	e7f1      	b.n	800367a <__exponent+0x58>
	...

08003698 <_printf_float>:
 8003698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800369c:	b08d      	sub	sp, #52	@ 0x34
 800369e:	460c      	mov	r4, r1
 80036a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80036a4:	4616      	mov	r6, r2
 80036a6:	461f      	mov	r7, r3
 80036a8:	4605      	mov	r5, r0
 80036aa:	f000 fdbd 	bl	8004228 <_localeconv_r>
 80036ae:	6803      	ldr	r3, [r0, #0]
 80036b0:	9304      	str	r3, [sp, #16]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fc fdec 	bl	8000290 <strlen>
 80036b8:	2300      	movs	r3, #0
 80036ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80036bc:	f8d8 3000 	ldr.w	r3, [r8]
 80036c0:	9005      	str	r0, [sp, #20]
 80036c2:	3307      	adds	r3, #7
 80036c4:	f023 0307 	bic.w	r3, r3, #7
 80036c8:	f103 0208 	add.w	r2, r3, #8
 80036cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80036d0:	f8d4 b000 	ldr.w	fp, [r4]
 80036d4:	f8c8 2000 	str.w	r2, [r8]
 80036d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80036e0:	9307      	str	r3, [sp, #28]
 80036e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80036e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80036ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036ee:	4b9c      	ldr	r3, [pc, #624]	@ (8003960 <_printf_float+0x2c8>)
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295
 80036f4:	f7fd fa2a 	bl	8000b4c <__aeabi_dcmpun>
 80036f8:	bb70      	cbnz	r0, 8003758 <_printf_float+0xc0>
 80036fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036fe:	4b98      	ldr	r3, [pc, #608]	@ (8003960 <_printf_float+0x2c8>)
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	f7fd fa04 	bl	8000b10 <__aeabi_dcmple>
 8003708:	bb30      	cbnz	r0, 8003758 <_printf_float+0xc0>
 800370a:	2200      	movs	r2, #0
 800370c:	2300      	movs	r3, #0
 800370e:	4640      	mov	r0, r8
 8003710:	4649      	mov	r1, r9
 8003712:	f7fd f9f3 	bl	8000afc <__aeabi_dcmplt>
 8003716:	b110      	cbz	r0, 800371e <_printf_float+0x86>
 8003718:	232d      	movs	r3, #45	@ 0x2d
 800371a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800371e:	4a91      	ldr	r2, [pc, #580]	@ (8003964 <_printf_float+0x2cc>)
 8003720:	4b91      	ldr	r3, [pc, #580]	@ (8003968 <_printf_float+0x2d0>)
 8003722:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003726:	bf8c      	ite	hi
 8003728:	4690      	movhi	r8, r2
 800372a:	4698      	movls	r8, r3
 800372c:	2303      	movs	r3, #3
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	f02b 0304 	bic.w	r3, fp, #4
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	f04f 0900 	mov.w	r9, #0
 800373a:	9700      	str	r7, [sp, #0]
 800373c:	4633      	mov	r3, r6
 800373e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003740:	4621      	mov	r1, r4
 8003742:	4628      	mov	r0, r5
 8003744:	f000 f9d2 	bl	8003aec <_printf_common>
 8003748:	3001      	adds	r0, #1
 800374a:	f040 808d 	bne.w	8003868 <_printf_float+0x1d0>
 800374e:	f04f 30ff 	mov.w	r0, #4294967295
 8003752:	b00d      	add	sp, #52	@ 0x34
 8003754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003758:	4642      	mov	r2, r8
 800375a:	464b      	mov	r3, r9
 800375c:	4640      	mov	r0, r8
 800375e:	4649      	mov	r1, r9
 8003760:	f7fd f9f4 	bl	8000b4c <__aeabi_dcmpun>
 8003764:	b140      	cbz	r0, 8003778 <_printf_float+0xe0>
 8003766:	464b      	mov	r3, r9
 8003768:	2b00      	cmp	r3, #0
 800376a:	bfbc      	itt	lt
 800376c:	232d      	movlt	r3, #45	@ 0x2d
 800376e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003772:	4a7e      	ldr	r2, [pc, #504]	@ (800396c <_printf_float+0x2d4>)
 8003774:	4b7e      	ldr	r3, [pc, #504]	@ (8003970 <_printf_float+0x2d8>)
 8003776:	e7d4      	b.n	8003722 <_printf_float+0x8a>
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800377e:	9206      	str	r2, [sp, #24]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	d13b      	bne.n	80037fc <_printf_float+0x164>
 8003784:	2306      	movs	r3, #6
 8003786:	6063      	str	r3, [r4, #4]
 8003788:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800378c:	2300      	movs	r3, #0
 800378e:	6022      	str	r2, [r4, #0]
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	ab0a      	add	r3, sp, #40	@ 0x28
 8003794:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003798:	ab09      	add	r3, sp, #36	@ 0x24
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	6861      	ldr	r1, [r4, #4]
 800379e:	ec49 8b10 	vmov	d0, r8, r9
 80037a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80037a6:	4628      	mov	r0, r5
 80037a8:	f7ff fed6 	bl	8003558 <__cvt>
 80037ac:	9b06      	ldr	r3, [sp, #24]
 80037ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80037b0:	2b47      	cmp	r3, #71	@ 0x47
 80037b2:	4680      	mov	r8, r0
 80037b4:	d129      	bne.n	800380a <_printf_float+0x172>
 80037b6:	1cc8      	adds	r0, r1, #3
 80037b8:	db02      	blt.n	80037c0 <_printf_float+0x128>
 80037ba:	6863      	ldr	r3, [r4, #4]
 80037bc:	4299      	cmp	r1, r3
 80037be:	dd41      	ble.n	8003844 <_printf_float+0x1ac>
 80037c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80037c4:	fa5f fa8a 	uxtb.w	sl, sl
 80037c8:	3901      	subs	r1, #1
 80037ca:	4652      	mov	r2, sl
 80037cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80037d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80037d2:	f7ff ff26 	bl	8003622 <__exponent>
 80037d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80037d8:	1813      	adds	r3, r2, r0
 80037da:	2a01      	cmp	r2, #1
 80037dc:	4681      	mov	r9, r0
 80037de:	6123      	str	r3, [r4, #16]
 80037e0:	dc02      	bgt.n	80037e8 <_printf_float+0x150>
 80037e2:	6822      	ldr	r2, [r4, #0]
 80037e4:	07d2      	lsls	r2, r2, #31
 80037e6:	d501      	bpl.n	80037ec <_printf_float+0x154>
 80037e8:	3301      	adds	r3, #1
 80037ea:	6123      	str	r3, [r4, #16]
 80037ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0a2      	beq.n	800373a <_printf_float+0xa2>
 80037f4:	232d      	movs	r3, #45	@ 0x2d
 80037f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037fa:	e79e      	b.n	800373a <_printf_float+0xa2>
 80037fc:	9a06      	ldr	r2, [sp, #24]
 80037fe:	2a47      	cmp	r2, #71	@ 0x47
 8003800:	d1c2      	bne.n	8003788 <_printf_float+0xf0>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1c0      	bne.n	8003788 <_printf_float+0xf0>
 8003806:	2301      	movs	r3, #1
 8003808:	e7bd      	b.n	8003786 <_printf_float+0xee>
 800380a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800380e:	d9db      	bls.n	80037c8 <_printf_float+0x130>
 8003810:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003814:	d118      	bne.n	8003848 <_printf_float+0x1b0>
 8003816:	2900      	cmp	r1, #0
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	dd0b      	ble.n	8003834 <_printf_float+0x19c>
 800381c:	6121      	str	r1, [r4, #16]
 800381e:	b913      	cbnz	r3, 8003826 <_printf_float+0x18e>
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	07d0      	lsls	r0, r2, #31
 8003824:	d502      	bpl.n	800382c <_printf_float+0x194>
 8003826:	3301      	adds	r3, #1
 8003828:	440b      	add	r3, r1
 800382a:	6123      	str	r3, [r4, #16]
 800382c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800382e:	f04f 0900 	mov.w	r9, #0
 8003832:	e7db      	b.n	80037ec <_printf_float+0x154>
 8003834:	b913      	cbnz	r3, 800383c <_printf_float+0x1a4>
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	07d2      	lsls	r2, r2, #31
 800383a:	d501      	bpl.n	8003840 <_printf_float+0x1a8>
 800383c:	3302      	adds	r3, #2
 800383e:	e7f4      	b.n	800382a <_printf_float+0x192>
 8003840:	2301      	movs	r3, #1
 8003842:	e7f2      	b.n	800382a <_printf_float+0x192>
 8003844:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800384a:	4299      	cmp	r1, r3
 800384c:	db05      	blt.n	800385a <_printf_float+0x1c2>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	6121      	str	r1, [r4, #16]
 8003852:	07d8      	lsls	r0, r3, #31
 8003854:	d5ea      	bpl.n	800382c <_printf_float+0x194>
 8003856:	1c4b      	adds	r3, r1, #1
 8003858:	e7e7      	b.n	800382a <_printf_float+0x192>
 800385a:	2900      	cmp	r1, #0
 800385c:	bfd4      	ite	le
 800385e:	f1c1 0202 	rsble	r2, r1, #2
 8003862:	2201      	movgt	r2, #1
 8003864:	4413      	add	r3, r2
 8003866:	e7e0      	b.n	800382a <_printf_float+0x192>
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	055a      	lsls	r2, r3, #21
 800386c:	d407      	bmi.n	800387e <_printf_float+0x1e6>
 800386e:	6923      	ldr	r3, [r4, #16]
 8003870:	4642      	mov	r2, r8
 8003872:	4631      	mov	r1, r6
 8003874:	4628      	mov	r0, r5
 8003876:	47b8      	blx	r7
 8003878:	3001      	adds	r0, #1
 800387a:	d12b      	bne.n	80038d4 <_printf_float+0x23c>
 800387c:	e767      	b.n	800374e <_printf_float+0xb6>
 800387e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003882:	f240 80dd 	bls.w	8003a40 <_printf_float+0x3a8>
 8003886:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800388a:	2200      	movs	r2, #0
 800388c:	2300      	movs	r3, #0
 800388e:	f7fd f92b 	bl	8000ae8 <__aeabi_dcmpeq>
 8003892:	2800      	cmp	r0, #0
 8003894:	d033      	beq.n	80038fe <_printf_float+0x266>
 8003896:	4a37      	ldr	r2, [pc, #220]	@ (8003974 <_printf_float+0x2dc>)
 8003898:	2301      	movs	r3, #1
 800389a:	4631      	mov	r1, r6
 800389c:	4628      	mov	r0, r5
 800389e:	47b8      	blx	r7
 80038a0:	3001      	adds	r0, #1
 80038a2:	f43f af54 	beq.w	800374e <_printf_float+0xb6>
 80038a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80038aa:	4543      	cmp	r3, r8
 80038ac:	db02      	blt.n	80038b4 <_printf_float+0x21c>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	07d8      	lsls	r0, r3, #31
 80038b2:	d50f      	bpl.n	80038d4 <_printf_float+0x23c>
 80038b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038b8:	4631      	mov	r1, r6
 80038ba:	4628      	mov	r0, r5
 80038bc:	47b8      	blx	r7
 80038be:	3001      	adds	r0, #1
 80038c0:	f43f af45 	beq.w	800374e <_printf_float+0xb6>
 80038c4:	f04f 0900 	mov.w	r9, #0
 80038c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80038cc:	f104 0a1a 	add.w	sl, r4, #26
 80038d0:	45c8      	cmp	r8, r9
 80038d2:	dc09      	bgt.n	80038e8 <_printf_float+0x250>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	079b      	lsls	r3, r3, #30
 80038d8:	f100 8103 	bmi.w	8003ae2 <_printf_float+0x44a>
 80038dc:	68e0      	ldr	r0, [r4, #12]
 80038de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80038e0:	4298      	cmp	r0, r3
 80038e2:	bfb8      	it	lt
 80038e4:	4618      	movlt	r0, r3
 80038e6:	e734      	b.n	8003752 <_printf_float+0xba>
 80038e8:	2301      	movs	r3, #1
 80038ea:	4652      	mov	r2, sl
 80038ec:	4631      	mov	r1, r6
 80038ee:	4628      	mov	r0, r5
 80038f0:	47b8      	blx	r7
 80038f2:	3001      	adds	r0, #1
 80038f4:	f43f af2b 	beq.w	800374e <_printf_float+0xb6>
 80038f8:	f109 0901 	add.w	r9, r9, #1
 80038fc:	e7e8      	b.n	80038d0 <_printf_float+0x238>
 80038fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	dc39      	bgt.n	8003978 <_printf_float+0x2e0>
 8003904:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <_printf_float+0x2dc>)
 8003906:	2301      	movs	r3, #1
 8003908:	4631      	mov	r1, r6
 800390a:	4628      	mov	r0, r5
 800390c:	47b8      	blx	r7
 800390e:	3001      	adds	r0, #1
 8003910:	f43f af1d 	beq.w	800374e <_printf_float+0xb6>
 8003914:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003918:	ea59 0303 	orrs.w	r3, r9, r3
 800391c:	d102      	bne.n	8003924 <_printf_float+0x28c>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	07d9      	lsls	r1, r3, #31
 8003922:	d5d7      	bpl.n	80038d4 <_printf_float+0x23c>
 8003924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003928:	4631      	mov	r1, r6
 800392a:	4628      	mov	r0, r5
 800392c:	47b8      	blx	r7
 800392e:	3001      	adds	r0, #1
 8003930:	f43f af0d 	beq.w	800374e <_printf_float+0xb6>
 8003934:	f04f 0a00 	mov.w	sl, #0
 8003938:	f104 0b1a 	add.w	fp, r4, #26
 800393c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800393e:	425b      	negs	r3, r3
 8003940:	4553      	cmp	r3, sl
 8003942:	dc01      	bgt.n	8003948 <_printf_float+0x2b0>
 8003944:	464b      	mov	r3, r9
 8003946:	e793      	b.n	8003870 <_printf_float+0x1d8>
 8003948:	2301      	movs	r3, #1
 800394a:	465a      	mov	r2, fp
 800394c:	4631      	mov	r1, r6
 800394e:	4628      	mov	r0, r5
 8003950:	47b8      	blx	r7
 8003952:	3001      	adds	r0, #1
 8003954:	f43f aefb 	beq.w	800374e <_printf_float+0xb6>
 8003958:	f10a 0a01 	add.w	sl, sl, #1
 800395c:	e7ee      	b.n	800393c <_printf_float+0x2a4>
 800395e:	bf00      	nop
 8003960:	7fefffff 	.word	0x7fefffff
 8003964:	08006237 	.word	0x08006237
 8003968:	08006233 	.word	0x08006233
 800396c:	0800623f 	.word	0x0800623f
 8003970:	0800623b 	.word	0x0800623b
 8003974:	08006243 	.word	0x08006243
 8003978:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800397a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800397e:	4553      	cmp	r3, sl
 8003980:	bfa8      	it	ge
 8003982:	4653      	movge	r3, sl
 8003984:	2b00      	cmp	r3, #0
 8003986:	4699      	mov	r9, r3
 8003988:	dc36      	bgt.n	80039f8 <_printf_float+0x360>
 800398a:	f04f 0b00 	mov.w	fp, #0
 800398e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003992:	f104 021a 	add.w	r2, r4, #26
 8003996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003998:	9306      	str	r3, [sp, #24]
 800399a:	eba3 0309 	sub.w	r3, r3, r9
 800399e:	455b      	cmp	r3, fp
 80039a0:	dc31      	bgt.n	8003a06 <_printf_float+0x36e>
 80039a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039a4:	459a      	cmp	sl, r3
 80039a6:	dc3a      	bgt.n	8003a1e <_printf_float+0x386>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	07da      	lsls	r2, r3, #31
 80039ac:	d437      	bmi.n	8003a1e <_printf_float+0x386>
 80039ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039b0:	ebaa 0903 	sub.w	r9, sl, r3
 80039b4:	9b06      	ldr	r3, [sp, #24]
 80039b6:	ebaa 0303 	sub.w	r3, sl, r3
 80039ba:	4599      	cmp	r9, r3
 80039bc:	bfa8      	it	ge
 80039be:	4699      	movge	r9, r3
 80039c0:	f1b9 0f00 	cmp.w	r9, #0
 80039c4:	dc33      	bgt.n	8003a2e <_printf_float+0x396>
 80039c6:	f04f 0800 	mov.w	r8, #0
 80039ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039ce:	f104 0b1a 	add.w	fp, r4, #26
 80039d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039d4:	ebaa 0303 	sub.w	r3, sl, r3
 80039d8:	eba3 0309 	sub.w	r3, r3, r9
 80039dc:	4543      	cmp	r3, r8
 80039de:	f77f af79 	ble.w	80038d4 <_printf_float+0x23c>
 80039e2:	2301      	movs	r3, #1
 80039e4:	465a      	mov	r2, fp
 80039e6:	4631      	mov	r1, r6
 80039e8:	4628      	mov	r0, r5
 80039ea:	47b8      	blx	r7
 80039ec:	3001      	adds	r0, #1
 80039ee:	f43f aeae 	beq.w	800374e <_printf_float+0xb6>
 80039f2:	f108 0801 	add.w	r8, r8, #1
 80039f6:	e7ec      	b.n	80039d2 <_printf_float+0x33a>
 80039f8:	4642      	mov	r2, r8
 80039fa:	4631      	mov	r1, r6
 80039fc:	4628      	mov	r0, r5
 80039fe:	47b8      	blx	r7
 8003a00:	3001      	adds	r0, #1
 8003a02:	d1c2      	bne.n	800398a <_printf_float+0x2f2>
 8003a04:	e6a3      	b.n	800374e <_printf_float+0xb6>
 8003a06:	2301      	movs	r3, #1
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	9206      	str	r2, [sp, #24]
 8003a0e:	47b8      	blx	r7
 8003a10:	3001      	adds	r0, #1
 8003a12:	f43f ae9c 	beq.w	800374e <_printf_float+0xb6>
 8003a16:	9a06      	ldr	r2, [sp, #24]
 8003a18:	f10b 0b01 	add.w	fp, fp, #1
 8003a1c:	e7bb      	b.n	8003996 <_printf_float+0x2fe>
 8003a1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a22:	4631      	mov	r1, r6
 8003a24:	4628      	mov	r0, r5
 8003a26:	47b8      	blx	r7
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d1c0      	bne.n	80039ae <_printf_float+0x316>
 8003a2c:	e68f      	b.n	800374e <_printf_float+0xb6>
 8003a2e:	9a06      	ldr	r2, [sp, #24]
 8003a30:	464b      	mov	r3, r9
 8003a32:	4442      	add	r2, r8
 8003a34:	4631      	mov	r1, r6
 8003a36:	4628      	mov	r0, r5
 8003a38:	47b8      	blx	r7
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	d1c3      	bne.n	80039c6 <_printf_float+0x32e>
 8003a3e:	e686      	b.n	800374e <_printf_float+0xb6>
 8003a40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003a44:	f1ba 0f01 	cmp.w	sl, #1
 8003a48:	dc01      	bgt.n	8003a4e <_printf_float+0x3b6>
 8003a4a:	07db      	lsls	r3, r3, #31
 8003a4c:	d536      	bpl.n	8003abc <_printf_float+0x424>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4642      	mov	r2, r8
 8003a52:	4631      	mov	r1, r6
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b8      	blx	r7
 8003a58:	3001      	adds	r0, #1
 8003a5a:	f43f ae78 	beq.w	800374e <_printf_float+0xb6>
 8003a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a62:	4631      	mov	r1, r6
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b8      	blx	r7
 8003a68:	3001      	adds	r0, #1
 8003a6a:	f43f ae70 	beq.w	800374e <_printf_float+0xb6>
 8003a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003a72:	2200      	movs	r2, #0
 8003a74:	2300      	movs	r3, #0
 8003a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a7a:	f7fd f835 	bl	8000ae8 <__aeabi_dcmpeq>
 8003a7e:	b9c0      	cbnz	r0, 8003ab2 <_printf_float+0x41a>
 8003a80:	4653      	mov	r3, sl
 8003a82:	f108 0201 	add.w	r2, r8, #1
 8003a86:	4631      	mov	r1, r6
 8003a88:	4628      	mov	r0, r5
 8003a8a:	47b8      	blx	r7
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	d10c      	bne.n	8003aaa <_printf_float+0x412>
 8003a90:	e65d      	b.n	800374e <_printf_float+0xb6>
 8003a92:	2301      	movs	r3, #1
 8003a94:	465a      	mov	r2, fp
 8003a96:	4631      	mov	r1, r6
 8003a98:	4628      	mov	r0, r5
 8003a9a:	47b8      	blx	r7
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	f43f ae56 	beq.w	800374e <_printf_float+0xb6>
 8003aa2:	f108 0801 	add.w	r8, r8, #1
 8003aa6:	45d0      	cmp	r8, sl
 8003aa8:	dbf3      	blt.n	8003a92 <_printf_float+0x3fa>
 8003aaa:	464b      	mov	r3, r9
 8003aac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ab0:	e6df      	b.n	8003872 <_printf_float+0x1da>
 8003ab2:	f04f 0800 	mov.w	r8, #0
 8003ab6:	f104 0b1a 	add.w	fp, r4, #26
 8003aba:	e7f4      	b.n	8003aa6 <_printf_float+0x40e>
 8003abc:	2301      	movs	r3, #1
 8003abe:	4642      	mov	r2, r8
 8003ac0:	e7e1      	b.n	8003a86 <_printf_float+0x3ee>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	464a      	mov	r2, r9
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	4628      	mov	r0, r5
 8003aca:	47b8      	blx	r7
 8003acc:	3001      	adds	r0, #1
 8003ace:	f43f ae3e 	beq.w	800374e <_printf_float+0xb6>
 8003ad2:	f108 0801 	add.w	r8, r8, #1
 8003ad6:	68e3      	ldr	r3, [r4, #12]
 8003ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003ada:	1a5b      	subs	r3, r3, r1
 8003adc:	4543      	cmp	r3, r8
 8003ade:	dcf0      	bgt.n	8003ac2 <_printf_float+0x42a>
 8003ae0:	e6fc      	b.n	80038dc <_printf_float+0x244>
 8003ae2:	f04f 0800 	mov.w	r8, #0
 8003ae6:	f104 0919 	add.w	r9, r4, #25
 8003aea:	e7f4      	b.n	8003ad6 <_printf_float+0x43e>

08003aec <_printf_common>:
 8003aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	4616      	mov	r6, r2
 8003af2:	4698      	mov	r8, r3
 8003af4:	688a      	ldr	r2, [r1, #8]
 8003af6:	690b      	ldr	r3, [r1, #16]
 8003af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bfb8      	it	lt
 8003b00:	4613      	movlt	r3, r2
 8003b02:	6033      	str	r3, [r6, #0]
 8003b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b08:	4607      	mov	r7, r0
 8003b0a:	460c      	mov	r4, r1
 8003b0c:	b10a      	cbz	r2, 8003b12 <_printf_common+0x26>
 8003b0e:	3301      	adds	r3, #1
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	0699      	lsls	r1, r3, #26
 8003b16:	bf42      	ittt	mi
 8003b18:	6833      	ldrmi	r3, [r6, #0]
 8003b1a:	3302      	addmi	r3, #2
 8003b1c:	6033      	strmi	r3, [r6, #0]
 8003b1e:	6825      	ldr	r5, [r4, #0]
 8003b20:	f015 0506 	ands.w	r5, r5, #6
 8003b24:	d106      	bne.n	8003b34 <_printf_common+0x48>
 8003b26:	f104 0a19 	add.w	sl, r4, #25
 8003b2a:	68e3      	ldr	r3, [r4, #12]
 8003b2c:	6832      	ldr	r2, [r6, #0]
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	42ab      	cmp	r3, r5
 8003b32:	dc26      	bgt.n	8003b82 <_printf_common+0x96>
 8003b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b38:	6822      	ldr	r2, [r4, #0]
 8003b3a:	3b00      	subs	r3, #0
 8003b3c:	bf18      	it	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	0692      	lsls	r2, r2, #26
 8003b42:	d42b      	bmi.n	8003b9c <_printf_common+0xb0>
 8003b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b48:	4641      	mov	r1, r8
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c8      	blx	r9
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d01e      	beq.n	8003b90 <_printf_common+0xa4>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	6922      	ldr	r2, [r4, #16]
 8003b56:	f003 0306 	and.w	r3, r3, #6
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	bf02      	ittt	eq
 8003b5e:	68e5      	ldreq	r5, [r4, #12]
 8003b60:	6833      	ldreq	r3, [r6, #0]
 8003b62:	1aed      	subeq	r5, r5, r3
 8003b64:	68a3      	ldr	r3, [r4, #8]
 8003b66:	bf0c      	ite	eq
 8003b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b6c:	2500      	movne	r5, #0
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	bfc4      	itt	gt
 8003b72:	1a9b      	subgt	r3, r3, r2
 8003b74:	18ed      	addgt	r5, r5, r3
 8003b76:	2600      	movs	r6, #0
 8003b78:	341a      	adds	r4, #26
 8003b7a:	42b5      	cmp	r5, r6
 8003b7c:	d11a      	bne.n	8003bb4 <_printf_common+0xc8>
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e008      	b.n	8003b94 <_printf_common+0xa8>
 8003b82:	2301      	movs	r3, #1
 8003b84:	4652      	mov	r2, sl
 8003b86:	4641      	mov	r1, r8
 8003b88:	4638      	mov	r0, r7
 8003b8a:	47c8      	blx	r9
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d103      	bne.n	8003b98 <_printf_common+0xac>
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b98:	3501      	adds	r5, #1
 8003b9a:	e7c6      	b.n	8003b2a <_printf_common+0x3e>
 8003b9c:	18e1      	adds	r1, r4, r3
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	2030      	movs	r0, #48	@ 0x30
 8003ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ba6:	4422      	add	r2, r4
 8003ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	e7c7      	b.n	8003b44 <_printf_common+0x58>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	4641      	mov	r1, r8
 8003bba:	4638      	mov	r0, r7
 8003bbc:	47c8      	blx	r9
 8003bbe:	3001      	adds	r0, #1
 8003bc0:	d0e6      	beq.n	8003b90 <_printf_common+0xa4>
 8003bc2:	3601      	adds	r6, #1
 8003bc4:	e7d9      	b.n	8003b7a <_printf_common+0x8e>
	...

08003bc8 <_printf_i>:
 8003bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bcc:	7e0f      	ldrb	r7, [r1, #24]
 8003bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bd0:	2f78      	cmp	r7, #120	@ 0x78
 8003bd2:	4691      	mov	r9, r2
 8003bd4:	4680      	mov	r8, r0
 8003bd6:	460c      	mov	r4, r1
 8003bd8:	469a      	mov	sl, r3
 8003bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bde:	d807      	bhi.n	8003bf0 <_printf_i+0x28>
 8003be0:	2f62      	cmp	r7, #98	@ 0x62
 8003be2:	d80a      	bhi.n	8003bfa <_printf_i+0x32>
 8003be4:	2f00      	cmp	r7, #0
 8003be6:	f000 80d1 	beq.w	8003d8c <_printf_i+0x1c4>
 8003bea:	2f58      	cmp	r7, #88	@ 0x58
 8003bec:	f000 80b8 	beq.w	8003d60 <_printf_i+0x198>
 8003bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bf8:	e03a      	b.n	8003c70 <_printf_i+0xa8>
 8003bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bfe:	2b15      	cmp	r3, #21
 8003c00:	d8f6      	bhi.n	8003bf0 <_printf_i+0x28>
 8003c02:	a101      	add	r1, pc, #4	@ (adr r1, 8003c08 <_printf_i+0x40>)
 8003c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c08:	08003c61 	.word	0x08003c61
 8003c0c:	08003c75 	.word	0x08003c75
 8003c10:	08003bf1 	.word	0x08003bf1
 8003c14:	08003bf1 	.word	0x08003bf1
 8003c18:	08003bf1 	.word	0x08003bf1
 8003c1c:	08003bf1 	.word	0x08003bf1
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003bf1 	.word	0x08003bf1
 8003c28:	08003bf1 	.word	0x08003bf1
 8003c2c:	08003bf1 	.word	0x08003bf1
 8003c30:	08003bf1 	.word	0x08003bf1
 8003c34:	08003d73 	.word	0x08003d73
 8003c38:	08003c9f 	.word	0x08003c9f
 8003c3c:	08003d2d 	.word	0x08003d2d
 8003c40:	08003bf1 	.word	0x08003bf1
 8003c44:	08003bf1 	.word	0x08003bf1
 8003c48:	08003d95 	.word	0x08003d95
 8003c4c:	08003bf1 	.word	0x08003bf1
 8003c50:	08003c9f 	.word	0x08003c9f
 8003c54:	08003bf1 	.word	0x08003bf1
 8003c58:	08003bf1 	.word	0x08003bf1
 8003c5c:	08003d35 	.word	0x08003d35
 8003c60:	6833      	ldr	r3, [r6, #0]
 8003c62:	1d1a      	adds	r2, r3, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6032      	str	r2, [r6, #0]
 8003c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c70:	2301      	movs	r3, #1
 8003c72:	e09c      	b.n	8003dae <_printf_i+0x1e6>
 8003c74:	6833      	ldr	r3, [r6, #0]
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	1d19      	adds	r1, r3, #4
 8003c7a:	6031      	str	r1, [r6, #0]
 8003c7c:	0606      	lsls	r6, r0, #24
 8003c7e:	d501      	bpl.n	8003c84 <_printf_i+0xbc>
 8003c80:	681d      	ldr	r5, [r3, #0]
 8003c82:	e003      	b.n	8003c8c <_printf_i+0xc4>
 8003c84:	0645      	lsls	r5, r0, #25
 8003c86:	d5fb      	bpl.n	8003c80 <_printf_i+0xb8>
 8003c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	da03      	bge.n	8003c98 <_printf_i+0xd0>
 8003c90:	232d      	movs	r3, #45	@ 0x2d
 8003c92:	426d      	negs	r5, r5
 8003c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c98:	4858      	ldr	r0, [pc, #352]	@ (8003dfc <_printf_i+0x234>)
 8003c9a:	230a      	movs	r3, #10
 8003c9c:	e011      	b.n	8003cc2 <_printf_i+0xfa>
 8003c9e:	6821      	ldr	r1, [r4, #0]
 8003ca0:	6833      	ldr	r3, [r6, #0]
 8003ca2:	0608      	lsls	r0, r1, #24
 8003ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ca8:	d402      	bmi.n	8003cb0 <_printf_i+0xe8>
 8003caa:	0649      	lsls	r1, r1, #25
 8003cac:	bf48      	it	mi
 8003cae:	b2ad      	uxthmi	r5, r5
 8003cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cb2:	4852      	ldr	r0, [pc, #328]	@ (8003dfc <_printf_i+0x234>)
 8003cb4:	6033      	str	r3, [r6, #0]
 8003cb6:	bf14      	ite	ne
 8003cb8:	230a      	movne	r3, #10
 8003cba:	2308      	moveq	r3, #8
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cc2:	6866      	ldr	r6, [r4, #4]
 8003cc4:	60a6      	str	r6, [r4, #8]
 8003cc6:	2e00      	cmp	r6, #0
 8003cc8:	db05      	blt.n	8003cd6 <_printf_i+0x10e>
 8003cca:	6821      	ldr	r1, [r4, #0]
 8003ccc:	432e      	orrs	r6, r5
 8003cce:	f021 0104 	bic.w	r1, r1, #4
 8003cd2:	6021      	str	r1, [r4, #0]
 8003cd4:	d04b      	beq.n	8003d6e <_printf_i+0x1a6>
 8003cd6:	4616      	mov	r6, r2
 8003cd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cdc:	fb03 5711 	mls	r7, r3, r1, r5
 8003ce0:	5dc7      	ldrb	r7, [r0, r7]
 8003ce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ce6:	462f      	mov	r7, r5
 8003ce8:	42bb      	cmp	r3, r7
 8003cea:	460d      	mov	r5, r1
 8003cec:	d9f4      	bls.n	8003cd8 <_printf_i+0x110>
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d10b      	bne.n	8003d0a <_printf_i+0x142>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	07df      	lsls	r7, r3, #31
 8003cf6:	d508      	bpl.n	8003d0a <_printf_i+0x142>
 8003cf8:	6923      	ldr	r3, [r4, #16]
 8003cfa:	6861      	ldr	r1, [r4, #4]
 8003cfc:	4299      	cmp	r1, r3
 8003cfe:	bfde      	ittt	le
 8003d00:	2330      	movle	r3, #48	@ 0x30
 8003d02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d0a:	1b92      	subs	r2, r2, r6
 8003d0c:	6122      	str	r2, [r4, #16]
 8003d0e:	f8cd a000 	str.w	sl, [sp]
 8003d12:	464b      	mov	r3, r9
 8003d14:	aa03      	add	r2, sp, #12
 8003d16:	4621      	mov	r1, r4
 8003d18:	4640      	mov	r0, r8
 8003d1a:	f7ff fee7 	bl	8003aec <_printf_common>
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d14a      	bne.n	8003db8 <_printf_i+0x1f0>
 8003d22:	f04f 30ff 	mov.w	r0, #4294967295
 8003d26:	b004      	add	sp, #16
 8003d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	f043 0320 	orr.w	r3, r3, #32
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	4832      	ldr	r0, [pc, #200]	@ (8003e00 <_printf_i+0x238>)
 8003d36:	2778      	movs	r7, #120	@ 0x78
 8003d38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	6831      	ldr	r1, [r6, #0]
 8003d40:	061f      	lsls	r7, r3, #24
 8003d42:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d46:	d402      	bmi.n	8003d4e <_printf_i+0x186>
 8003d48:	065f      	lsls	r7, r3, #25
 8003d4a:	bf48      	it	mi
 8003d4c:	b2ad      	uxthmi	r5, r5
 8003d4e:	6031      	str	r1, [r6, #0]
 8003d50:	07d9      	lsls	r1, r3, #31
 8003d52:	bf44      	itt	mi
 8003d54:	f043 0320 	orrmi.w	r3, r3, #32
 8003d58:	6023      	strmi	r3, [r4, #0]
 8003d5a:	b11d      	cbz	r5, 8003d64 <_printf_i+0x19c>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	e7ad      	b.n	8003cbc <_printf_i+0xf4>
 8003d60:	4826      	ldr	r0, [pc, #152]	@ (8003dfc <_printf_i+0x234>)
 8003d62:	e7e9      	b.n	8003d38 <_printf_i+0x170>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	f023 0320 	bic.w	r3, r3, #32
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	e7f6      	b.n	8003d5c <_printf_i+0x194>
 8003d6e:	4616      	mov	r6, r2
 8003d70:	e7bd      	b.n	8003cee <_printf_i+0x126>
 8003d72:	6833      	ldr	r3, [r6, #0]
 8003d74:	6825      	ldr	r5, [r4, #0]
 8003d76:	6961      	ldr	r1, [r4, #20]
 8003d78:	1d18      	adds	r0, r3, #4
 8003d7a:	6030      	str	r0, [r6, #0]
 8003d7c:	062e      	lsls	r6, r5, #24
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	d501      	bpl.n	8003d86 <_printf_i+0x1be>
 8003d82:	6019      	str	r1, [r3, #0]
 8003d84:	e002      	b.n	8003d8c <_printf_i+0x1c4>
 8003d86:	0668      	lsls	r0, r5, #25
 8003d88:	d5fb      	bpl.n	8003d82 <_printf_i+0x1ba>
 8003d8a:	8019      	strh	r1, [r3, #0]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	6123      	str	r3, [r4, #16]
 8003d90:	4616      	mov	r6, r2
 8003d92:	e7bc      	b.n	8003d0e <_printf_i+0x146>
 8003d94:	6833      	ldr	r3, [r6, #0]
 8003d96:	1d1a      	adds	r2, r3, #4
 8003d98:	6032      	str	r2, [r6, #0]
 8003d9a:	681e      	ldr	r6, [r3, #0]
 8003d9c:	6862      	ldr	r2, [r4, #4]
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4630      	mov	r0, r6
 8003da2:	f7fc fa25 	bl	80001f0 <memchr>
 8003da6:	b108      	cbz	r0, 8003dac <_printf_i+0x1e4>
 8003da8:	1b80      	subs	r0, r0, r6
 8003daa:	6060      	str	r0, [r4, #4]
 8003dac:	6863      	ldr	r3, [r4, #4]
 8003dae:	6123      	str	r3, [r4, #16]
 8003db0:	2300      	movs	r3, #0
 8003db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db6:	e7aa      	b.n	8003d0e <_printf_i+0x146>
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	4632      	mov	r2, r6
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	4640      	mov	r0, r8
 8003dc0:	47d0      	blx	sl
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d0ad      	beq.n	8003d22 <_printf_i+0x15a>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	079b      	lsls	r3, r3, #30
 8003dca:	d413      	bmi.n	8003df4 <_printf_i+0x22c>
 8003dcc:	68e0      	ldr	r0, [r4, #12]
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	4298      	cmp	r0, r3
 8003dd2:	bfb8      	it	lt
 8003dd4:	4618      	movlt	r0, r3
 8003dd6:	e7a6      	b.n	8003d26 <_printf_i+0x15e>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4649      	mov	r1, r9
 8003dde:	4640      	mov	r0, r8
 8003de0:	47d0      	blx	sl
 8003de2:	3001      	adds	r0, #1
 8003de4:	d09d      	beq.n	8003d22 <_printf_i+0x15a>
 8003de6:	3501      	adds	r5, #1
 8003de8:	68e3      	ldr	r3, [r4, #12]
 8003dea:	9903      	ldr	r1, [sp, #12]
 8003dec:	1a5b      	subs	r3, r3, r1
 8003dee:	42ab      	cmp	r3, r5
 8003df0:	dcf2      	bgt.n	8003dd8 <_printf_i+0x210>
 8003df2:	e7eb      	b.n	8003dcc <_printf_i+0x204>
 8003df4:	2500      	movs	r5, #0
 8003df6:	f104 0619 	add.w	r6, r4, #25
 8003dfa:	e7f5      	b.n	8003de8 <_printf_i+0x220>
 8003dfc:	08006245 	.word	0x08006245
 8003e00:	08006256 	.word	0x08006256

08003e04 <std>:
 8003e04:	2300      	movs	r3, #0
 8003e06:	b510      	push	{r4, lr}
 8003e08:	4604      	mov	r4, r0
 8003e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e12:	6083      	str	r3, [r0, #8]
 8003e14:	8181      	strh	r1, [r0, #12]
 8003e16:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e18:	81c2      	strh	r2, [r0, #14]
 8003e1a:	6183      	str	r3, [r0, #24]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	2208      	movs	r2, #8
 8003e20:	305c      	adds	r0, #92	@ 0x5c
 8003e22:	f000 f9f9 	bl	8004218 <memset>
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <std+0x58>)
 8003e28:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <std+0x5c>)
 8003e2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <std+0x60>)
 8003e30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <std+0x64>)
 8003e34:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e36:	4b0d      	ldr	r3, [pc, #52]	@ (8003e6c <std+0x68>)
 8003e38:	6224      	str	r4, [r4, #32]
 8003e3a:	429c      	cmp	r4, r3
 8003e3c:	d006      	beq.n	8003e4c <std+0x48>
 8003e3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e42:	4294      	cmp	r4, r2
 8003e44:	d002      	beq.n	8003e4c <std+0x48>
 8003e46:	33d0      	adds	r3, #208	@ 0xd0
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	d105      	bne.n	8003e58 <std+0x54>
 8003e4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e54:	f000 ba5c 	b.w	8004310 <__retarget_lock_init_recursive>
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08004069 	.word	0x08004069
 8003e60:	0800408b 	.word	0x0800408b
 8003e64:	080040c3 	.word	0x080040c3
 8003e68:	080040e7 	.word	0x080040e7
 8003e6c:	200040c8 	.word	0x200040c8

08003e70 <stdio_exit_handler>:
 8003e70:	4a02      	ldr	r2, [pc, #8]	@ (8003e7c <stdio_exit_handler+0xc>)
 8003e72:	4903      	ldr	r1, [pc, #12]	@ (8003e80 <stdio_exit_handler+0x10>)
 8003e74:	4803      	ldr	r0, [pc, #12]	@ (8003e84 <stdio_exit_handler+0x14>)
 8003e76:	f000 b869 	b.w	8003f4c <_fwalk_sglue>
 8003e7a:	bf00      	nop
 8003e7c:	2000000c 	.word	0x2000000c
 8003e80:	08005c89 	.word	0x08005c89
 8003e84:	2000001c 	.word	0x2000001c

08003e88 <cleanup_stdio>:
 8003e88:	6841      	ldr	r1, [r0, #4]
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <cleanup_stdio+0x34>)
 8003e8c:	4299      	cmp	r1, r3
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	4604      	mov	r4, r0
 8003e92:	d001      	beq.n	8003e98 <cleanup_stdio+0x10>
 8003e94:	f001 fef8 	bl	8005c88 <_fflush_r>
 8003e98:	68a1      	ldr	r1, [r4, #8]
 8003e9a:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <cleanup_stdio+0x38>)
 8003e9c:	4299      	cmp	r1, r3
 8003e9e:	d002      	beq.n	8003ea6 <cleanup_stdio+0x1e>
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f001 fef1 	bl	8005c88 <_fflush_r>
 8003ea6:	68e1      	ldr	r1, [r4, #12]
 8003ea8:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <cleanup_stdio+0x3c>)
 8003eaa:	4299      	cmp	r1, r3
 8003eac:	d004      	beq.n	8003eb8 <cleanup_stdio+0x30>
 8003eae:	4620      	mov	r0, r4
 8003eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb4:	f001 bee8 	b.w	8005c88 <_fflush_r>
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	bf00      	nop
 8003ebc:	200040c8 	.word	0x200040c8
 8003ec0:	20004130 	.word	0x20004130
 8003ec4:	20004198 	.word	0x20004198

08003ec8 <global_stdio_init.part.0>:
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <global_stdio_init.part.0+0x30>)
 8003ecc:	4c0b      	ldr	r4, [pc, #44]	@ (8003efc <global_stdio_init.part.0+0x34>)
 8003ece:	4a0c      	ldr	r2, [pc, #48]	@ (8003f00 <global_stdio_init.part.0+0x38>)
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	f7ff ff94 	bl	8003e04 <std>
 8003edc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	2109      	movs	r1, #9
 8003ee4:	f7ff ff8e 	bl	8003e04 <std>
 8003ee8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003eec:	2202      	movs	r2, #2
 8003eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef2:	2112      	movs	r1, #18
 8003ef4:	f7ff bf86 	b.w	8003e04 <std>
 8003ef8:	20004200 	.word	0x20004200
 8003efc:	200040c8 	.word	0x200040c8
 8003f00:	08003e71 	.word	0x08003e71

08003f04 <__sfp_lock_acquire>:
 8003f04:	4801      	ldr	r0, [pc, #4]	@ (8003f0c <__sfp_lock_acquire+0x8>)
 8003f06:	f000 ba04 	b.w	8004312 <__retarget_lock_acquire_recursive>
 8003f0a:	bf00      	nop
 8003f0c:	20004209 	.word	0x20004209

08003f10 <__sfp_lock_release>:
 8003f10:	4801      	ldr	r0, [pc, #4]	@ (8003f18 <__sfp_lock_release+0x8>)
 8003f12:	f000 b9ff 	b.w	8004314 <__retarget_lock_release_recursive>
 8003f16:	bf00      	nop
 8003f18:	20004209 	.word	0x20004209

08003f1c <__sinit>:
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	4604      	mov	r4, r0
 8003f20:	f7ff fff0 	bl	8003f04 <__sfp_lock_acquire>
 8003f24:	6a23      	ldr	r3, [r4, #32]
 8003f26:	b11b      	cbz	r3, 8003f30 <__sinit+0x14>
 8003f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f2c:	f7ff bff0 	b.w	8003f10 <__sfp_lock_release>
 8003f30:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <__sinit+0x28>)
 8003f32:	6223      	str	r3, [r4, #32]
 8003f34:	4b04      	ldr	r3, [pc, #16]	@ (8003f48 <__sinit+0x2c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f5      	bne.n	8003f28 <__sinit+0xc>
 8003f3c:	f7ff ffc4 	bl	8003ec8 <global_stdio_init.part.0>
 8003f40:	e7f2      	b.n	8003f28 <__sinit+0xc>
 8003f42:	bf00      	nop
 8003f44:	08003e89 	.word	0x08003e89
 8003f48:	20004200 	.word	0x20004200

08003f4c <_fwalk_sglue>:
 8003f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f50:	4607      	mov	r7, r0
 8003f52:	4688      	mov	r8, r1
 8003f54:	4614      	mov	r4, r2
 8003f56:	2600      	movs	r6, #0
 8003f58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f5c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f60:	d505      	bpl.n	8003f6e <_fwalk_sglue+0x22>
 8003f62:	6824      	ldr	r4, [r4, #0]
 8003f64:	2c00      	cmp	r4, #0
 8003f66:	d1f7      	bne.n	8003f58 <_fwalk_sglue+0xc>
 8003f68:	4630      	mov	r0, r6
 8003f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6e:	89ab      	ldrh	r3, [r5, #12]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d907      	bls.n	8003f84 <_fwalk_sglue+0x38>
 8003f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	d003      	beq.n	8003f84 <_fwalk_sglue+0x38>
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	4638      	mov	r0, r7
 8003f80:	47c0      	blx	r8
 8003f82:	4306      	orrs	r6, r0
 8003f84:	3568      	adds	r5, #104	@ 0x68
 8003f86:	e7e9      	b.n	8003f5c <_fwalk_sglue+0x10>

08003f88 <iprintf>:
 8003f88:	b40f      	push	{r0, r1, r2, r3}
 8003f8a:	b507      	push	{r0, r1, r2, lr}
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <iprintf+0x20>)
 8003f8e:	ab04      	add	r3, sp, #16
 8003f90:	6808      	ldr	r0, [r1, #0]
 8003f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f96:	6881      	ldr	r1, [r0, #8]
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	f001 fcd9 	bl	8005950 <_vfiprintf_r>
 8003f9e:	b003      	add	sp, #12
 8003fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fa4:	b004      	add	sp, #16
 8003fa6:	4770      	bx	lr
 8003fa8:	20000018 	.word	0x20000018

08003fac <_puts_r>:
 8003fac:	6a03      	ldr	r3, [r0, #32]
 8003fae:	b570      	push	{r4, r5, r6, lr}
 8003fb0:	6884      	ldr	r4, [r0, #8]
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	460e      	mov	r6, r1
 8003fb6:	b90b      	cbnz	r3, 8003fbc <_puts_r+0x10>
 8003fb8:	f7ff ffb0 	bl	8003f1c <__sinit>
 8003fbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fbe:	07db      	lsls	r3, r3, #31
 8003fc0:	d405      	bmi.n	8003fce <_puts_r+0x22>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	0598      	lsls	r0, r3, #22
 8003fc6:	d402      	bmi.n	8003fce <_puts_r+0x22>
 8003fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fca:	f000 f9a2 	bl	8004312 <__retarget_lock_acquire_recursive>
 8003fce:	89a3      	ldrh	r3, [r4, #12]
 8003fd0:	0719      	lsls	r1, r3, #28
 8003fd2:	d502      	bpl.n	8003fda <_puts_r+0x2e>
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d135      	bne.n	8004046 <_puts_r+0x9a>
 8003fda:	4621      	mov	r1, r4
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 f8c5 	bl	800416c <__swsetup_r>
 8003fe2:	b380      	cbz	r0, 8004046 <_puts_r+0x9a>
 8003fe4:	f04f 35ff 	mov.w	r5, #4294967295
 8003fe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fea:	07da      	lsls	r2, r3, #31
 8003fec:	d405      	bmi.n	8003ffa <_puts_r+0x4e>
 8003fee:	89a3      	ldrh	r3, [r4, #12]
 8003ff0:	059b      	lsls	r3, r3, #22
 8003ff2:	d402      	bmi.n	8003ffa <_puts_r+0x4e>
 8003ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ff6:	f000 f98d 	bl	8004314 <__retarget_lock_release_recursive>
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	bd70      	pop	{r4, r5, r6, pc}
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	da04      	bge.n	800400c <_puts_r+0x60>
 8004002:	69a2      	ldr	r2, [r4, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	dc17      	bgt.n	8004038 <_puts_r+0x8c>
 8004008:	290a      	cmp	r1, #10
 800400a:	d015      	beq.n	8004038 <_puts_r+0x8c>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	6022      	str	r2, [r4, #0]
 8004012:	7019      	strb	r1, [r3, #0]
 8004014:	68a3      	ldr	r3, [r4, #8]
 8004016:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800401a:	3b01      	subs	r3, #1
 800401c:	60a3      	str	r3, [r4, #8]
 800401e:	2900      	cmp	r1, #0
 8004020:	d1ed      	bne.n	8003ffe <_puts_r+0x52>
 8004022:	2b00      	cmp	r3, #0
 8004024:	da11      	bge.n	800404a <_puts_r+0x9e>
 8004026:	4622      	mov	r2, r4
 8004028:	210a      	movs	r1, #10
 800402a:	4628      	mov	r0, r5
 800402c:	f000 f85f 	bl	80040ee <__swbuf_r>
 8004030:	3001      	adds	r0, #1
 8004032:	d0d7      	beq.n	8003fe4 <_puts_r+0x38>
 8004034:	250a      	movs	r5, #10
 8004036:	e7d7      	b.n	8003fe8 <_puts_r+0x3c>
 8004038:	4622      	mov	r2, r4
 800403a:	4628      	mov	r0, r5
 800403c:	f000 f857 	bl	80040ee <__swbuf_r>
 8004040:	3001      	adds	r0, #1
 8004042:	d1e7      	bne.n	8004014 <_puts_r+0x68>
 8004044:	e7ce      	b.n	8003fe4 <_puts_r+0x38>
 8004046:	3e01      	subs	r6, #1
 8004048:	e7e4      	b.n	8004014 <_puts_r+0x68>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	6022      	str	r2, [r4, #0]
 8004050:	220a      	movs	r2, #10
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	e7ee      	b.n	8004034 <_puts_r+0x88>
	...

08004058 <puts>:
 8004058:	4b02      	ldr	r3, [pc, #8]	@ (8004064 <puts+0xc>)
 800405a:	4601      	mov	r1, r0
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f7ff bfa5 	b.w	8003fac <_puts_r>
 8004062:	bf00      	nop
 8004064:	20000018 	.word	0x20000018

08004068 <__sread>:
 8004068:	b510      	push	{r4, lr}
 800406a:	460c      	mov	r4, r1
 800406c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004070:	f000 f900 	bl	8004274 <_read_r>
 8004074:	2800      	cmp	r0, #0
 8004076:	bfab      	itete	ge
 8004078:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800407a:	89a3      	ldrhlt	r3, [r4, #12]
 800407c:	181b      	addge	r3, r3, r0
 800407e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004082:	bfac      	ite	ge
 8004084:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004086:	81a3      	strhlt	r3, [r4, #12]
 8004088:	bd10      	pop	{r4, pc}

0800408a <__swrite>:
 800408a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800408e:	461f      	mov	r7, r3
 8004090:	898b      	ldrh	r3, [r1, #12]
 8004092:	05db      	lsls	r3, r3, #23
 8004094:	4605      	mov	r5, r0
 8004096:	460c      	mov	r4, r1
 8004098:	4616      	mov	r6, r2
 800409a:	d505      	bpl.n	80040a8 <__swrite+0x1e>
 800409c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a0:	2302      	movs	r3, #2
 80040a2:	2200      	movs	r2, #0
 80040a4:	f000 f8d4 	bl	8004250 <_lseek_r>
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040b2:	81a3      	strh	r3, [r4, #12]
 80040b4:	4632      	mov	r2, r6
 80040b6:	463b      	mov	r3, r7
 80040b8:	4628      	mov	r0, r5
 80040ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040be:	f000 b8eb 	b.w	8004298 <_write_r>

080040c2 <__sseek>:
 80040c2:	b510      	push	{r4, lr}
 80040c4:	460c      	mov	r4, r1
 80040c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ca:	f000 f8c1 	bl	8004250 <_lseek_r>
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	bf15      	itete	ne
 80040d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040de:	81a3      	strheq	r3, [r4, #12]
 80040e0:	bf18      	it	ne
 80040e2:	81a3      	strhne	r3, [r4, #12]
 80040e4:	bd10      	pop	{r4, pc}

080040e6 <__sclose>:
 80040e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ea:	f000 b8a1 	b.w	8004230 <_close_r>

080040ee <__swbuf_r>:
 80040ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040f0:	460e      	mov	r6, r1
 80040f2:	4614      	mov	r4, r2
 80040f4:	4605      	mov	r5, r0
 80040f6:	b118      	cbz	r0, 8004100 <__swbuf_r+0x12>
 80040f8:	6a03      	ldr	r3, [r0, #32]
 80040fa:	b90b      	cbnz	r3, 8004100 <__swbuf_r+0x12>
 80040fc:	f7ff ff0e 	bl	8003f1c <__sinit>
 8004100:	69a3      	ldr	r3, [r4, #24]
 8004102:	60a3      	str	r3, [r4, #8]
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	071a      	lsls	r2, r3, #28
 8004108:	d501      	bpl.n	800410e <__swbuf_r+0x20>
 800410a:	6923      	ldr	r3, [r4, #16]
 800410c:	b943      	cbnz	r3, 8004120 <__swbuf_r+0x32>
 800410e:	4621      	mov	r1, r4
 8004110:	4628      	mov	r0, r5
 8004112:	f000 f82b 	bl	800416c <__swsetup_r>
 8004116:	b118      	cbz	r0, 8004120 <__swbuf_r+0x32>
 8004118:	f04f 37ff 	mov.w	r7, #4294967295
 800411c:	4638      	mov	r0, r7
 800411e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	6922      	ldr	r2, [r4, #16]
 8004124:	1a98      	subs	r0, r3, r2
 8004126:	6963      	ldr	r3, [r4, #20]
 8004128:	b2f6      	uxtb	r6, r6
 800412a:	4283      	cmp	r3, r0
 800412c:	4637      	mov	r7, r6
 800412e:	dc05      	bgt.n	800413c <__swbuf_r+0x4e>
 8004130:	4621      	mov	r1, r4
 8004132:	4628      	mov	r0, r5
 8004134:	f001 fda8 	bl	8005c88 <_fflush_r>
 8004138:	2800      	cmp	r0, #0
 800413a:	d1ed      	bne.n	8004118 <__swbuf_r+0x2a>
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	3b01      	subs	r3, #1
 8004140:	60a3      	str	r3, [r4, #8]
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	6022      	str	r2, [r4, #0]
 8004148:	701e      	strb	r6, [r3, #0]
 800414a:	6962      	ldr	r2, [r4, #20]
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	429a      	cmp	r2, r3
 8004150:	d004      	beq.n	800415c <__swbuf_r+0x6e>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	07db      	lsls	r3, r3, #31
 8004156:	d5e1      	bpl.n	800411c <__swbuf_r+0x2e>
 8004158:	2e0a      	cmp	r6, #10
 800415a:	d1df      	bne.n	800411c <__swbuf_r+0x2e>
 800415c:	4621      	mov	r1, r4
 800415e:	4628      	mov	r0, r5
 8004160:	f001 fd92 	bl	8005c88 <_fflush_r>
 8004164:	2800      	cmp	r0, #0
 8004166:	d0d9      	beq.n	800411c <__swbuf_r+0x2e>
 8004168:	e7d6      	b.n	8004118 <__swbuf_r+0x2a>
	...

0800416c <__swsetup_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4b29      	ldr	r3, [pc, #164]	@ (8004214 <__swsetup_r+0xa8>)
 8004170:	4605      	mov	r5, r0
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	460c      	mov	r4, r1
 8004176:	b118      	cbz	r0, 8004180 <__swsetup_r+0x14>
 8004178:	6a03      	ldr	r3, [r0, #32]
 800417a:	b90b      	cbnz	r3, 8004180 <__swsetup_r+0x14>
 800417c:	f7ff fece 	bl	8003f1c <__sinit>
 8004180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004184:	0719      	lsls	r1, r3, #28
 8004186:	d422      	bmi.n	80041ce <__swsetup_r+0x62>
 8004188:	06da      	lsls	r2, r3, #27
 800418a:	d407      	bmi.n	800419c <__swsetup_r+0x30>
 800418c:	2209      	movs	r2, #9
 800418e:	602a      	str	r2, [r5, #0]
 8004190:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	f04f 30ff 	mov.w	r0, #4294967295
 800419a:	e033      	b.n	8004204 <__swsetup_r+0x98>
 800419c:	0758      	lsls	r0, r3, #29
 800419e:	d512      	bpl.n	80041c6 <__swsetup_r+0x5a>
 80041a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041a2:	b141      	cbz	r1, 80041b6 <__swsetup_r+0x4a>
 80041a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041a8:	4299      	cmp	r1, r3
 80041aa:	d002      	beq.n	80041b2 <__swsetup_r+0x46>
 80041ac:	4628      	mov	r0, r5
 80041ae:	f000 ff2b 	bl	8005008 <_free_r>
 80041b2:	2300      	movs	r3, #0
 80041b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80041b6:	89a3      	ldrh	r3, [r4, #12]
 80041b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	2300      	movs	r3, #0
 80041c0:	6063      	str	r3, [r4, #4]
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	6023      	str	r3, [r4, #0]
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	81a3      	strh	r3, [r4, #12]
 80041ce:	6923      	ldr	r3, [r4, #16]
 80041d0:	b94b      	cbnz	r3, 80041e6 <__swsetup_r+0x7a>
 80041d2:	89a3      	ldrh	r3, [r4, #12]
 80041d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041dc:	d003      	beq.n	80041e6 <__swsetup_r+0x7a>
 80041de:	4621      	mov	r1, r4
 80041e0:	4628      	mov	r0, r5
 80041e2:	f001 fdb1 	bl	8005d48 <__smakebuf_r>
 80041e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ea:	f013 0201 	ands.w	r2, r3, #1
 80041ee:	d00a      	beq.n	8004206 <__swsetup_r+0x9a>
 80041f0:	2200      	movs	r2, #0
 80041f2:	60a2      	str	r2, [r4, #8]
 80041f4:	6962      	ldr	r2, [r4, #20]
 80041f6:	4252      	negs	r2, r2
 80041f8:	61a2      	str	r2, [r4, #24]
 80041fa:	6922      	ldr	r2, [r4, #16]
 80041fc:	b942      	cbnz	r2, 8004210 <__swsetup_r+0xa4>
 80041fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004202:	d1c5      	bne.n	8004190 <__swsetup_r+0x24>
 8004204:	bd38      	pop	{r3, r4, r5, pc}
 8004206:	0799      	lsls	r1, r3, #30
 8004208:	bf58      	it	pl
 800420a:	6962      	ldrpl	r2, [r4, #20]
 800420c:	60a2      	str	r2, [r4, #8]
 800420e:	e7f4      	b.n	80041fa <__swsetup_r+0x8e>
 8004210:	2000      	movs	r0, #0
 8004212:	e7f7      	b.n	8004204 <__swsetup_r+0x98>
 8004214:	20000018 	.word	0x20000018

08004218 <memset>:
 8004218:	4402      	add	r2, r0
 800421a:	4603      	mov	r3, r0
 800421c:	4293      	cmp	r3, r2
 800421e:	d100      	bne.n	8004222 <memset+0xa>
 8004220:	4770      	bx	lr
 8004222:	f803 1b01 	strb.w	r1, [r3], #1
 8004226:	e7f9      	b.n	800421c <memset+0x4>

08004228 <_localeconv_r>:
 8004228:	4800      	ldr	r0, [pc, #0]	@ (800422c <_localeconv_r+0x4>)
 800422a:	4770      	bx	lr
 800422c:	20000158 	.word	0x20000158

08004230 <_close_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4d06      	ldr	r5, [pc, #24]	@ (800424c <_close_r+0x1c>)
 8004234:	2300      	movs	r3, #0
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	f7fd fc9d 	bl	8001b7a <_close>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_close_r+0x1a>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_close_r+0x1a>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	20004204 	.word	0x20004204

08004250 <_lseek_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d07      	ldr	r5, [pc, #28]	@ (8004270 <_lseek_r+0x20>)
 8004254:	4604      	mov	r4, r0
 8004256:	4608      	mov	r0, r1
 8004258:	4611      	mov	r1, r2
 800425a:	2200      	movs	r2, #0
 800425c:	602a      	str	r2, [r5, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	f7fd fcb2 	bl	8001bc8 <_lseek>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_lseek_r+0x1e>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_lseek_r+0x1e>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	20004204 	.word	0x20004204

08004274 <_read_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4d07      	ldr	r5, [pc, #28]	@ (8004294 <_read_r+0x20>)
 8004278:	4604      	mov	r4, r0
 800427a:	4608      	mov	r0, r1
 800427c:	4611      	mov	r1, r2
 800427e:	2200      	movs	r2, #0
 8004280:	602a      	str	r2, [r5, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	f7fd fc40 	bl	8001b08 <_read>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <_read_r+0x1e>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	b103      	cbz	r3, 8004292 <_read_r+0x1e>
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	20004204 	.word	0x20004204

08004298 <_write_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4d07      	ldr	r5, [pc, #28]	@ (80042b8 <_write_r+0x20>)
 800429c:	4604      	mov	r4, r0
 800429e:	4608      	mov	r0, r1
 80042a0:	4611      	mov	r1, r2
 80042a2:	2200      	movs	r2, #0
 80042a4:	602a      	str	r2, [r5, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f7fd fc4b 	bl	8001b42 <_write>
 80042ac:	1c43      	adds	r3, r0, #1
 80042ae:	d102      	bne.n	80042b6 <_write_r+0x1e>
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	b103      	cbz	r3, 80042b6 <_write_r+0x1e>
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	20004204 	.word	0x20004204

080042bc <__errno>:
 80042bc:	4b01      	ldr	r3, [pc, #4]	@ (80042c4 <__errno+0x8>)
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000018 	.word	0x20000018

080042c8 <__libc_init_array>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004300 <__libc_init_array+0x38>)
 80042cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004304 <__libc_init_array+0x3c>)
 80042ce:	1b64      	subs	r4, r4, r5
 80042d0:	10a4      	asrs	r4, r4, #2
 80042d2:	2600      	movs	r6, #0
 80042d4:	42a6      	cmp	r6, r4
 80042d6:	d109      	bne.n	80042ec <__libc_init_array+0x24>
 80042d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004308 <__libc_init_array+0x40>)
 80042da:	4c0c      	ldr	r4, [pc, #48]	@ (800430c <__libc_init_array+0x44>)
 80042dc:	f001 ff30 	bl	8006140 <_init>
 80042e0:	1b64      	subs	r4, r4, r5
 80042e2:	10a4      	asrs	r4, r4, #2
 80042e4:	2600      	movs	r6, #0
 80042e6:	42a6      	cmp	r6, r4
 80042e8:	d105      	bne.n	80042f6 <__libc_init_array+0x2e>
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f0:	4798      	blx	r3
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7ee      	b.n	80042d4 <__libc_init_array+0xc>
 80042f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fa:	4798      	blx	r3
 80042fc:	3601      	adds	r6, #1
 80042fe:	e7f2      	b.n	80042e6 <__libc_init_array+0x1e>
 8004300:	080065b0 	.word	0x080065b0
 8004304:	080065b0 	.word	0x080065b0
 8004308:	080065b0 	.word	0x080065b0
 800430c:	080065b4 	.word	0x080065b4

08004310 <__retarget_lock_init_recursive>:
 8004310:	4770      	bx	lr

08004312 <__retarget_lock_acquire_recursive>:
 8004312:	4770      	bx	lr

08004314 <__retarget_lock_release_recursive>:
 8004314:	4770      	bx	lr
	...

08004318 <__assert_func>:
 8004318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800431a:	4614      	mov	r4, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <__assert_func+0x2c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4605      	mov	r5, r0
 8004324:	68d8      	ldr	r0, [r3, #12]
 8004326:	b14c      	cbz	r4, 800433c <__assert_func+0x24>
 8004328:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <__assert_func+0x30>)
 800432a:	9100      	str	r1, [sp, #0]
 800432c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004330:	4906      	ldr	r1, [pc, #24]	@ (800434c <__assert_func+0x34>)
 8004332:	462b      	mov	r3, r5
 8004334:	f001 fcd0 	bl	8005cd8 <fiprintf>
 8004338:	f001 fd82 	bl	8005e40 <abort>
 800433c:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <__assert_func+0x38>)
 800433e:	461c      	mov	r4, r3
 8004340:	e7f3      	b.n	800432a <__assert_func+0x12>
 8004342:	bf00      	nop
 8004344:	20000018 	.word	0x20000018
 8004348:	08006267 	.word	0x08006267
 800434c:	08006274 	.word	0x08006274
 8004350:	080062a2 	.word	0x080062a2

08004354 <quorem>:
 8004354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	6903      	ldr	r3, [r0, #16]
 800435a:	690c      	ldr	r4, [r1, #16]
 800435c:	42a3      	cmp	r3, r4
 800435e:	4607      	mov	r7, r0
 8004360:	db7e      	blt.n	8004460 <quorem+0x10c>
 8004362:	3c01      	subs	r4, #1
 8004364:	f101 0814 	add.w	r8, r1, #20
 8004368:	00a3      	lsls	r3, r4, #2
 800436a:	f100 0514 	add.w	r5, r0, #20
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800437a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800437e:	3301      	adds	r3, #1
 8004380:	429a      	cmp	r2, r3
 8004382:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004386:	fbb2 f6f3 	udiv	r6, r2, r3
 800438a:	d32e      	bcc.n	80043ea <quorem+0x96>
 800438c:	f04f 0a00 	mov.w	sl, #0
 8004390:	46c4      	mov	ip, r8
 8004392:	46ae      	mov	lr, r5
 8004394:	46d3      	mov	fp, sl
 8004396:	f85c 3b04 	ldr.w	r3, [ip], #4
 800439a:	b298      	uxth	r0, r3
 800439c:	fb06 a000 	mla	r0, r6, r0, sl
 80043a0:	0c02      	lsrs	r2, r0, #16
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	fb06 2303 	mla	r3, r6, r3, r2
 80043a8:	f8de 2000 	ldr.w	r2, [lr]
 80043ac:	b280      	uxth	r0, r0
 80043ae:	b292      	uxth	r2, r2
 80043b0:	1a12      	subs	r2, r2, r0
 80043b2:	445a      	add	r2, fp
 80043b4:	f8de 0000 	ldr.w	r0, [lr]
 80043b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80043bc:	b29b      	uxth	r3, r3
 80043be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80043c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80043c6:	b292      	uxth	r2, r2
 80043c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80043cc:	45e1      	cmp	r9, ip
 80043ce:	f84e 2b04 	str.w	r2, [lr], #4
 80043d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80043d6:	d2de      	bcs.n	8004396 <quorem+0x42>
 80043d8:	9b00      	ldr	r3, [sp, #0]
 80043da:	58eb      	ldr	r3, [r5, r3]
 80043dc:	b92b      	cbnz	r3, 80043ea <quorem+0x96>
 80043de:	9b01      	ldr	r3, [sp, #4]
 80043e0:	3b04      	subs	r3, #4
 80043e2:	429d      	cmp	r5, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	d32f      	bcc.n	8004448 <quorem+0xf4>
 80043e8:	613c      	str	r4, [r7, #16]
 80043ea:	4638      	mov	r0, r7
 80043ec:	f001 f97e 	bl	80056ec <__mcmp>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	db25      	blt.n	8004440 <quorem+0xec>
 80043f4:	4629      	mov	r1, r5
 80043f6:	2000      	movs	r0, #0
 80043f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80043fc:	f8d1 c000 	ldr.w	ip, [r1]
 8004400:	fa1f fe82 	uxth.w	lr, r2
 8004404:	fa1f f38c 	uxth.w	r3, ip
 8004408:	eba3 030e 	sub.w	r3, r3, lr
 800440c:	4403      	add	r3, r0
 800440e:	0c12      	lsrs	r2, r2, #16
 8004410:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004414:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004418:	b29b      	uxth	r3, r3
 800441a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800441e:	45c1      	cmp	r9, r8
 8004420:	f841 3b04 	str.w	r3, [r1], #4
 8004424:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004428:	d2e6      	bcs.n	80043f8 <quorem+0xa4>
 800442a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800442e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004432:	b922      	cbnz	r2, 800443e <quorem+0xea>
 8004434:	3b04      	subs	r3, #4
 8004436:	429d      	cmp	r5, r3
 8004438:	461a      	mov	r2, r3
 800443a:	d30b      	bcc.n	8004454 <quorem+0x100>
 800443c:	613c      	str	r4, [r7, #16]
 800443e:	3601      	adds	r6, #1
 8004440:	4630      	mov	r0, r6
 8004442:	b003      	add	sp, #12
 8004444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	3b04      	subs	r3, #4
 800444c:	2a00      	cmp	r2, #0
 800444e:	d1cb      	bne.n	80043e8 <quorem+0x94>
 8004450:	3c01      	subs	r4, #1
 8004452:	e7c6      	b.n	80043e2 <quorem+0x8e>
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	3b04      	subs	r3, #4
 8004458:	2a00      	cmp	r2, #0
 800445a:	d1ef      	bne.n	800443c <quorem+0xe8>
 800445c:	3c01      	subs	r4, #1
 800445e:	e7ea      	b.n	8004436 <quorem+0xe2>
 8004460:	2000      	movs	r0, #0
 8004462:	e7ee      	b.n	8004442 <quorem+0xee>
 8004464:	0000      	movs	r0, r0
	...

08004468 <_dtoa_r>:
 8004468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446c:	69c7      	ldr	r7, [r0, #28]
 800446e:	b097      	sub	sp, #92	@ 0x5c
 8004470:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004474:	ec55 4b10 	vmov	r4, r5, d0
 8004478:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800447a:	9107      	str	r1, [sp, #28]
 800447c:	4681      	mov	r9, r0
 800447e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004480:	9311      	str	r3, [sp, #68]	@ 0x44
 8004482:	b97f      	cbnz	r7, 80044a4 <_dtoa_r+0x3c>
 8004484:	2010      	movs	r0, #16
 8004486:	f000 fe09 	bl	800509c <malloc>
 800448a:	4602      	mov	r2, r0
 800448c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004490:	b920      	cbnz	r0, 800449c <_dtoa_r+0x34>
 8004492:	4ba9      	ldr	r3, [pc, #676]	@ (8004738 <_dtoa_r+0x2d0>)
 8004494:	21ef      	movs	r1, #239	@ 0xef
 8004496:	48a9      	ldr	r0, [pc, #676]	@ (800473c <_dtoa_r+0x2d4>)
 8004498:	f7ff ff3e 	bl	8004318 <__assert_func>
 800449c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80044a0:	6007      	str	r7, [r0, #0]
 80044a2:	60c7      	str	r7, [r0, #12]
 80044a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	b159      	cbz	r1, 80044c4 <_dtoa_r+0x5c>
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	604a      	str	r2, [r1, #4]
 80044b0:	2301      	movs	r3, #1
 80044b2:	4093      	lsls	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	4648      	mov	r0, r9
 80044b8:	f000 fee6 	bl	8005288 <_Bfree>
 80044bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	1e2b      	subs	r3, r5, #0
 80044c6:	bfb9      	ittee	lt
 80044c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80044cc:	9305      	strlt	r3, [sp, #20]
 80044ce:	2300      	movge	r3, #0
 80044d0:	6033      	strge	r3, [r6, #0]
 80044d2:	9f05      	ldr	r7, [sp, #20]
 80044d4:	4b9a      	ldr	r3, [pc, #616]	@ (8004740 <_dtoa_r+0x2d8>)
 80044d6:	bfbc      	itt	lt
 80044d8:	2201      	movlt	r2, #1
 80044da:	6032      	strlt	r2, [r6, #0]
 80044dc:	43bb      	bics	r3, r7
 80044de:	d112      	bne.n	8004506 <_dtoa_r+0x9e>
 80044e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80044e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80044ec:	4323      	orrs	r3, r4
 80044ee:	f000 855a 	beq.w	8004fa6 <_dtoa_r+0xb3e>
 80044f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80044f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004754 <_dtoa_r+0x2ec>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 855c 	beq.w	8004fb6 <_dtoa_r+0xb4e>
 80044fe:	f10a 0303 	add.w	r3, sl, #3
 8004502:	f000 bd56 	b.w	8004fb2 <_dtoa_r+0xb4a>
 8004506:	ed9d 7b04 	vldr	d7, [sp, #16]
 800450a:	2200      	movs	r2, #0
 800450c:	ec51 0b17 	vmov	r0, r1, d7
 8004510:	2300      	movs	r3, #0
 8004512:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004516:	f7fc fae7 	bl	8000ae8 <__aeabi_dcmpeq>
 800451a:	4680      	mov	r8, r0
 800451c:	b158      	cbz	r0, 8004536 <_dtoa_r+0xce>
 800451e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004520:	2301      	movs	r3, #1
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004526:	b113      	cbz	r3, 800452e <_dtoa_r+0xc6>
 8004528:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800452a:	4b86      	ldr	r3, [pc, #536]	@ (8004744 <_dtoa_r+0x2dc>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004758 <_dtoa_r+0x2f0>
 8004532:	f000 bd40 	b.w	8004fb6 <_dtoa_r+0xb4e>
 8004536:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800453a:	aa14      	add	r2, sp, #80	@ 0x50
 800453c:	a915      	add	r1, sp, #84	@ 0x54
 800453e:	4648      	mov	r0, r9
 8004540:	f001 f984 	bl	800584c <__d2b>
 8004544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004548:	9002      	str	r0, [sp, #8]
 800454a:	2e00      	cmp	r6, #0
 800454c:	d078      	beq.n	8004640 <_dtoa_r+0x1d8>
 800454e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004550:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800455c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004568:	4619      	mov	r1, r3
 800456a:	2200      	movs	r2, #0
 800456c:	4b76      	ldr	r3, [pc, #472]	@ (8004748 <_dtoa_r+0x2e0>)
 800456e:	f7fb fe9b 	bl	80002a8 <__aeabi_dsub>
 8004572:	a36b      	add	r3, pc, #428	@ (adr r3, 8004720 <_dtoa_r+0x2b8>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f7fc f84e 	bl	8000618 <__aeabi_dmul>
 800457c:	a36a      	add	r3, pc, #424	@ (adr r3, 8004728 <_dtoa_r+0x2c0>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fb fe93 	bl	80002ac <__adddf3>
 8004586:	4604      	mov	r4, r0
 8004588:	4630      	mov	r0, r6
 800458a:	460d      	mov	r5, r1
 800458c:	f7fb ffda 	bl	8000544 <__aeabi_i2d>
 8004590:	a367      	add	r3, pc, #412	@ (adr r3, 8004730 <_dtoa_r+0x2c8>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fc f83f 	bl	8000618 <__aeabi_dmul>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f7fb fe83 	bl	80002ac <__adddf3>
 80045a6:	4604      	mov	r4, r0
 80045a8:	460d      	mov	r5, r1
 80045aa:	f7fc fae5 	bl	8000b78 <__aeabi_d2iz>
 80045ae:	2200      	movs	r2, #0
 80045b0:	4607      	mov	r7, r0
 80045b2:	2300      	movs	r3, #0
 80045b4:	4620      	mov	r0, r4
 80045b6:	4629      	mov	r1, r5
 80045b8:	f7fc faa0 	bl	8000afc <__aeabi_dcmplt>
 80045bc:	b140      	cbz	r0, 80045d0 <_dtoa_r+0x168>
 80045be:	4638      	mov	r0, r7
 80045c0:	f7fb ffc0 	bl	8000544 <__aeabi_i2d>
 80045c4:	4622      	mov	r2, r4
 80045c6:	462b      	mov	r3, r5
 80045c8:	f7fc fa8e 	bl	8000ae8 <__aeabi_dcmpeq>
 80045cc:	b900      	cbnz	r0, 80045d0 <_dtoa_r+0x168>
 80045ce:	3f01      	subs	r7, #1
 80045d0:	2f16      	cmp	r7, #22
 80045d2:	d852      	bhi.n	800467a <_dtoa_r+0x212>
 80045d4:	4b5d      	ldr	r3, [pc, #372]	@ (800474c <_dtoa_r+0x2e4>)
 80045d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80045e2:	f7fc fa8b 	bl	8000afc <__aeabi_dcmplt>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d049      	beq.n	800467e <_dtoa_r+0x216>
 80045ea:	3f01      	subs	r7, #1
 80045ec:	2300      	movs	r3, #0
 80045ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80045f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045f2:	1b9b      	subs	r3, r3, r6
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	bf45      	ittet	mi
 80045f8:	f1c3 0301 	rsbmi	r3, r3, #1
 80045fc:	9300      	strmi	r3, [sp, #0]
 80045fe:	2300      	movpl	r3, #0
 8004600:	2300      	movmi	r3, #0
 8004602:	9206      	str	r2, [sp, #24]
 8004604:	bf54      	ite	pl
 8004606:	9300      	strpl	r3, [sp, #0]
 8004608:	9306      	strmi	r3, [sp, #24]
 800460a:	2f00      	cmp	r7, #0
 800460c:	db39      	blt.n	8004682 <_dtoa_r+0x21a>
 800460e:	9b06      	ldr	r3, [sp, #24]
 8004610:	970d      	str	r7, [sp, #52]	@ 0x34
 8004612:	443b      	add	r3, r7
 8004614:	9306      	str	r3, [sp, #24]
 8004616:	2300      	movs	r3, #0
 8004618:	9308      	str	r3, [sp, #32]
 800461a:	9b07      	ldr	r3, [sp, #28]
 800461c:	2b09      	cmp	r3, #9
 800461e:	d863      	bhi.n	80046e8 <_dtoa_r+0x280>
 8004620:	2b05      	cmp	r3, #5
 8004622:	bfc4      	itt	gt
 8004624:	3b04      	subgt	r3, #4
 8004626:	9307      	strgt	r3, [sp, #28]
 8004628:	9b07      	ldr	r3, [sp, #28]
 800462a:	f1a3 0302 	sub.w	r3, r3, #2
 800462e:	bfcc      	ite	gt
 8004630:	2400      	movgt	r4, #0
 8004632:	2401      	movle	r4, #1
 8004634:	2b03      	cmp	r3, #3
 8004636:	d863      	bhi.n	8004700 <_dtoa_r+0x298>
 8004638:	e8df f003 	tbb	[pc, r3]
 800463c:	2b375452 	.word	0x2b375452
 8004640:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004644:	441e      	add	r6, r3
 8004646:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800464a:	2b20      	cmp	r3, #32
 800464c:	bfc1      	itttt	gt
 800464e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004652:	409f      	lslgt	r7, r3
 8004654:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004658:	fa24 f303 	lsrgt.w	r3, r4, r3
 800465c:	bfd6      	itet	le
 800465e:	f1c3 0320 	rsble	r3, r3, #32
 8004662:	ea47 0003 	orrgt.w	r0, r7, r3
 8004666:	fa04 f003 	lslle.w	r0, r4, r3
 800466a:	f7fb ff5b 	bl	8000524 <__aeabi_ui2d>
 800466e:	2201      	movs	r2, #1
 8004670:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004674:	3e01      	subs	r6, #1
 8004676:	9212      	str	r2, [sp, #72]	@ 0x48
 8004678:	e776      	b.n	8004568 <_dtoa_r+0x100>
 800467a:	2301      	movs	r3, #1
 800467c:	e7b7      	b.n	80045ee <_dtoa_r+0x186>
 800467e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004680:	e7b6      	b.n	80045f0 <_dtoa_r+0x188>
 8004682:	9b00      	ldr	r3, [sp, #0]
 8004684:	1bdb      	subs	r3, r3, r7
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	427b      	negs	r3, r7
 800468a:	9308      	str	r3, [sp, #32]
 800468c:	2300      	movs	r3, #0
 800468e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004690:	e7c3      	b.n	800461a <_dtoa_r+0x1b2>
 8004692:	2301      	movs	r3, #1
 8004694:	9309      	str	r3, [sp, #36]	@ 0x24
 8004696:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004698:	eb07 0b03 	add.w	fp, r7, r3
 800469c:	f10b 0301 	add.w	r3, fp, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	9303      	str	r3, [sp, #12]
 80046a4:	bfb8      	it	lt
 80046a6:	2301      	movlt	r3, #1
 80046a8:	e006      	b.n	80046b8 <_dtoa_r+0x250>
 80046aa:	2301      	movs	r3, #1
 80046ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	dd28      	ble.n	8004706 <_dtoa_r+0x29e>
 80046b4:	469b      	mov	fp, r3
 80046b6:	9303      	str	r3, [sp, #12]
 80046b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80046bc:	2100      	movs	r1, #0
 80046be:	2204      	movs	r2, #4
 80046c0:	f102 0514 	add.w	r5, r2, #20
 80046c4:	429d      	cmp	r5, r3
 80046c6:	d926      	bls.n	8004716 <_dtoa_r+0x2ae>
 80046c8:	6041      	str	r1, [r0, #4]
 80046ca:	4648      	mov	r0, r9
 80046cc:	f000 fd9c 	bl	8005208 <_Balloc>
 80046d0:	4682      	mov	sl, r0
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d142      	bne.n	800475c <_dtoa_r+0x2f4>
 80046d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004750 <_dtoa_r+0x2e8>)
 80046d8:	4602      	mov	r2, r0
 80046da:	f240 11af 	movw	r1, #431	@ 0x1af
 80046de:	e6da      	b.n	8004496 <_dtoa_r+0x2e>
 80046e0:	2300      	movs	r3, #0
 80046e2:	e7e3      	b.n	80046ac <_dtoa_r+0x244>
 80046e4:	2300      	movs	r3, #0
 80046e6:	e7d5      	b.n	8004694 <_dtoa_r+0x22c>
 80046e8:	2401      	movs	r4, #1
 80046ea:	2300      	movs	r3, #0
 80046ec:	9307      	str	r3, [sp, #28]
 80046ee:	9409      	str	r4, [sp, #36]	@ 0x24
 80046f0:	f04f 3bff 	mov.w	fp, #4294967295
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8cd b00c 	str.w	fp, [sp, #12]
 80046fa:	2312      	movs	r3, #18
 80046fc:	920c      	str	r2, [sp, #48]	@ 0x30
 80046fe:	e7db      	b.n	80046b8 <_dtoa_r+0x250>
 8004700:	2301      	movs	r3, #1
 8004702:	9309      	str	r3, [sp, #36]	@ 0x24
 8004704:	e7f4      	b.n	80046f0 <_dtoa_r+0x288>
 8004706:	f04f 0b01 	mov.w	fp, #1
 800470a:	f8cd b00c 	str.w	fp, [sp, #12]
 800470e:	465b      	mov	r3, fp
 8004710:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004714:	e7d0      	b.n	80046b8 <_dtoa_r+0x250>
 8004716:	3101      	adds	r1, #1
 8004718:	0052      	lsls	r2, r2, #1
 800471a:	e7d1      	b.n	80046c0 <_dtoa_r+0x258>
 800471c:	f3af 8000 	nop.w
 8004720:	636f4361 	.word	0x636f4361
 8004724:	3fd287a7 	.word	0x3fd287a7
 8004728:	8b60c8b3 	.word	0x8b60c8b3
 800472c:	3fc68a28 	.word	0x3fc68a28
 8004730:	509f79fb 	.word	0x509f79fb
 8004734:	3fd34413 	.word	0x3fd34413
 8004738:	080061c4 	.word	0x080061c4
 800473c:	080062b0 	.word	0x080062b0
 8004740:	7ff00000 	.word	0x7ff00000
 8004744:	08006244 	.word	0x08006244
 8004748:	3ff80000 	.word	0x3ff80000
 800474c:	080063c8 	.word	0x080063c8
 8004750:	08006308 	.word	0x08006308
 8004754:	080062ac 	.word	0x080062ac
 8004758:	08006243 	.word	0x08006243
 800475c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004760:	6018      	str	r0, [r3, #0]
 8004762:	9b03      	ldr	r3, [sp, #12]
 8004764:	2b0e      	cmp	r3, #14
 8004766:	f200 80a1 	bhi.w	80048ac <_dtoa_r+0x444>
 800476a:	2c00      	cmp	r4, #0
 800476c:	f000 809e 	beq.w	80048ac <_dtoa_r+0x444>
 8004770:	2f00      	cmp	r7, #0
 8004772:	dd33      	ble.n	80047dc <_dtoa_r+0x374>
 8004774:	4b9c      	ldr	r3, [pc, #624]	@ (80049e8 <_dtoa_r+0x580>)
 8004776:	f007 020f 	and.w	r2, r7, #15
 800477a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800477e:	ed93 7b00 	vldr	d7, [r3]
 8004782:	05f8      	lsls	r0, r7, #23
 8004784:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800478c:	d516      	bpl.n	80047bc <_dtoa_r+0x354>
 800478e:	4b97      	ldr	r3, [pc, #604]	@ (80049ec <_dtoa_r+0x584>)
 8004790:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004798:	f7fc f868 	bl	800086c <__aeabi_ddiv>
 800479c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047a0:	f004 040f 	and.w	r4, r4, #15
 80047a4:	2603      	movs	r6, #3
 80047a6:	4d91      	ldr	r5, [pc, #580]	@ (80049ec <_dtoa_r+0x584>)
 80047a8:	b954      	cbnz	r4, 80047c0 <_dtoa_r+0x358>
 80047aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80047ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047b2:	f7fc f85b 	bl	800086c <__aeabi_ddiv>
 80047b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ba:	e028      	b.n	800480e <_dtoa_r+0x3a6>
 80047bc:	2602      	movs	r6, #2
 80047be:	e7f2      	b.n	80047a6 <_dtoa_r+0x33e>
 80047c0:	07e1      	lsls	r1, r4, #31
 80047c2:	d508      	bpl.n	80047d6 <_dtoa_r+0x36e>
 80047c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80047c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80047cc:	f7fb ff24 	bl	8000618 <__aeabi_dmul>
 80047d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80047d4:	3601      	adds	r6, #1
 80047d6:	1064      	asrs	r4, r4, #1
 80047d8:	3508      	adds	r5, #8
 80047da:	e7e5      	b.n	80047a8 <_dtoa_r+0x340>
 80047dc:	f000 80af 	beq.w	800493e <_dtoa_r+0x4d6>
 80047e0:	427c      	negs	r4, r7
 80047e2:	4b81      	ldr	r3, [pc, #516]	@ (80049e8 <_dtoa_r+0x580>)
 80047e4:	4d81      	ldr	r5, [pc, #516]	@ (80049ec <_dtoa_r+0x584>)
 80047e6:	f004 020f 	and.w	r2, r4, #15
 80047ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80047f6:	f7fb ff0f 	bl	8000618 <__aeabi_dmul>
 80047fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047fe:	1124      	asrs	r4, r4, #4
 8004800:	2300      	movs	r3, #0
 8004802:	2602      	movs	r6, #2
 8004804:	2c00      	cmp	r4, #0
 8004806:	f040 808f 	bne.w	8004928 <_dtoa_r+0x4c0>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d3      	bne.n	80047b6 <_dtoa_r+0x34e>
 800480e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004810:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8094 	beq.w	8004942 <_dtoa_r+0x4da>
 800481a:	4b75      	ldr	r3, [pc, #468]	@ (80049f0 <_dtoa_r+0x588>)
 800481c:	2200      	movs	r2, #0
 800481e:	4620      	mov	r0, r4
 8004820:	4629      	mov	r1, r5
 8004822:	f7fc f96b 	bl	8000afc <__aeabi_dcmplt>
 8004826:	2800      	cmp	r0, #0
 8004828:	f000 808b 	beq.w	8004942 <_dtoa_r+0x4da>
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8087 	beq.w	8004942 <_dtoa_r+0x4da>
 8004834:	f1bb 0f00 	cmp.w	fp, #0
 8004838:	dd34      	ble.n	80048a4 <_dtoa_r+0x43c>
 800483a:	4620      	mov	r0, r4
 800483c:	4b6d      	ldr	r3, [pc, #436]	@ (80049f4 <_dtoa_r+0x58c>)
 800483e:	2200      	movs	r2, #0
 8004840:	4629      	mov	r1, r5
 8004842:	f7fb fee9 	bl	8000618 <__aeabi_dmul>
 8004846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800484a:	f107 38ff 	add.w	r8, r7, #4294967295
 800484e:	3601      	adds	r6, #1
 8004850:	465c      	mov	r4, fp
 8004852:	4630      	mov	r0, r6
 8004854:	f7fb fe76 	bl	8000544 <__aeabi_i2d>
 8004858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800485c:	f7fb fedc 	bl	8000618 <__aeabi_dmul>
 8004860:	4b65      	ldr	r3, [pc, #404]	@ (80049f8 <_dtoa_r+0x590>)
 8004862:	2200      	movs	r2, #0
 8004864:	f7fb fd22 	bl	80002ac <__adddf3>
 8004868:	4605      	mov	r5, r0
 800486a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800486e:	2c00      	cmp	r4, #0
 8004870:	d16a      	bne.n	8004948 <_dtoa_r+0x4e0>
 8004872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004876:	4b61      	ldr	r3, [pc, #388]	@ (80049fc <_dtoa_r+0x594>)
 8004878:	2200      	movs	r2, #0
 800487a:	f7fb fd15 	bl	80002a8 <__aeabi_dsub>
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004886:	462a      	mov	r2, r5
 8004888:	4633      	mov	r3, r6
 800488a:	f7fc f955 	bl	8000b38 <__aeabi_dcmpgt>
 800488e:	2800      	cmp	r0, #0
 8004890:	f040 8298 	bne.w	8004dc4 <_dtoa_r+0x95c>
 8004894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004898:	462a      	mov	r2, r5
 800489a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800489e:	f7fc f92d 	bl	8000afc <__aeabi_dcmplt>
 80048a2:	bb38      	cbnz	r0, 80048f4 <_dtoa_r+0x48c>
 80048a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80048a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80048ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f2c0 8157 	blt.w	8004b62 <_dtoa_r+0x6fa>
 80048b4:	2f0e      	cmp	r7, #14
 80048b6:	f300 8154 	bgt.w	8004b62 <_dtoa_r+0x6fa>
 80048ba:	4b4b      	ldr	r3, [pc, #300]	@ (80049e8 <_dtoa_r+0x580>)
 80048bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80048c0:	ed93 7b00 	vldr	d7, [r3]
 80048c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	ed8d 7b00 	vstr	d7, [sp]
 80048cc:	f280 80e5 	bge.w	8004a9a <_dtoa_r+0x632>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f300 80e1 	bgt.w	8004a9a <_dtoa_r+0x632>
 80048d8:	d10c      	bne.n	80048f4 <_dtoa_r+0x48c>
 80048da:	4b48      	ldr	r3, [pc, #288]	@ (80049fc <_dtoa_r+0x594>)
 80048dc:	2200      	movs	r2, #0
 80048de:	ec51 0b17 	vmov	r0, r1, d7
 80048e2:	f7fb fe99 	bl	8000618 <__aeabi_dmul>
 80048e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048ea:	f7fc f91b 	bl	8000b24 <__aeabi_dcmpge>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	f000 8266 	beq.w	8004dc0 <_dtoa_r+0x958>
 80048f4:	2400      	movs	r4, #0
 80048f6:	4625      	mov	r5, r4
 80048f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80048fa:	4656      	mov	r6, sl
 80048fc:	ea6f 0803 	mvn.w	r8, r3
 8004900:	2700      	movs	r7, #0
 8004902:	4621      	mov	r1, r4
 8004904:	4648      	mov	r0, r9
 8004906:	f000 fcbf 	bl	8005288 <_Bfree>
 800490a:	2d00      	cmp	r5, #0
 800490c:	f000 80bd 	beq.w	8004a8a <_dtoa_r+0x622>
 8004910:	b12f      	cbz	r7, 800491e <_dtoa_r+0x4b6>
 8004912:	42af      	cmp	r7, r5
 8004914:	d003      	beq.n	800491e <_dtoa_r+0x4b6>
 8004916:	4639      	mov	r1, r7
 8004918:	4648      	mov	r0, r9
 800491a:	f000 fcb5 	bl	8005288 <_Bfree>
 800491e:	4629      	mov	r1, r5
 8004920:	4648      	mov	r0, r9
 8004922:	f000 fcb1 	bl	8005288 <_Bfree>
 8004926:	e0b0      	b.n	8004a8a <_dtoa_r+0x622>
 8004928:	07e2      	lsls	r2, r4, #31
 800492a:	d505      	bpl.n	8004938 <_dtoa_r+0x4d0>
 800492c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004930:	f7fb fe72 	bl	8000618 <__aeabi_dmul>
 8004934:	3601      	adds	r6, #1
 8004936:	2301      	movs	r3, #1
 8004938:	1064      	asrs	r4, r4, #1
 800493a:	3508      	adds	r5, #8
 800493c:	e762      	b.n	8004804 <_dtoa_r+0x39c>
 800493e:	2602      	movs	r6, #2
 8004940:	e765      	b.n	800480e <_dtoa_r+0x3a6>
 8004942:	9c03      	ldr	r4, [sp, #12]
 8004944:	46b8      	mov	r8, r7
 8004946:	e784      	b.n	8004852 <_dtoa_r+0x3ea>
 8004948:	4b27      	ldr	r3, [pc, #156]	@ (80049e8 <_dtoa_r+0x580>)
 800494a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800494c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004950:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004954:	4454      	add	r4, sl
 8004956:	2900      	cmp	r1, #0
 8004958:	d054      	beq.n	8004a04 <_dtoa_r+0x59c>
 800495a:	4929      	ldr	r1, [pc, #164]	@ (8004a00 <_dtoa_r+0x598>)
 800495c:	2000      	movs	r0, #0
 800495e:	f7fb ff85 	bl	800086c <__aeabi_ddiv>
 8004962:	4633      	mov	r3, r6
 8004964:	462a      	mov	r2, r5
 8004966:	f7fb fc9f 	bl	80002a8 <__aeabi_dsub>
 800496a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800496e:	4656      	mov	r6, sl
 8004970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004974:	f7fc f900 	bl	8000b78 <__aeabi_d2iz>
 8004978:	4605      	mov	r5, r0
 800497a:	f7fb fde3 	bl	8000544 <__aeabi_i2d>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004986:	f7fb fc8f 	bl	80002a8 <__aeabi_dsub>
 800498a:	3530      	adds	r5, #48	@ 0x30
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004994:	f806 5b01 	strb.w	r5, [r6], #1
 8004998:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800499c:	f7fc f8ae 	bl	8000afc <__aeabi_dcmplt>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d172      	bne.n	8004a8a <_dtoa_r+0x622>
 80049a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049a8:	4911      	ldr	r1, [pc, #68]	@ (80049f0 <_dtoa_r+0x588>)
 80049aa:	2000      	movs	r0, #0
 80049ac:	f7fb fc7c 	bl	80002a8 <__aeabi_dsub>
 80049b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80049b4:	f7fc f8a2 	bl	8000afc <__aeabi_dcmplt>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	f040 80b4 	bne.w	8004b26 <_dtoa_r+0x6be>
 80049be:	42a6      	cmp	r6, r4
 80049c0:	f43f af70 	beq.w	80048a4 <_dtoa_r+0x43c>
 80049c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80049c8:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <_dtoa_r+0x58c>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	f7fb fe24 	bl	8000618 <__aeabi_dmul>
 80049d0:	4b08      	ldr	r3, [pc, #32]	@ (80049f4 <_dtoa_r+0x58c>)
 80049d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80049d6:	2200      	movs	r2, #0
 80049d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80049dc:	f7fb fe1c 	bl	8000618 <__aeabi_dmul>
 80049e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049e4:	e7c4      	b.n	8004970 <_dtoa_r+0x508>
 80049e6:	bf00      	nop
 80049e8:	080063c8 	.word	0x080063c8
 80049ec:	080063a0 	.word	0x080063a0
 80049f0:	3ff00000 	.word	0x3ff00000
 80049f4:	40240000 	.word	0x40240000
 80049f8:	401c0000 	.word	0x401c0000
 80049fc:	40140000 	.word	0x40140000
 8004a00:	3fe00000 	.word	0x3fe00000
 8004a04:	4631      	mov	r1, r6
 8004a06:	4628      	mov	r0, r5
 8004a08:	f7fb fe06 	bl	8000618 <__aeabi_dmul>
 8004a0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004a10:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004a12:	4656      	mov	r6, sl
 8004a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a18:	f7fc f8ae 	bl	8000b78 <__aeabi_d2iz>
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	f7fb fd91 	bl	8000544 <__aeabi_i2d>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a2a:	f7fb fc3d 	bl	80002a8 <__aeabi_dsub>
 8004a2e:	3530      	adds	r5, #48	@ 0x30
 8004a30:	f806 5b01 	strb.w	r5, [r6], #1
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	42a6      	cmp	r6, r4
 8004a3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	d124      	bne.n	8004a8e <_dtoa_r+0x626>
 8004a44:	4baf      	ldr	r3, [pc, #700]	@ (8004d04 <_dtoa_r+0x89c>)
 8004a46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004a4a:	f7fb fc2f 	bl	80002ac <__adddf3>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a56:	f7fc f86f 	bl	8000b38 <__aeabi_dcmpgt>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d163      	bne.n	8004b26 <_dtoa_r+0x6be>
 8004a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004a62:	49a8      	ldr	r1, [pc, #672]	@ (8004d04 <_dtoa_r+0x89c>)
 8004a64:	2000      	movs	r0, #0
 8004a66:	f7fb fc1f 	bl	80002a8 <__aeabi_dsub>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a72:	f7fc f843 	bl	8000afc <__aeabi_dcmplt>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	f43f af14 	beq.w	80048a4 <_dtoa_r+0x43c>
 8004a7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004a7e:	1e73      	subs	r3, r6, #1
 8004a80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004a82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004a86:	2b30      	cmp	r3, #48	@ 0x30
 8004a88:	d0f8      	beq.n	8004a7c <_dtoa_r+0x614>
 8004a8a:	4647      	mov	r7, r8
 8004a8c:	e03b      	b.n	8004b06 <_dtoa_r+0x69e>
 8004a8e:	4b9e      	ldr	r3, [pc, #632]	@ (8004d08 <_dtoa_r+0x8a0>)
 8004a90:	f7fb fdc2 	bl	8000618 <__aeabi_dmul>
 8004a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a98:	e7bc      	b.n	8004a14 <_dtoa_r+0x5ac>
 8004a9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004a9e:	4656      	mov	r6, sl
 8004aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	f7fb fee0 	bl	800086c <__aeabi_ddiv>
 8004aac:	f7fc f864 	bl	8000b78 <__aeabi_d2iz>
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	f7fb fd47 	bl	8000544 <__aeabi_i2d>
 8004ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aba:	f7fb fdad 	bl	8000618 <__aeabi_dmul>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004aca:	f7fb fbed 	bl	80002a8 <__aeabi_dsub>
 8004ace:	f806 4b01 	strb.w	r4, [r6], #1
 8004ad2:	9d03      	ldr	r5, [sp, #12]
 8004ad4:	eba6 040a 	sub.w	r4, r6, sl
 8004ad8:	42a5      	cmp	r5, r4
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	d133      	bne.n	8004b48 <_dtoa_r+0x6e0>
 8004ae0:	f7fb fbe4 	bl	80002ac <__adddf3>
 8004ae4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ae8:	4604      	mov	r4, r0
 8004aea:	460d      	mov	r5, r1
 8004aec:	f7fc f824 	bl	8000b38 <__aeabi_dcmpgt>
 8004af0:	b9c0      	cbnz	r0, 8004b24 <_dtoa_r+0x6bc>
 8004af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004af6:	4620      	mov	r0, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	f7fb fff5 	bl	8000ae8 <__aeabi_dcmpeq>
 8004afe:	b110      	cbz	r0, 8004b06 <_dtoa_r+0x69e>
 8004b00:	f018 0f01 	tst.w	r8, #1
 8004b04:	d10e      	bne.n	8004b24 <_dtoa_r+0x6bc>
 8004b06:	9902      	ldr	r1, [sp, #8]
 8004b08:	4648      	mov	r0, r9
 8004b0a:	f000 fbbd 	bl	8005288 <_Bfree>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	7033      	strb	r3, [r6, #0]
 8004b12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004b14:	3701      	adds	r7, #1
 8004b16:	601f      	str	r7, [r3, #0]
 8004b18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 824b 	beq.w	8004fb6 <_dtoa_r+0xb4e>
 8004b20:	601e      	str	r6, [r3, #0]
 8004b22:	e248      	b.n	8004fb6 <_dtoa_r+0xb4e>
 8004b24:	46b8      	mov	r8, r7
 8004b26:	4633      	mov	r3, r6
 8004b28:	461e      	mov	r6, r3
 8004b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b2e:	2a39      	cmp	r2, #57	@ 0x39
 8004b30:	d106      	bne.n	8004b40 <_dtoa_r+0x6d8>
 8004b32:	459a      	cmp	sl, r3
 8004b34:	d1f8      	bne.n	8004b28 <_dtoa_r+0x6c0>
 8004b36:	2230      	movs	r2, #48	@ 0x30
 8004b38:	f108 0801 	add.w	r8, r8, #1
 8004b3c:	f88a 2000 	strb.w	r2, [sl]
 8004b40:	781a      	ldrb	r2, [r3, #0]
 8004b42:	3201      	adds	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e7a0      	b.n	8004a8a <_dtoa_r+0x622>
 8004b48:	4b6f      	ldr	r3, [pc, #444]	@ (8004d08 <_dtoa_r+0x8a0>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f7fb fd64 	bl	8000618 <__aeabi_dmul>
 8004b50:	2200      	movs	r2, #0
 8004b52:	2300      	movs	r3, #0
 8004b54:	4604      	mov	r4, r0
 8004b56:	460d      	mov	r5, r1
 8004b58:	f7fb ffc6 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	d09f      	beq.n	8004aa0 <_dtoa_r+0x638>
 8004b60:	e7d1      	b.n	8004b06 <_dtoa_r+0x69e>
 8004b62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b64:	2a00      	cmp	r2, #0
 8004b66:	f000 80ea 	beq.w	8004d3e <_dtoa_r+0x8d6>
 8004b6a:	9a07      	ldr	r2, [sp, #28]
 8004b6c:	2a01      	cmp	r2, #1
 8004b6e:	f300 80cd 	bgt.w	8004d0c <_dtoa_r+0x8a4>
 8004b72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004b74:	2a00      	cmp	r2, #0
 8004b76:	f000 80c1 	beq.w	8004cfc <_dtoa_r+0x894>
 8004b7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004b7e:	9c08      	ldr	r4, [sp, #32]
 8004b80:	9e00      	ldr	r6, [sp, #0]
 8004b82:	9a00      	ldr	r2, [sp, #0]
 8004b84:	441a      	add	r2, r3
 8004b86:	9200      	str	r2, [sp, #0]
 8004b88:	9a06      	ldr	r2, [sp, #24]
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	441a      	add	r2, r3
 8004b8e:	4648      	mov	r0, r9
 8004b90:	9206      	str	r2, [sp, #24]
 8004b92:	f000 fc2d 	bl	80053f0 <__i2b>
 8004b96:	4605      	mov	r5, r0
 8004b98:	b166      	cbz	r6, 8004bb4 <_dtoa_r+0x74c>
 8004b9a:	9b06      	ldr	r3, [sp, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	dd09      	ble.n	8004bb4 <_dtoa_r+0x74c>
 8004ba0:	42b3      	cmp	r3, r6
 8004ba2:	9a00      	ldr	r2, [sp, #0]
 8004ba4:	bfa8      	it	ge
 8004ba6:	4633      	movge	r3, r6
 8004ba8:	1ad2      	subs	r2, r2, r3
 8004baa:	9200      	str	r2, [sp, #0]
 8004bac:	9a06      	ldr	r2, [sp, #24]
 8004bae:	1af6      	subs	r6, r6, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	9306      	str	r3, [sp, #24]
 8004bb4:	9b08      	ldr	r3, [sp, #32]
 8004bb6:	b30b      	cbz	r3, 8004bfc <_dtoa_r+0x794>
 8004bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80c6 	beq.w	8004d4c <_dtoa_r+0x8e4>
 8004bc0:	2c00      	cmp	r4, #0
 8004bc2:	f000 80c0 	beq.w	8004d46 <_dtoa_r+0x8de>
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4648      	mov	r0, r9
 8004bcc:	f000 fcc8 	bl	8005560 <__pow5mult>
 8004bd0:	9a02      	ldr	r2, [sp, #8]
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	4648      	mov	r0, r9
 8004bd8:	f000 fc20 	bl	800541c <__multiply>
 8004bdc:	9902      	ldr	r1, [sp, #8]
 8004bde:	4680      	mov	r8, r0
 8004be0:	4648      	mov	r0, r9
 8004be2:	f000 fb51 	bl	8005288 <_Bfree>
 8004be6:	9b08      	ldr	r3, [sp, #32]
 8004be8:	1b1b      	subs	r3, r3, r4
 8004bea:	9308      	str	r3, [sp, #32]
 8004bec:	f000 80b1 	beq.w	8004d52 <_dtoa_r+0x8ea>
 8004bf0:	9a08      	ldr	r2, [sp, #32]
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	4648      	mov	r0, r9
 8004bf6:	f000 fcb3 	bl	8005560 <__pow5mult>
 8004bfa:	9002      	str	r0, [sp, #8]
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4648      	mov	r0, r9
 8004c00:	f000 fbf6 	bl	80053f0 <__i2b>
 8004c04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c06:	4604      	mov	r4, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 81d8 	beq.w	8004fbe <_dtoa_r+0xb56>
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4601      	mov	r1, r0
 8004c12:	4648      	mov	r0, r9
 8004c14:	f000 fca4 	bl	8005560 <__pow5mult>
 8004c18:	9b07      	ldr	r3, [sp, #28]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	f300 809f 	bgt.w	8004d60 <_dtoa_r+0x8f8>
 8004c22:	9b04      	ldr	r3, [sp, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 8097 	bne.w	8004d58 <_dtoa_r+0x8f0>
 8004c2a:	9b05      	ldr	r3, [sp, #20]
 8004c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f040 8093 	bne.w	8004d5c <_dtoa_r+0x8f4>
 8004c36:	9b05      	ldr	r3, [sp, #20]
 8004c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c3c:	0d1b      	lsrs	r3, r3, #20
 8004c3e:	051b      	lsls	r3, r3, #20
 8004c40:	b133      	cbz	r3, 8004c50 <_dtoa_r+0x7e8>
 8004c42:	9b00      	ldr	r3, [sp, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	9b06      	ldr	r3, [sp, #24]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	9306      	str	r3, [sp, #24]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	9308      	str	r3, [sp, #32]
 8004c52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 81b8 	beq.w	8004fca <_dtoa_r+0xb62>
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004c60:	6918      	ldr	r0, [r3, #16]
 8004c62:	f000 fb79 	bl	8005358 <__hi0bits>
 8004c66:	f1c0 0020 	rsb	r0, r0, #32
 8004c6a:	9b06      	ldr	r3, [sp, #24]
 8004c6c:	4418      	add	r0, r3
 8004c6e:	f010 001f 	ands.w	r0, r0, #31
 8004c72:	f000 8082 	beq.w	8004d7a <_dtoa_r+0x912>
 8004c76:	f1c0 0320 	rsb	r3, r0, #32
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	dd73      	ble.n	8004d66 <_dtoa_r+0x8fe>
 8004c7e:	9b00      	ldr	r3, [sp, #0]
 8004c80:	f1c0 001c 	rsb	r0, r0, #28
 8004c84:	4403      	add	r3, r0
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	9b06      	ldr	r3, [sp, #24]
 8004c8a:	4403      	add	r3, r0
 8004c8c:	4406      	add	r6, r0
 8004c8e:	9306      	str	r3, [sp, #24]
 8004c90:	9b00      	ldr	r3, [sp, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	dd05      	ble.n	8004ca2 <_dtoa_r+0x83a>
 8004c96:	9902      	ldr	r1, [sp, #8]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4648      	mov	r0, r9
 8004c9c:	f000 fcba 	bl	8005614 <__lshift>
 8004ca0:	9002      	str	r0, [sp, #8]
 8004ca2:	9b06      	ldr	r3, [sp, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dd05      	ble.n	8004cb4 <_dtoa_r+0x84c>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	461a      	mov	r2, r3
 8004cac:	4648      	mov	r0, r9
 8004cae:	f000 fcb1 	bl	8005614 <__lshift>
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d061      	beq.n	8004d7e <_dtoa_r+0x916>
 8004cba:	9802      	ldr	r0, [sp, #8]
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	f000 fd15 	bl	80056ec <__mcmp>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	da5b      	bge.n	8004d7e <_dtoa_r+0x916>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9902      	ldr	r1, [sp, #8]
 8004cca:	220a      	movs	r2, #10
 8004ccc:	4648      	mov	r0, r9
 8004cce:	f000 fafd 	bl	80052cc <__multadd>
 8004cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd4:	9002      	str	r0, [sp, #8]
 8004cd6:	f107 38ff 	add.w	r8, r7, #4294967295
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8177 	beq.w	8004fce <_dtoa_r+0xb66>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	220a      	movs	r2, #10
 8004ce6:	4648      	mov	r0, r9
 8004ce8:	f000 faf0 	bl	80052cc <__multadd>
 8004cec:	f1bb 0f00 	cmp.w	fp, #0
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	dc6f      	bgt.n	8004dd4 <_dtoa_r+0x96c>
 8004cf4:	9b07      	ldr	r3, [sp, #28]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	dc49      	bgt.n	8004d8e <_dtoa_r+0x926>
 8004cfa:	e06b      	b.n	8004dd4 <_dtoa_r+0x96c>
 8004cfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004cfe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d02:	e73c      	b.n	8004b7e <_dtoa_r+0x716>
 8004d04:	3fe00000 	.word	0x3fe00000
 8004d08:	40240000 	.word	0x40240000
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	1e5c      	subs	r4, r3, #1
 8004d10:	9b08      	ldr	r3, [sp, #32]
 8004d12:	42a3      	cmp	r3, r4
 8004d14:	db09      	blt.n	8004d2a <_dtoa_r+0x8c2>
 8004d16:	1b1c      	subs	r4, r3, r4
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f6bf af30 	bge.w	8004b80 <_dtoa_r+0x718>
 8004d20:	9b00      	ldr	r3, [sp, #0]
 8004d22:	9a03      	ldr	r2, [sp, #12]
 8004d24:	1a9e      	subs	r6, r3, r2
 8004d26:	2300      	movs	r3, #0
 8004d28:	e72b      	b.n	8004b82 <_dtoa_r+0x71a>
 8004d2a:	9b08      	ldr	r3, [sp, #32]
 8004d2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004d2e:	9408      	str	r4, [sp, #32]
 8004d30:	1ae3      	subs	r3, r4, r3
 8004d32:	441a      	add	r2, r3
 8004d34:	9e00      	ldr	r6, [sp, #0]
 8004d36:	9b03      	ldr	r3, [sp, #12]
 8004d38:	920d      	str	r2, [sp, #52]	@ 0x34
 8004d3a:	2400      	movs	r4, #0
 8004d3c:	e721      	b.n	8004b82 <_dtoa_r+0x71a>
 8004d3e:	9c08      	ldr	r4, [sp, #32]
 8004d40:	9e00      	ldr	r6, [sp, #0]
 8004d42:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8004d44:	e728      	b.n	8004b98 <_dtoa_r+0x730>
 8004d46:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004d4a:	e751      	b.n	8004bf0 <_dtoa_r+0x788>
 8004d4c:	9a08      	ldr	r2, [sp, #32]
 8004d4e:	9902      	ldr	r1, [sp, #8]
 8004d50:	e750      	b.n	8004bf4 <_dtoa_r+0x78c>
 8004d52:	f8cd 8008 	str.w	r8, [sp, #8]
 8004d56:	e751      	b.n	8004bfc <_dtoa_r+0x794>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e779      	b.n	8004c50 <_dtoa_r+0x7e8>
 8004d5c:	9b04      	ldr	r3, [sp, #16]
 8004d5e:	e777      	b.n	8004c50 <_dtoa_r+0x7e8>
 8004d60:	2300      	movs	r3, #0
 8004d62:	9308      	str	r3, [sp, #32]
 8004d64:	e779      	b.n	8004c5a <_dtoa_r+0x7f2>
 8004d66:	d093      	beq.n	8004c90 <_dtoa_r+0x828>
 8004d68:	9a00      	ldr	r2, [sp, #0]
 8004d6a:	331c      	adds	r3, #28
 8004d6c:	441a      	add	r2, r3
 8004d6e:	9200      	str	r2, [sp, #0]
 8004d70:	9a06      	ldr	r2, [sp, #24]
 8004d72:	441a      	add	r2, r3
 8004d74:	441e      	add	r6, r3
 8004d76:	9206      	str	r2, [sp, #24]
 8004d78:	e78a      	b.n	8004c90 <_dtoa_r+0x828>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	e7f4      	b.n	8004d68 <_dtoa_r+0x900>
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	46b8      	mov	r8, r7
 8004d84:	dc20      	bgt.n	8004dc8 <_dtoa_r+0x960>
 8004d86:	469b      	mov	fp, r3
 8004d88:	9b07      	ldr	r3, [sp, #28]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	dd1e      	ble.n	8004dcc <_dtoa_r+0x964>
 8004d8e:	f1bb 0f00 	cmp.w	fp, #0
 8004d92:	f47f adb1 	bne.w	80048f8 <_dtoa_r+0x490>
 8004d96:	4621      	mov	r1, r4
 8004d98:	465b      	mov	r3, fp
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	4648      	mov	r0, r9
 8004d9e:	f000 fa95 	bl	80052cc <__multadd>
 8004da2:	4601      	mov	r1, r0
 8004da4:	4604      	mov	r4, r0
 8004da6:	9802      	ldr	r0, [sp, #8]
 8004da8:	f000 fca0 	bl	80056ec <__mcmp>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f77f ada3 	ble.w	80048f8 <_dtoa_r+0x490>
 8004db2:	4656      	mov	r6, sl
 8004db4:	2331      	movs	r3, #49	@ 0x31
 8004db6:	f806 3b01 	strb.w	r3, [r6], #1
 8004dba:	f108 0801 	add.w	r8, r8, #1
 8004dbe:	e59f      	b.n	8004900 <_dtoa_r+0x498>
 8004dc0:	9c03      	ldr	r4, [sp, #12]
 8004dc2:	46b8      	mov	r8, r7
 8004dc4:	4625      	mov	r5, r4
 8004dc6:	e7f4      	b.n	8004db2 <_dtoa_r+0x94a>
 8004dc8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8101 	beq.w	8004fd6 <_dtoa_r+0xb6e>
 8004dd4:	2e00      	cmp	r6, #0
 8004dd6:	dd05      	ble.n	8004de4 <_dtoa_r+0x97c>
 8004dd8:	4629      	mov	r1, r5
 8004dda:	4632      	mov	r2, r6
 8004ddc:	4648      	mov	r0, r9
 8004dde:	f000 fc19 	bl	8005614 <__lshift>
 8004de2:	4605      	mov	r5, r0
 8004de4:	9b08      	ldr	r3, [sp, #32]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d05c      	beq.n	8004ea4 <_dtoa_r+0xa3c>
 8004dea:	6869      	ldr	r1, [r5, #4]
 8004dec:	4648      	mov	r0, r9
 8004dee:	f000 fa0b 	bl	8005208 <_Balloc>
 8004df2:	4606      	mov	r6, r0
 8004df4:	b928      	cbnz	r0, 8004e02 <_dtoa_r+0x99a>
 8004df6:	4b82      	ldr	r3, [pc, #520]	@ (8005000 <_dtoa_r+0xb98>)
 8004df8:	4602      	mov	r2, r0
 8004dfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004dfe:	f7ff bb4a 	b.w	8004496 <_dtoa_r+0x2e>
 8004e02:	692a      	ldr	r2, [r5, #16]
 8004e04:	3202      	adds	r2, #2
 8004e06:	0092      	lsls	r2, r2, #2
 8004e08:	f105 010c 	add.w	r1, r5, #12
 8004e0c:	300c      	adds	r0, #12
 8004e0e:	f001 f809 	bl	8005e24 <memcpy>
 8004e12:	2201      	movs	r2, #1
 8004e14:	4631      	mov	r1, r6
 8004e16:	4648      	mov	r0, r9
 8004e18:	f000 fbfc 	bl	8005614 <__lshift>
 8004e1c:	f10a 0301 	add.w	r3, sl, #1
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	eb0a 030b 	add.w	r3, sl, fp
 8004e26:	9308      	str	r3, [sp, #32]
 8004e28:	9b04      	ldr	r3, [sp, #16]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	462f      	mov	r7, r5
 8004e30:	9306      	str	r3, [sp, #24]
 8004e32:	4605      	mov	r5, r0
 8004e34:	9b00      	ldr	r3, [sp, #0]
 8004e36:	9802      	ldr	r0, [sp, #8]
 8004e38:	4621      	mov	r1, r4
 8004e3a:	f103 3bff 	add.w	fp, r3, #4294967295
 8004e3e:	f7ff fa89 	bl	8004354 <quorem>
 8004e42:	4603      	mov	r3, r0
 8004e44:	3330      	adds	r3, #48	@ 0x30
 8004e46:	9003      	str	r0, [sp, #12]
 8004e48:	4639      	mov	r1, r7
 8004e4a:	9802      	ldr	r0, [sp, #8]
 8004e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e4e:	f000 fc4d 	bl	80056ec <__mcmp>
 8004e52:	462a      	mov	r2, r5
 8004e54:	9004      	str	r0, [sp, #16]
 8004e56:	4621      	mov	r1, r4
 8004e58:	4648      	mov	r0, r9
 8004e5a:	f000 fc63 	bl	8005724 <__mdiff>
 8004e5e:	68c2      	ldr	r2, [r0, #12]
 8004e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e62:	4606      	mov	r6, r0
 8004e64:	bb02      	cbnz	r2, 8004ea8 <_dtoa_r+0xa40>
 8004e66:	4601      	mov	r1, r0
 8004e68:	9802      	ldr	r0, [sp, #8]
 8004e6a:	f000 fc3f 	bl	80056ec <__mcmp>
 8004e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e70:	4602      	mov	r2, r0
 8004e72:	4631      	mov	r1, r6
 8004e74:	4648      	mov	r0, r9
 8004e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8004e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e7a:	f000 fa05 	bl	8005288 <_Bfree>
 8004e7e:	9b07      	ldr	r3, [sp, #28]
 8004e80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004e82:	9e00      	ldr	r6, [sp, #0]
 8004e84:	ea42 0103 	orr.w	r1, r2, r3
 8004e88:	9b06      	ldr	r3, [sp, #24]
 8004e8a:	4319      	orrs	r1, r3
 8004e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e8e:	d10d      	bne.n	8004eac <_dtoa_r+0xa44>
 8004e90:	2b39      	cmp	r3, #57	@ 0x39
 8004e92:	d027      	beq.n	8004ee4 <_dtoa_r+0xa7c>
 8004e94:	9a04      	ldr	r2, [sp, #16]
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	dd01      	ble.n	8004e9e <_dtoa_r+0xa36>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	3331      	adds	r3, #49	@ 0x31
 8004e9e:	f88b 3000 	strb.w	r3, [fp]
 8004ea2:	e52e      	b.n	8004902 <_dtoa_r+0x49a>
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	e7b9      	b.n	8004e1c <_dtoa_r+0x9b4>
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	e7e2      	b.n	8004e72 <_dtoa_r+0xa0a>
 8004eac:	9904      	ldr	r1, [sp, #16]
 8004eae:	2900      	cmp	r1, #0
 8004eb0:	db04      	blt.n	8004ebc <_dtoa_r+0xa54>
 8004eb2:	9807      	ldr	r0, [sp, #28]
 8004eb4:	4301      	orrs	r1, r0
 8004eb6:	9806      	ldr	r0, [sp, #24]
 8004eb8:	4301      	orrs	r1, r0
 8004eba:	d120      	bne.n	8004efe <_dtoa_r+0xa96>
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	ddee      	ble.n	8004e9e <_dtoa_r+0xa36>
 8004ec0:	9902      	ldr	r1, [sp, #8]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	4648      	mov	r0, r9
 8004ec8:	f000 fba4 	bl	8005614 <__lshift>
 8004ecc:	4621      	mov	r1, r4
 8004ece:	9002      	str	r0, [sp, #8]
 8004ed0:	f000 fc0c 	bl	80056ec <__mcmp>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	9b00      	ldr	r3, [sp, #0]
 8004ed8:	dc02      	bgt.n	8004ee0 <_dtoa_r+0xa78>
 8004eda:	d1e0      	bne.n	8004e9e <_dtoa_r+0xa36>
 8004edc:	07da      	lsls	r2, r3, #31
 8004ede:	d5de      	bpl.n	8004e9e <_dtoa_r+0xa36>
 8004ee0:	2b39      	cmp	r3, #57	@ 0x39
 8004ee2:	d1da      	bne.n	8004e9a <_dtoa_r+0xa32>
 8004ee4:	2339      	movs	r3, #57	@ 0x39
 8004ee6:	f88b 3000 	strb.w	r3, [fp]
 8004eea:	4633      	mov	r3, r6
 8004eec:	461e      	mov	r6, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004ef4:	2a39      	cmp	r2, #57	@ 0x39
 8004ef6:	d04e      	beq.n	8004f96 <_dtoa_r+0xb2e>
 8004ef8:	3201      	adds	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e501      	b.n	8004902 <_dtoa_r+0x49a>
 8004efe:	2a00      	cmp	r2, #0
 8004f00:	dd03      	ble.n	8004f0a <_dtoa_r+0xaa2>
 8004f02:	2b39      	cmp	r3, #57	@ 0x39
 8004f04:	d0ee      	beq.n	8004ee4 <_dtoa_r+0xa7c>
 8004f06:	3301      	adds	r3, #1
 8004f08:	e7c9      	b.n	8004e9e <_dtoa_r+0xa36>
 8004f0a:	9a00      	ldr	r2, [sp, #0]
 8004f0c:	9908      	ldr	r1, [sp, #32]
 8004f0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004f12:	428a      	cmp	r2, r1
 8004f14:	d028      	beq.n	8004f68 <_dtoa_r+0xb00>
 8004f16:	9902      	ldr	r1, [sp, #8]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	4648      	mov	r0, r9
 8004f1e:	f000 f9d5 	bl	80052cc <__multadd>
 8004f22:	42af      	cmp	r7, r5
 8004f24:	9002      	str	r0, [sp, #8]
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	f04f 020a 	mov.w	r2, #10
 8004f2e:	4639      	mov	r1, r7
 8004f30:	4648      	mov	r0, r9
 8004f32:	d107      	bne.n	8004f44 <_dtoa_r+0xadc>
 8004f34:	f000 f9ca 	bl	80052cc <__multadd>
 8004f38:	4607      	mov	r7, r0
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	9b00      	ldr	r3, [sp, #0]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	e777      	b.n	8004e34 <_dtoa_r+0x9cc>
 8004f44:	f000 f9c2 	bl	80052cc <__multadd>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4607      	mov	r7, r0
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	220a      	movs	r2, #10
 8004f50:	4648      	mov	r0, r9
 8004f52:	f000 f9bb 	bl	80052cc <__multadd>
 8004f56:	4605      	mov	r5, r0
 8004f58:	e7f0      	b.n	8004f3c <_dtoa_r+0xad4>
 8004f5a:	f1bb 0f00 	cmp.w	fp, #0
 8004f5e:	bfcc      	ite	gt
 8004f60:	465e      	movgt	r6, fp
 8004f62:	2601      	movle	r6, #1
 8004f64:	4456      	add	r6, sl
 8004f66:	2700      	movs	r7, #0
 8004f68:	9902      	ldr	r1, [sp, #8]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	4648      	mov	r0, r9
 8004f70:	f000 fb50 	bl	8005614 <__lshift>
 8004f74:	4621      	mov	r1, r4
 8004f76:	9002      	str	r0, [sp, #8]
 8004f78:	f000 fbb8 	bl	80056ec <__mcmp>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	dcb4      	bgt.n	8004eea <_dtoa_r+0xa82>
 8004f80:	d102      	bne.n	8004f88 <_dtoa_r+0xb20>
 8004f82:	9b00      	ldr	r3, [sp, #0]
 8004f84:	07db      	lsls	r3, r3, #31
 8004f86:	d4b0      	bmi.n	8004eea <_dtoa_r+0xa82>
 8004f88:	4633      	mov	r3, r6
 8004f8a:	461e      	mov	r6, r3
 8004f8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f90:	2a30      	cmp	r2, #48	@ 0x30
 8004f92:	d0fa      	beq.n	8004f8a <_dtoa_r+0xb22>
 8004f94:	e4b5      	b.n	8004902 <_dtoa_r+0x49a>
 8004f96:	459a      	cmp	sl, r3
 8004f98:	d1a8      	bne.n	8004eec <_dtoa_r+0xa84>
 8004f9a:	2331      	movs	r3, #49	@ 0x31
 8004f9c:	f108 0801 	add.w	r8, r8, #1
 8004fa0:	f88a 3000 	strb.w	r3, [sl]
 8004fa4:	e4ad      	b.n	8004902 <_dtoa_r+0x49a>
 8004fa6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fa8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005004 <_dtoa_r+0xb9c>
 8004fac:	b11b      	cbz	r3, 8004fb6 <_dtoa_r+0xb4e>
 8004fae:	f10a 0308 	add.w	r3, sl, #8
 8004fb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4650      	mov	r0, sl
 8004fb8:	b017      	add	sp, #92	@ 0x5c
 8004fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbe:	9b07      	ldr	r3, [sp, #28]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	f77f ae2e 	ble.w	8004c22 <_dtoa_r+0x7ba>
 8004fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004fc8:	9308      	str	r3, [sp, #32]
 8004fca:	2001      	movs	r0, #1
 8004fcc:	e64d      	b.n	8004c6a <_dtoa_r+0x802>
 8004fce:	f1bb 0f00 	cmp.w	fp, #0
 8004fd2:	f77f aed9 	ble.w	8004d88 <_dtoa_r+0x920>
 8004fd6:	4656      	mov	r6, sl
 8004fd8:	9802      	ldr	r0, [sp, #8]
 8004fda:	4621      	mov	r1, r4
 8004fdc:	f7ff f9ba 	bl	8004354 <quorem>
 8004fe0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004fe4:	f806 3b01 	strb.w	r3, [r6], #1
 8004fe8:	eba6 020a 	sub.w	r2, r6, sl
 8004fec:	4593      	cmp	fp, r2
 8004fee:	ddb4      	ble.n	8004f5a <_dtoa_r+0xaf2>
 8004ff0:	9902      	ldr	r1, [sp, #8]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	220a      	movs	r2, #10
 8004ff6:	4648      	mov	r0, r9
 8004ff8:	f000 f968 	bl	80052cc <__multadd>
 8004ffc:	9002      	str	r0, [sp, #8]
 8004ffe:	e7eb      	b.n	8004fd8 <_dtoa_r+0xb70>
 8005000:	08006308 	.word	0x08006308
 8005004:	080062a3 	.word	0x080062a3

08005008 <_free_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4605      	mov	r5, r0
 800500c:	2900      	cmp	r1, #0
 800500e:	d041      	beq.n	8005094 <_free_r+0x8c>
 8005010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005014:	1f0c      	subs	r4, r1, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfb8      	it	lt
 800501a:	18e4      	addlt	r4, r4, r3
 800501c:	f000 f8e8 	bl	80051f0 <__malloc_lock>
 8005020:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <_free_r+0x90>)
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	b933      	cbnz	r3, 8005034 <_free_r+0x2c>
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	6014      	str	r4, [r2, #0]
 800502a:	4628      	mov	r0, r5
 800502c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005030:	f000 b8e4 	b.w	80051fc <__malloc_unlock>
 8005034:	42a3      	cmp	r3, r4
 8005036:	d908      	bls.n	800504a <_free_r+0x42>
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	1821      	adds	r1, r4, r0
 800503c:	428b      	cmp	r3, r1
 800503e:	bf01      	itttt	eq
 8005040:	6819      	ldreq	r1, [r3, #0]
 8005042:	685b      	ldreq	r3, [r3, #4]
 8005044:	1809      	addeq	r1, r1, r0
 8005046:	6021      	streq	r1, [r4, #0]
 8005048:	e7ed      	b.n	8005026 <_free_r+0x1e>
 800504a:	461a      	mov	r2, r3
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	b10b      	cbz	r3, 8005054 <_free_r+0x4c>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d9fa      	bls.n	800504a <_free_r+0x42>
 8005054:	6811      	ldr	r1, [r2, #0]
 8005056:	1850      	adds	r0, r2, r1
 8005058:	42a0      	cmp	r0, r4
 800505a:	d10b      	bne.n	8005074 <_free_r+0x6c>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	4401      	add	r1, r0
 8005060:	1850      	adds	r0, r2, r1
 8005062:	4283      	cmp	r3, r0
 8005064:	6011      	str	r1, [r2, #0]
 8005066:	d1e0      	bne.n	800502a <_free_r+0x22>
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	6053      	str	r3, [r2, #4]
 800506e:	4408      	add	r0, r1
 8005070:	6010      	str	r0, [r2, #0]
 8005072:	e7da      	b.n	800502a <_free_r+0x22>
 8005074:	d902      	bls.n	800507c <_free_r+0x74>
 8005076:	230c      	movs	r3, #12
 8005078:	602b      	str	r3, [r5, #0]
 800507a:	e7d6      	b.n	800502a <_free_r+0x22>
 800507c:	6820      	ldr	r0, [r4, #0]
 800507e:	1821      	adds	r1, r4, r0
 8005080:	428b      	cmp	r3, r1
 8005082:	bf04      	itt	eq
 8005084:	6819      	ldreq	r1, [r3, #0]
 8005086:	685b      	ldreq	r3, [r3, #4]
 8005088:	6063      	str	r3, [r4, #4]
 800508a:	bf04      	itt	eq
 800508c:	1809      	addeq	r1, r1, r0
 800508e:	6021      	streq	r1, [r4, #0]
 8005090:	6054      	str	r4, [r2, #4]
 8005092:	e7ca      	b.n	800502a <_free_r+0x22>
 8005094:	bd38      	pop	{r3, r4, r5, pc}
 8005096:	bf00      	nop
 8005098:	20004210 	.word	0x20004210

0800509c <malloc>:
 800509c:	4b02      	ldr	r3, [pc, #8]	@ (80050a8 <malloc+0xc>)
 800509e:	4601      	mov	r1, r0
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	f000 b825 	b.w	80050f0 <_malloc_r>
 80050a6:	bf00      	nop
 80050a8:	20000018 	.word	0x20000018

080050ac <sbrk_aligned>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	4e0f      	ldr	r6, [pc, #60]	@ (80050ec <sbrk_aligned+0x40>)
 80050b0:	460c      	mov	r4, r1
 80050b2:	6831      	ldr	r1, [r6, #0]
 80050b4:	4605      	mov	r5, r0
 80050b6:	b911      	cbnz	r1, 80050be <sbrk_aligned+0x12>
 80050b8:	f000 fea4 	bl	8005e04 <_sbrk_r>
 80050bc:	6030      	str	r0, [r6, #0]
 80050be:	4621      	mov	r1, r4
 80050c0:	4628      	mov	r0, r5
 80050c2:	f000 fe9f 	bl	8005e04 <_sbrk_r>
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	d103      	bne.n	80050d2 <sbrk_aligned+0x26>
 80050ca:	f04f 34ff 	mov.w	r4, #4294967295
 80050ce:	4620      	mov	r0, r4
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	1cc4      	adds	r4, r0, #3
 80050d4:	f024 0403 	bic.w	r4, r4, #3
 80050d8:	42a0      	cmp	r0, r4
 80050da:	d0f8      	beq.n	80050ce <sbrk_aligned+0x22>
 80050dc:	1a21      	subs	r1, r4, r0
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 fe90 	bl	8005e04 <_sbrk_r>
 80050e4:	3001      	adds	r0, #1
 80050e6:	d1f2      	bne.n	80050ce <sbrk_aligned+0x22>
 80050e8:	e7ef      	b.n	80050ca <sbrk_aligned+0x1e>
 80050ea:	bf00      	nop
 80050ec:	2000420c 	.word	0x2000420c

080050f0 <_malloc_r>:
 80050f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f4:	1ccd      	adds	r5, r1, #3
 80050f6:	f025 0503 	bic.w	r5, r5, #3
 80050fa:	3508      	adds	r5, #8
 80050fc:	2d0c      	cmp	r5, #12
 80050fe:	bf38      	it	cc
 8005100:	250c      	movcc	r5, #12
 8005102:	2d00      	cmp	r5, #0
 8005104:	4606      	mov	r6, r0
 8005106:	db01      	blt.n	800510c <_malloc_r+0x1c>
 8005108:	42a9      	cmp	r1, r5
 800510a:	d904      	bls.n	8005116 <_malloc_r+0x26>
 800510c:	230c      	movs	r3, #12
 800510e:	6033      	str	r3, [r6, #0]
 8005110:	2000      	movs	r0, #0
 8005112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051ec <_malloc_r+0xfc>
 800511a:	f000 f869 	bl	80051f0 <__malloc_lock>
 800511e:	f8d8 3000 	ldr.w	r3, [r8]
 8005122:	461c      	mov	r4, r3
 8005124:	bb44      	cbnz	r4, 8005178 <_malloc_r+0x88>
 8005126:	4629      	mov	r1, r5
 8005128:	4630      	mov	r0, r6
 800512a:	f7ff ffbf 	bl	80050ac <sbrk_aligned>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	4604      	mov	r4, r0
 8005132:	d158      	bne.n	80051e6 <_malloc_r+0xf6>
 8005134:	f8d8 4000 	ldr.w	r4, [r8]
 8005138:	4627      	mov	r7, r4
 800513a:	2f00      	cmp	r7, #0
 800513c:	d143      	bne.n	80051c6 <_malloc_r+0xd6>
 800513e:	2c00      	cmp	r4, #0
 8005140:	d04b      	beq.n	80051da <_malloc_r+0xea>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	4639      	mov	r1, r7
 8005146:	4630      	mov	r0, r6
 8005148:	eb04 0903 	add.w	r9, r4, r3
 800514c:	f000 fe5a 	bl	8005e04 <_sbrk_r>
 8005150:	4581      	cmp	r9, r0
 8005152:	d142      	bne.n	80051da <_malloc_r+0xea>
 8005154:	6821      	ldr	r1, [r4, #0]
 8005156:	1a6d      	subs	r5, r5, r1
 8005158:	4629      	mov	r1, r5
 800515a:	4630      	mov	r0, r6
 800515c:	f7ff ffa6 	bl	80050ac <sbrk_aligned>
 8005160:	3001      	adds	r0, #1
 8005162:	d03a      	beq.n	80051da <_malloc_r+0xea>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	442b      	add	r3, r5
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	f8d8 3000 	ldr.w	r3, [r8]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	bb62      	cbnz	r2, 80051cc <_malloc_r+0xdc>
 8005172:	f8c8 7000 	str.w	r7, [r8]
 8005176:	e00f      	b.n	8005198 <_malloc_r+0xa8>
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	1b52      	subs	r2, r2, r5
 800517c:	d420      	bmi.n	80051c0 <_malloc_r+0xd0>
 800517e:	2a0b      	cmp	r2, #11
 8005180:	d917      	bls.n	80051b2 <_malloc_r+0xc2>
 8005182:	1961      	adds	r1, r4, r5
 8005184:	42a3      	cmp	r3, r4
 8005186:	6025      	str	r5, [r4, #0]
 8005188:	bf18      	it	ne
 800518a:	6059      	strne	r1, [r3, #4]
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	bf08      	it	eq
 8005190:	f8c8 1000 	streq.w	r1, [r8]
 8005194:	5162      	str	r2, [r4, r5]
 8005196:	604b      	str	r3, [r1, #4]
 8005198:	4630      	mov	r0, r6
 800519a:	f000 f82f 	bl	80051fc <__malloc_unlock>
 800519e:	f104 000b 	add.w	r0, r4, #11
 80051a2:	1d23      	adds	r3, r4, #4
 80051a4:	f020 0007 	bic.w	r0, r0, #7
 80051a8:	1ac2      	subs	r2, r0, r3
 80051aa:	bf1c      	itt	ne
 80051ac:	1a1b      	subne	r3, r3, r0
 80051ae:	50a3      	strne	r3, [r4, r2]
 80051b0:	e7af      	b.n	8005112 <_malloc_r+0x22>
 80051b2:	6862      	ldr	r2, [r4, #4]
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	bf0c      	ite	eq
 80051b8:	f8c8 2000 	streq.w	r2, [r8]
 80051bc:	605a      	strne	r2, [r3, #4]
 80051be:	e7eb      	b.n	8005198 <_malloc_r+0xa8>
 80051c0:	4623      	mov	r3, r4
 80051c2:	6864      	ldr	r4, [r4, #4]
 80051c4:	e7ae      	b.n	8005124 <_malloc_r+0x34>
 80051c6:	463c      	mov	r4, r7
 80051c8:	687f      	ldr	r7, [r7, #4]
 80051ca:	e7b6      	b.n	800513a <_malloc_r+0x4a>
 80051cc:	461a      	mov	r2, r3
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	42a3      	cmp	r3, r4
 80051d2:	d1fb      	bne.n	80051cc <_malloc_r+0xdc>
 80051d4:	2300      	movs	r3, #0
 80051d6:	6053      	str	r3, [r2, #4]
 80051d8:	e7de      	b.n	8005198 <_malloc_r+0xa8>
 80051da:	230c      	movs	r3, #12
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 f80c 	bl	80051fc <__malloc_unlock>
 80051e4:	e794      	b.n	8005110 <_malloc_r+0x20>
 80051e6:	6005      	str	r5, [r0, #0]
 80051e8:	e7d6      	b.n	8005198 <_malloc_r+0xa8>
 80051ea:	bf00      	nop
 80051ec:	20004210 	.word	0x20004210

080051f0 <__malloc_lock>:
 80051f0:	4801      	ldr	r0, [pc, #4]	@ (80051f8 <__malloc_lock+0x8>)
 80051f2:	f7ff b88e 	b.w	8004312 <__retarget_lock_acquire_recursive>
 80051f6:	bf00      	nop
 80051f8:	20004208 	.word	0x20004208

080051fc <__malloc_unlock>:
 80051fc:	4801      	ldr	r0, [pc, #4]	@ (8005204 <__malloc_unlock+0x8>)
 80051fe:	f7ff b889 	b.w	8004314 <__retarget_lock_release_recursive>
 8005202:	bf00      	nop
 8005204:	20004208 	.word	0x20004208

08005208 <_Balloc>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	69c6      	ldr	r6, [r0, #28]
 800520c:	4604      	mov	r4, r0
 800520e:	460d      	mov	r5, r1
 8005210:	b976      	cbnz	r6, 8005230 <_Balloc+0x28>
 8005212:	2010      	movs	r0, #16
 8005214:	f7ff ff42 	bl	800509c <malloc>
 8005218:	4602      	mov	r2, r0
 800521a:	61e0      	str	r0, [r4, #28]
 800521c:	b920      	cbnz	r0, 8005228 <_Balloc+0x20>
 800521e:	4b18      	ldr	r3, [pc, #96]	@ (8005280 <_Balloc+0x78>)
 8005220:	4818      	ldr	r0, [pc, #96]	@ (8005284 <_Balloc+0x7c>)
 8005222:	216b      	movs	r1, #107	@ 0x6b
 8005224:	f7ff f878 	bl	8004318 <__assert_func>
 8005228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800522c:	6006      	str	r6, [r0, #0]
 800522e:	60c6      	str	r6, [r0, #12]
 8005230:	69e6      	ldr	r6, [r4, #28]
 8005232:	68f3      	ldr	r3, [r6, #12]
 8005234:	b183      	cbz	r3, 8005258 <_Balloc+0x50>
 8005236:	69e3      	ldr	r3, [r4, #28]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800523e:	b9b8      	cbnz	r0, 8005270 <_Balloc+0x68>
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f605 	lsl.w	r6, r1, r5
 8005246:	1d72      	adds	r2, r6, #5
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	4620      	mov	r0, r4
 800524c:	f000 fdff 	bl	8005e4e <_calloc_r>
 8005250:	b160      	cbz	r0, 800526c <_Balloc+0x64>
 8005252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005256:	e00e      	b.n	8005276 <_Balloc+0x6e>
 8005258:	2221      	movs	r2, #33	@ 0x21
 800525a:	2104      	movs	r1, #4
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fdf6 	bl	8005e4e <_calloc_r>
 8005262:	69e3      	ldr	r3, [r4, #28]
 8005264:	60f0      	str	r0, [r6, #12]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e4      	bne.n	8005236 <_Balloc+0x2e>
 800526c:	2000      	movs	r0, #0
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	6802      	ldr	r2, [r0, #0]
 8005272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005276:	2300      	movs	r3, #0
 8005278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800527c:	e7f7      	b.n	800526e <_Balloc+0x66>
 800527e:	bf00      	nop
 8005280:	080061c4 	.word	0x080061c4
 8005284:	08006319 	.word	0x08006319

08005288 <_Bfree>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	69c6      	ldr	r6, [r0, #28]
 800528c:	4605      	mov	r5, r0
 800528e:	460c      	mov	r4, r1
 8005290:	b976      	cbnz	r6, 80052b0 <_Bfree+0x28>
 8005292:	2010      	movs	r0, #16
 8005294:	f7ff ff02 	bl	800509c <malloc>
 8005298:	4602      	mov	r2, r0
 800529a:	61e8      	str	r0, [r5, #28]
 800529c:	b920      	cbnz	r0, 80052a8 <_Bfree+0x20>
 800529e:	4b09      	ldr	r3, [pc, #36]	@ (80052c4 <_Bfree+0x3c>)
 80052a0:	4809      	ldr	r0, [pc, #36]	@ (80052c8 <_Bfree+0x40>)
 80052a2:	218f      	movs	r1, #143	@ 0x8f
 80052a4:	f7ff f838 	bl	8004318 <__assert_func>
 80052a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052ac:	6006      	str	r6, [r0, #0]
 80052ae:	60c6      	str	r6, [r0, #12]
 80052b0:	b13c      	cbz	r4, 80052c2 <_Bfree+0x3a>
 80052b2:	69eb      	ldr	r3, [r5, #28]
 80052b4:	6862      	ldr	r2, [r4, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052bc:	6021      	str	r1, [r4, #0]
 80052be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	080061c4 	.word	0x080061c4
 80052c8:	08006319 	.word	0x08006319

080052cc <__multadd>:
 80052cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d0:	690d      	ldr	r5, [r1, #16]
 80052d2:	4607      	mov	r7, r0
 80052d4:	460c      	mov	r4, r1
 80052d6:	461e      	mov	r6, r3
 80052d8:	f101 0c14 	add.w	ip, r1, #20
 80052dc:	2000      	movs	r0, #0
 80052de:	f8dc 3000 	ldr.w	r3, [ip]
 80052e2:	b299      	uxth	r1, r3
 80052e4:	fb02 6101 	mla	r1, r2, r1, r6
 80052e8:	0c1e      	lsrs	r6, r3, #16
 80052ea:	0c0b      	lsrs	r3, r1, #16
 80052ec:	fb02 3306 	mla	r3, r2, r6, r3
 80052f0:	b289      	uxth	r1, r1
 80052f2:	3001      	adds	r0, #1
 80052f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80052f8:	4285      	cmp	r5, r0
 80052fa:	f84c 1b04 	str.w	r1, [ip], #4
 80052fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005302:	dcec      	bgt.n	80052de <__multadd+0x12>
 8005304:	b30e      	cbz	r6, 800534a <__multadd+0x7e>
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	42ab      	cmp	r3, r5
 800530a:	dc19      	bgt.n	8005340 <__multadd+0x74>
 800530c:	6861      	ldr	r1, [r4, #4]
 800530e:	4638      	mov	r0, r7
 8005310:	3101      	adds	r1, #1
 8005312:	f7ff ff79 	bl	8005208 <_Balloc>
 8005316:	4680      	mov	r8, r0
 8005318:	b928      	cbnz	r0, 8005326 <__multadd+0x5a>
 800531a:	4602      	mov	r2, r0
 800531c:	4b0c      	ldr	r3, [pc, #48]	@ (8005350 <__multadd+0x84>)
 800531e:	480d      	ldr	r0, [pc, #52]	@ (8005354 <__multadd+0x88>)
 8005320:	21ba      	movs	r1, #186	@ 0xba
 8005322:	f7fe fff9 	bl	8004318 <__assert_func>
 8005326:	6922      	ldr	r2, [r4, #16]
 8005328:	3202      	adds	r2, #2
 800532a:	f104 010c 	add.w	r1, r4, #12
 800532e:	0092      	lsls	r2, r2, #2
 8005330:	300c      	adds	r0, #12
 8005332:	f000 fd77 	bl	8005e24 <memcpy>
 8005336:	4621      	mov	r1, r4
 8005338:	4638      	mov	r0, r7
 800533a:	f7ff ffa5 	bl	8005288 <_Bfree>
 800533e:	4644      	mov	r4, r8
 8005340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005344:	3501      	adds	r5, #1
 8005346:	615e      	str	r6, [r3, #20]
 8005348:	6125      	str	r5, [r4, #16]
 800534a:	4620      	mov	r0, r4
 800534c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005350:	08006308 	.word	0x08006308
 8005354:	08006319 	.word	0x08006319

08005358 <__hi0bits>:
 8005358:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800535c:	4603      	mov	r3, r0
 800535e:	bf36      	itet	cc
 8005360:	0403      	lslcc	r3, r0, #16
 8005362:	2000      	movcs	r0, #0
 8005364:	2010      	movcc	r0, #16
 8005366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800536a:	bf3c      	itt	cc
 800536c:	021b      	lslcc	r3, r3, #8
 800536e:	3008      	addcc	r0, #8
 8005370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005374:	bf3c      	itt	cc
 8005376:	011b      	lslcc	r3, r3, #4
 8005378:	3004      	addcc	r0, #4
 800537a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537e:	bf3c      	itt	cc
 8005380:	009b      	lslcc	r3, r3, #2
 8005382:	3002      	addcc	r0, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	db05      	blt.n	8005394 <__hi0bits+0x3c>
 8005388:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800538c:	f100 0001 	add.w	r0, r0, #1
 8005390:	bf08      	it	eq
 8005392:	2020      	moveq	r0, #32
 8005394:	4770      	bx	lr

08005396 <__lo0bits>:
 8005396:	6803      	ldr	r3, [r0, #0]
 8005398:	4602      	mov	r2, r0
 800539a:	f013 0007 	ands.w	r0, r3, #7
 800539e:	d00b      	beq.n	80053b8 <__lo0bits+0x22>
 80053a0:	07d9      	lsls	r1, r3, #31
 80053a2:	d421      	bmi.n	80053e8 <__lo0bits+0x52>
 80053a4:	0798      	lsls	r0, r3, #30
 80053a6:	bf49      	itett	mi
 80053a8:	085b      	lsrmi	r3, r3, #1
 80053aa:	089b      	lsrpl	r3, r3, #2
 80053ac:	2001      	movmi	r0, #1
 80053ae:	6013      	strmi	r3, [r2, #0]
 80053b0:	bf5c      	itt	pl
 80053b2:	6013      	strpl	r3, [r2, #0]
 80053b4:	2002      	movpl	r0, #2
 80053b6:	4770      	bx	lr
 80053b8:	b299      	uxth	r1, r3
 80053ba:	b909      	cbnz	r1, 80053c0 <__lo0bits+0x2a>
 80053bc:	0c1b      	lsrs	r3, r3, #16
 80053be:	2010      	movs	r0, #16
 80053c0:	b2d9      	uxtb	r1, r3
 80053c2:	b909      	cbnz	r1, 80053c8 <__lo0bits+0x32>
 80053c4:	3008      	adds	r0, #8
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	0719      	lsls	r1, r3, #28
 80053ca:	bf04      	itt	eq
 80053cc:	091b      	lsreq	r3, r3, #4
 80053ce:	3004      	addeq	r0, #4
 80053d0:	0799      	lsls	r1, r3, #30
 80053d2:	bf04      	itt	eq
 80053d4:	089b      	lsreq	r3, r3, #2
 80053d6:	3002      	addeq	r0, #2
 80053d8:	07d9      	lsls	r1, r3, #31
 80053da:	d403      	bmi.n	80053e4 <__lo0bits+0x4e>
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	f100 0001 	add.w	r0, r0, #1
 80053e2:	d003      	beq.n	80053ec <__lo0bits+0x56>
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	4770      	bx	lr
 80053e8:	2000      	movs	r0, #0
 80053ea:	4770      	bx	lr
 80053ec:	2020      	movs	r0, #32
 80053ee:	4770      	bx	lr

080053f0 <__i2b>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	460c      	mov	r4, r1
 80053f4:	2101      	movs	r1, #1
 80053f6:	f7ff ff07 	bl	8005208 <_Balloc>
 80053fa:	4602      	mov	r2, r0
 80053fc:	b928      	cbnz	r0, 800540a <__i2b+0x1a>
 80053fe:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <__i2b+0x24>)
 8005400:	4805      	ldr	r0, [pc, #20]	@ (8005418 <__i2b+0x28>)
 8005402:	f240 1145 	movw	r1, #325	@ 0x145
 8005406:	f7fe ff87 	bl	8004318 <__assert_func>
 800540a:	2301      	movs	r3, #1
 800540c:	6144      	str	r4, [r0, #20]
 800540e:	6103      	str	r3, [r0, #16]
 8005410:	bd10      	pop	{r4, pc}
 8005412:	bf00      	nop
 8005414:	08006308 	.word	0x08006308
 8005418:	08006319 	.word	0x08006319

0800541c <__multiply>:
 800541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005420:	4617      	mov	r7, r2
 8005422:	690a      	ldr	r2, [r1, #16]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	429a      	cmp	r2, r3
 8005428:	bfa8      	it	ge
 800542a:	463b      	movge	r3, r7
 800542c:	4689      	mov	r9, r1
 800542e:	bfa4      	itt	ge
 8005430:	460f      	movge	r7, r1
 8005432:	4699      	movge	r9, r3
 8005434:	693d      	ldr	r5, [r7, #16]
 8005436:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	eb05 060a 	add.w	r6, r5, sl
 8005442:	42b3      	cmp	r3, r6
 8005444:	b085      	sub	sp, #20
 8005446:	bfb8      	it	lt
 8005448:	3101      	addlt	r1, #1
 800544a:	f7ff fedd 	bl	8005208 <_Balloc>
 800544e:	b930      	cbnz	r0, 800545e <__multiply+0x42>
 8005450:	4602      	mov	r2, r0
 8005452:	4b41      	ldr	r3, [pc, #260]	@ (8005558 <__multiply+0x13c>)
 8005454:	4841      	ldr	r0, [pc, #260]	@ (800555c <__multiply+0x140>)
 8005456:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800545a:	f7fe ff5d 	bl	8004318 <__assert_func>
 800545e:	f100 0414 	add.w	r4, r0, #20
 8005462:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005466:	4623      	mov	r3, r4
 8005468:	2200      	movs	r2, #0
 800546a:	4573      	cmp	r3, lr
 800546c:	d320      	bcc.n	80054b0 <__multiply+0x94>
 800546e:	f107 0814 	add.w	r8, r7, #20
 8005472:	f109 0114 	add.w	r1, r9, #20
 8005476:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800547a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800547e:	9302      	str	r3, [sp, #8]
 8005480:	1beb      	subs	r3, r5, r7
 8005482:	3b15      	subs	r3, #21
 8005484:	f023 0303 	bic.w	r3, r3, #3
 8005488:	3304      	adds	r3, #4
 800548a:	3715      	adds	r7, #21
 800548c:	42bd      	cmp	r5, r7
 800548e:	bf38      	it	cc
 8005490:	2304      	movcc	r3, #4
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	9b02      	ldr	r3, [sp, #8]
 8005496:	9103      	str	r1, [sp, #12]
 8005498:	428b      	cmp	r3, r1
 800549a:	d80c      	bhi.n	80054b6 <__multiply+0x9a>
 800549c:	2e00      	cmp	r6, #0
 800549e:	dd03      	ble.n	80054a8 <__multiply+0x8c>
 80054a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d055      	beq.n	8005554 <__multiply+0x138>
 80054a8:	6106      	str	r6, [r0, #16]
 80054aa:	b005      	add	sp, #20
 80054ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b0:	f843 2b04 	str.w	r2, [r3], #4
 80054b4:	e7d9      	b.n	800546a <__multiply+0x4e>
 80054b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80054ba:	f1ba 0f00 	cmp.w	sl, #0
 80054be:	d01f      	beq.n	8005500 <__multiply+0xe4>
 80054c0:	46c4      	mov	ip, r8
 80054c2:	46a1      	mov	r9, r4
 80054c4:	2700      	movs	r7, #0
 80054c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80054ca:	f8d9 3000 	ldr.w	r3, [r9]
 80054ce:	fa1f fb82 	uxth.w	fp, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80054d8:	443b      	add	r3, r7
 80054da:	f8d9 7000 	ldr.w	r7, [r9]
 80054de:	0c12      	lsrs	r2, r2, #16
 80054e0:	0c3f      	lsrs	r7, r7, #16
 80054e2:	fb0a 7202 	mla	r2, sl, r2, r7
 80054e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054f0:	4565      	cmp	r5, ip
 80054f2:	f849 3b04 	str.w	r3, [r9], #4
 80054f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80054fa:	d8e4      	bhi.n	80054c6 <__multiply+0xaa>
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	50e7      	str	r7, [r4, r3]
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005506:	3104      	adds	r1, #4
 8005508:	f1b9 0f00 	cmp.w	r9, #0
 800550c:	d020      	beq.n	8005550 <__multiply+0x134>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	4647      	mov	r7, r8
 8005512:	46a4      	mov	ip, r4
 8005514:	f04f 0a00 	mov.w	sl, #0
 8005518:	f8b7 b000 	ldrh.w	fp, [r7]
 800551c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005520:	fb09 220b 	mla	r2, r9, fp, r2
 8005524:	4452      	add	r2, sl
 8005526:	b29b      	uxth	r3, r3
 8005528:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800552c:	f84c 3b04 	str.w	r3, [ip], #4
 8005530:	f857 3b04 	ldr.w	r3, [r7], #4
 8005534:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005538:	f8bc 3000 	ldrh.w	r3, [ip]
 800553c:	fb09 330a 	mla	r3, r9, sl, r3
 8005540:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005544:	42bd      	cmp	r5, r7
 8005546:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800554a:	d8e5      	bhi.n	8005518 <__multiply+0xfc>
 800554c:	9a01      	ldr	r2, [sp, #4]
 800554e:	50a3      	str	r3, [r4, r2]
 8005550:	3404      	adds	r4, #4
 8005552:	e79f      	b.n	8005494 <__multiply+0x78>
 8005554:	3e01      	subs	r6, #1
 8005556:	e7a1      	b.n	800549c <__multiply+0x80>
 8005558:	08006308 	.word	0x08006308
 800555c:	08006319 	.word	0x08006319

08005560 <__pow5mult>:
 8005560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005564:	4615      	mov	r5, r2
 8005566:	f012 0203 	ands.w	r2, r2, #3
 800556a:	4607      	mov	r7, r0
 800556c:	460e      	mov	r6, r1
 800556e:	d007      	beq.n	8005580 <__pow5mult+0x20>
 8005570:	4c25      	ldr	r4, [pc, #148]	@ (8005608 <__pow5mult+0xa8>)
 8005572:	3a01      	subs	r2, #1
 8005574:	2300      	movs	r3, #0
 8005576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800557a:	f7ff fea7 	bl	80052cc <__multadd>
 800557e:	4606      	mov	r6, r0
 8005580:	10ad      	asrs	r5, r5, #2
 8005582:	d03d      	beq.n	8005600 <__pow5mult+0xa0>
 8005584:	69fc      	ldr	r4, [r7, #28]
 8005586:	b97c      	cbnz	r4, 80055a8 <__pow5mult+0x48>
 8005588:	2010      	movs	r0, #16
 800558a:	f7ff fd87 	bl	800509c <malloc>
 800558e:	4602      	mov	r2, r0
 8005590:	61f8      	str	r0, [r7, #28]
 8005592:	b928      	cbnz	r0, 80055a0 <__pow5mult+0x40>
 8005594:	4b1d      	ldr	r3, [pc, #116]	@ (800560c <__pow5mult+0xac>)
 8005596:	481e      	ldr	r0, [pc, #120]	@ (8005610 <__pow5mult+0xb0>)
 8005598:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800559c:	f7fe febc 	bl	8004318 <__assert_func>
 80055a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055a4:	6004      	str	r4, [r0, #0]
 80055a6:	60c4      	str	r4, [r0, #12]
 80055a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80055ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055b0:	b94c      	cbnz	r4, 80055c6 <__pow5mult+0x66>
 80055b2:	f240 2171 	movw	r1, #625	@ 0x271
 80055b6:	4638      	mov	r0, r7
 80055b8:	f7ff ff1a 	bl	80053f0 <__i2b>
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c8 0008 	str.w	r0, [r8, #8]
 80055c2:	4604      	mov	r4, r0
 80055c4:	6003      	str	r3, [r0, #0]
 80055c6:	f04f 0900 	mov.w	r9, #0
 80055ca:	07eb      	lsls	r3, r5, #31
 80055cc:	d50a      	bpl.n	80055e4 <__pow5mult+0x84>
 80055ce:	4631      	mov	r1, r6
 80055d0:	4622      	mov	r2, r4
 80055d2:	4638      	mov	r0, r7
 80055d4:	f7ff ff22 	bl	800541c <__multiply>
 80055d8:	4631      	mov	r1, r6
 80055da:	4680      	mov	r8, r0
 80055dc:	4638      	mov	r0, r7
 80055de:	f7ff fe53 	bl	8005288 <_Bfree>
 80055e2:	4646      	mov	r6, r8
 80055e4:	106d      	asrs	r5, r5, #1
 80055e6:	d00b      	beq.n	8005600 <__pow5mult+0xa0>
 80055e8:	6820      	ldr	r0, [r4, #0]
 80055ea:	b938      	cbnz	r0, 80055fc <__pow5mult+0x9c>
 80055ec:	4622      	mov	r2, r4
 80055ee:	4621      	mov	r1, r4
 80055f0:	4638      	mov	r0, r7
 80055f2:	f7ff ff13 	bl	800541c <__multiply>
 80055f6:	6020      	str	r0, [r4, #0]
 80055f8:	f8c0 9000 	str.w	r9, [r0]
 80055fc:	4604      	mov	r4, r0
 80055fe:	e7e4      	b.n	80055ca <__pow5mult+0x6a>
 8005600:	4630      	mov	r0, r6
 8005602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005606:	bf00      	nop
 8005608:	08006390 	.word	0x08006390
 800560c:	080061c4 	.word	0x080061c4
 8005610:	08006319 	.word	0x08006319

08005614 <__lshift>:
 8005614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	460c      	mov	r4, r1
 800561a:	6849      	ldr	r1, [r1, #4]
 800561c:	6923      	ldr	r3, [r4, #16]
 800561e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005622:	68a3      	ldr	r3, [r4, #8]
 8005624:	4607      	mov	r7, r0
 8005626:	4691      	mov	r9, r2
 8005628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800562c:	f108 0601 	add.w	r6, r8, #1
 8005630:	42b3      	cmp	r3, r6
 8005632:	db0b      	blt.n	800564c <__lshift+0x38>
 8005634:	4638      	mov	r0, r7
 8005636:	f7ff fde7 	bl	8005208 <_Balloc>
 800563a:	4605      	mov	r5, r0
 800563c:	b948      	cbnz	r0, 8005652 <__lshift+0x3e>
 800563e:	4602      	mov	r2, r0
 8005640:	4b28      	ldr	r3, [pc, #160]	@ (80056e4 <__lshift+0xd0>)
 8005642:	4829      	ldr	r0, [pc, #164]	@ (80056e8 <__lshift+0xd4>)
 8005644:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005648:	f7fe fe66 	bl	8004318 <__assert_func>
 800564c:	3101      	adds	r1, #1
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	e7ee      	b.n	8005630 <__lshift+0x1c>
 8005652:	2300      	movs	r3, #0
 8005654:	f100 0114 	add.w	r1, r0, #20
 8005658:	f100 0210 	add.w	r2, r0, #16
 800565c:	4618      	mov	r0, r3
 800565e:	4553      	cmp	r3, sl
 8005660:	db33      	blt.n	80056ca <__lshift+0xb6>
 8005662:	6920      	ldr	r0, [r4, #16]
 8005664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005668:	f104 0314 	add.w	r3, r4, #20
 800566c:	f019 091f 	ands.w	r9, r9, #31
 8005670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005678:	d02b      	beq.n	80056d2 <__lshift+0xbe>
 800567a:	f1c9 0e20 	rsb	lr, r9, #32
 800567e:	468a      	mov	sl, r1
 8005680:	2200      	movs	r2, #0
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	fa00 f009 	lsl.w	r0, r0, r9
 8005688:	4310      	orrs	r0, r2
 800568a:	f84a 0b04 	str.w	r0, [sl], #4
 800568e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005692:	459c      	cmp	ip, r3
 8005694:	fa22 f20e 	lsr.w	r2, r2, lr
 8005698:	d8f3      	bhi.n	8005682 <__lshift+0x6e>
 800569a:	ebac 0304 	sub.w	r3, ip, r4
 800569e:	3b15      	subs	r3, #21
 80056a0:	f023 0303 	bic.w	r3, r3, #3
 80056a4:	3304      	adds	r3, #4
 80056a6:	f104 0015 	add.w	r0, r4, #21
 80056aa:	4560      	cmp	r0, ip
 80056ac:	bf88      	it	hi
 80056ae:	2304      	movhi	r3, #4
 80056b0:	50ca      	str	r2, [r1, r3]
 80056b2:	b10a      	cbz	r2, 80056b8 <__lshift+0xa4>
 80056b4:	f108 0602 	add.w	r6, r8, #2
 80056b8:	3e01      	subs	r6, #1
 80056ba:	4638      	mov	r0, r7
 80056bc:	612e      	str	r6, [r5, #16]
 80056be:	4621      	mov	r1, r4
 80056c0:	f7ff fde2 	bl	8005288 <_Bfree>
 80056c4:	4628      	mov	r0, r5
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80056ce:	3301      	adds	r3, #1
 80056d0:	e7c5      	b.n	800565e <__lshift+0x4a>
 80056d2:	3904      	subs	r1, #4
 80056d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80056dc:	459c      	cmp	ip, r3
 80056de:	d8f9      	bhi.n	80056d4 <__lshift+0xc0>
 80056e0:	e7ea      	b.n	80056b8 <__lshift+0xa4>
 80056e2:	bf00      	nop
 80056e4:	08006308 	.word	0x08006308
 80056e8:	08006319 	.word	0x08006319

080056ec <__mcmp>:
 80056ec:	690a      	ldr	r2, [r1, #16]
 80056ee:	4603      	mov	r3, r0
 80056f0:	6900      	ldr	r0, [r0, #16]
 80056f2:	1a80      	subs	r0, r0, r2
 80056f4:	b530      	push	{r4, r5, lr}
 80056f6:	d10e      	bne.n	8005716 <__mcmp+0x2a>
 80056f8:	3314      	adds	r3, #20
 80056fa:	3114      	adds	r1, #20
 80056fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800570c:	4295      	cmp	r5, r2
 800570e:	d003      	beq.n	8005718 <__mcmp+0x2c>
 8005710:	d205      	bcs.n	800571e <__mcmp+0x32>
 8005712:	f04f 30ff 	mov.w	r0, #4294967295
 8005716:	bd30      	pop	{r4, r5, pc}
 8005718:	42a3      	cmp	r3, r4
 800571a:	d3f3      	bcc.n	8005704 <__mcmp+0x18>
 800571c:	e7fb      	b.n	8005716 <__mcmp+0x2a>
 800571e:	2001      	movs	r0, #1
 8005720:	e7f9      	b.n	8005716 <__mcmp+0x2a>
	...

08005724 <__mdiff>:
 8005724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005728:	4689      	mov	r9, r1
 800572a:	4606      	mov	r6, r0
 800572c:	4611      	mov	r1, r2
 800572e:	4648      	mov	r0, r9
 8005730:	4614      	mov	r4, r2
 8005732:	f7ff ffdb 	bl	80056ec <__mcmp>
 8005736:	1e05      	subs	r5, r0, #0
 8005738:	d112      	bne.n	8005760 <__mdiff+0x3c>
 800573a:	4629      	mov	r1, r5
 800573c:	4630      	mov	r0, r6
 800573e:	f7ff fd63 	bl	8005208 <_Balloc>
 8005742:	4602      	mov	r2, r0
 8005744:	b928      	cbnz	r0, 8005752 <__mdiff+0x2e>
 8005746:	4b3f      	ldr	r3, [pc, #252]	@ (8005844 <__mdiff+0x120>)
 8005748:	f240 2137 	movw	r1, #567	@ 0x237
 800574c:	483e      	ldr	r0, [pc, #248]	@ (8005848 <__mdiff+0x124>)
 800574e:	f7fe fde3 	bl	8004318 <__assert_func>
 8005752:	2301      	movs	r3, #1
 8005754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005758:	4610      	mov	r0, r2
 800575a:	b003      	add	sp, #12
 800575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005760:	bfbc      	itt	lt
 8005762:	464b      	movlt	r3, r9
 8005764:	46a1      	movlt	r9, r4
 8005766:	4630      	mov	r0, r6
 8005768:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800576c:	bfba      	itte	lt
 800576e:	461c      	movlt	r4, r3
 8005770:	2501      	movlt	r5, #1
 8005772:	2500      	movge	r5, #0
 8005774:	f7ff fd48 	bl	8005208 <_Balloc>
 8005778:	4602      	mov	r2, r0
 800577a:	b918      	cbnz	r0, 8005784 <__mdiff+0x60>
 800577c:	4b31      	ldr	r3, [pc, #196]	@ (8005844 <__mdiff+0x120>)
 800577e:	f240 2145 	movw	r1, #581	@ 0x245
 8005782:	e7e3      	b.n	800574c <__mdiff+0x28>
 8005784:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005788:	6926      	ldr	r6, [r4, #16]
 800578a:	60c5      	str	r5, [r0, #12]
 800578c:	f109 0310 	add.w	r3, r9, #16
 8005790:	f109 0514 	add.w	r5, r9, #20
 8005794:	f104 0e14 	add.w	lr, r4, #20
 8005798:	f100 0b14 	add.w	fp, r0, #20
 800579c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80057a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	46d9      	mov	r9, fp
 80057a8:	f04f 0c00 	mov.w	ip, #0
 80057ac:	9b01      	ldr	r3, [sp, #4]
 80057ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80057b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	fa1f f38a 	uxth.w	r3, sl
 80057bc:	4619      	mov	r1, r3
 80057be:	b283      	uxth	r3, r0
 80057c0:	1acb      	subs	r3, r1, r3
 80057c2:	0c00      	lsrs	r0, r0, #16
 80057c4:	4463      	add	r3, ip
 80057c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80057ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80057d4:	4576      	cmp	r6, lr
 80057d6:	f849 3b04 	str.w	r3, [r9], #4
 80057da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80057de:	d8e5      	bhi.n	80057ac <__mdiff+0x88>
 80057e0:	1b33      	subs	r3, r6, r4
 80057e2:	3b15      	subs	r3, #21
 80057e4:	f023 0303 	bic.w	r3, r3, #3
 80057e8:	3415      	adds	r4, #21
 80057ea:	3304      	adds	r3, #4
 80057ec:	42a6      	cmp	r6, r4
 80057ee:	bf38      	it	cc
 80057f0:	2304      	movcc	r3, #4
 80057f2:	441d      	add	r5, r3
 80057f4:	445b      	add	r3, fp
 80057f6:	461e      	mov	r6, r3
 80057f8:	462c      	mov	r4, r5
 80057fa:	4544      	cmp	r4, r8
 80057fc:	d30e      	bcc.n	800581c <__mdiff+0xf8>
 80057fe:	f108 0103 	add.w	r1, r8, #3
 8005802:	1b49      	subs	r1, r1, r5
 8005804:	f021 0103 	bic.w	r1, r1, #3
 8005808:	3d03      	subs	r5, #3
 800580a:	45a8      	cmp	r8, r5
 800580c:	bf38      	it	cc
 800580e:	2100      	movcc	r1, #0
 8005810:	440b      	add	r3, r1
 8005812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005816:	b191      	cbz	r1, 800583e <__mdiff+0x11a>
 8005818:	6117      	str	r7, [r2, #16]
 800581a:	e79d      	b.n	8005758 <__mdiff+0x34>
 800581c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005820:	46e6      	mov	lr, ip
 8005822:	0c08      	lsrs	r0, r1, #16
 8005824:	fa1c fc81 	uxtah	ip, ip, r1
 8005828:	4471      	add	r1, lr
 800582a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800582e:	b289      	uxth	r1, r1
 8005830:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005834:	f846 1b04 	str.w	r1, [r6], #4
 8005838:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800583c:	e7dd      	b.n	80057fa <__mdiff+0xd6>
 800583e:	3f01      	subs	r7, #1
 8005840:	e7e7      	b.n	8005812 <__mdiff+0xee>
 8005842:	bf00      	nop
 8005844:	08006308 	.word	0x08006308
 8005848:	08006319 	.word	0x08006319

0800584c <__d2b>:
 800584c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005850:	460f      	mov	r7, r1
 8005852:	2101      	movs	r1, #1
 8005854:	ec59 8b10 	vmov	r8, r9, d0
 8005858:	4616      	mov	r6, r2
 800585a:	f7ff fcd5 	bl	8005208 <_Balloc>
 800585e:	4604      	mov	r4, r0
 8005860:	b930      	cbnz	r0, 8005870 <__d2b+0x24>
 8005862:	4602      	mov	r2, r0
 8005864:	4b23      	ldr	r3, [pc, #140]	@ (80058f4 <__d2b+0xa8>)
 8005866:	4824      	ldr	r0, [pc, #144]	@ (80058f8 <__d2b+0xac>)
 8005868:	f240 310f 	movw	r1, #783	@ 0x30f
 800586c:	f7fe fd54 	bl	8004318 <__assert_func>
 8005870:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005874:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005878:	b10d      	cbz	r5, 800587e <__d2b+0x32>
 800587a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	f1b8 0300 	subs.w	r3, r8, #0
 8005884:	d023      	beq.n	80058ce <__d2b+0x82>
 8005886:	4668      	mov	r0, sp
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	f7ff fd84 	bl	8005396 <__lo0bits>
 800588e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005892:	b1d0      	cbz	r0, 80058ca <__d2b+0x7e>
 8005894:	f1c0 0320 	rsb	r3, r0, #32
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	430b      	orrs	r3, r1
 800589e:	40c2      	lsrs	r2, r0
 80058a0:	6163      	str	r3, [r4, #20]
 80058a2:	9201      	str	r2, [sp, #4]
 80058a4:	9b01      	ldr	r3, [sp, #4]
 80058a6:	61a3      	str	r3, [r4, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf0c      	ite	eq
 80058ac:	2201      	moveq	r2, #1
 80058ae:	2202      	movne	r2, #2
 80058b0:	6122      	str	r2, [r4, #16]
 80058b2:	b1a5      	cbz	r5, 80058de <__d2b+0x92>
 80058b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80058b8:	4405      	add	r5, r0
 80058ba:	603d      	str	r5, [r7, #0]
 80058bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80058c0:	6030      	str	r0, [r6, #0]
 80058c2:	4620      	mov	r0, r4
 80058c4:	b003      	add	sp, #12
 80058c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058ca:	6161      	str	r1, [r4, #20]
 80058cc:	e7ea      	b.n	80058a4 <__d2b+0x58>
 80058ce:	a801      	add	r0, sp, #4
 80058d0:	f7ff fd61 	bl	8005396 <__lo0bits>
 80058d4:	9b01      	ldr	r3, [sp, #4]
 80058d6:	6163      	str	r3, [r4, #20]
 80058d8:	3020      	adds	r0, #32
 80058da:	2201      	movs	r2, #1
 80058dc:	e7e8      	b.n	80058b0 <__d2b+0x64>
 80058de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80058e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80058e6:	6038      	str	r0, [r7, #0]
 80058e8:	6918      	ldr	r0, [r3, #16]
 80058ea:	f7ff fd35 	bl	8005358 <__hi0bits>
 80058ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80058f2:	e7e5      	b.n	80058c0 <__d2b+0x74>
 80058f4:	08006308 	.word	0x08006308
 80058f8:	08006319 	.word	0x08006319

080058fc <__sfputc_r>:
 80058fc:	6893      	ldr	r3, [r2, #8]
 80058fe:	3b01      	subs	r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	b410      	push	{r4}
 8005904:	6093      	str	r3, [r2, #8]
 8005906:	da08      	bge.n	800591a <__sfputc_r+0x1e>
 8005908:	6994      	ldr	r4, [r2, #24]
 800590a:	42a3      	cmp	r3, r4
 800590c:	db01      	blt.n	8005912 <__sfputc_r+0x16>
 800590e:	290a      	cmp	r1, #10
 8005910:	d103      	bne.n	800591a <__sfputc_r+0x1e>
 8005912:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005916:	f7fe bbea 	b.w	80040ee <__swbuf_r>
 800591a:	6813      	ldr	r3, [r2, #0]
 800591c:	1c58      	adds	r0, r3, #1
 800591e:	6010      	str	r0, [r2, #0]
 8005920:	7019      	strb	r1, [r3, #0]
 8005922:	4608      	mov	r0, r1
 8005924:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005928:	4770      	bx	lr

0800592a <__sfputs_r>:
 800592a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592c:	4606      	mov	r6, r0
 800592e:	460f      	mov	r7, r1
 8005930:	4614      	mov	r4, r2
 8005932:	18d5      	adds	r5, r2, r3
 8005934:	42ac      	cmp	r4, r5
 8005936:	d101      	bne.n	800593c <__sfputs_r+0x12>
 8005938:	2000      	movs	r0, #0
 800593a:	e007      	b.n	800594c <__sfputs_r+0x22>
 800593c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005940:	463a      	mov	r2, r7
 8005942:	4630      	mov	r0, r6
 8005944:	f7ff ffda 	bl	80058fc <__sfputc_r>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d1f3      	bne.n	8005934 <__sfputs_r+0xa>
 800594c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005950 <_vfiprintf_r>:
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	460d      	mov	r5, r1
 8005956:	b09d      	sub	sp, #116	@ 0x74
 8005958:	4614      	mov	r4, r2
 800595a:	4698      	mov	r8, r3
 800595c:	4606      	mov	r6, r0
 800595e:	b118      	cbz	r0, 8005968 <_vfiprintf_r+0x18>
 8005960:	6a03      	ldr	r3, [r0, #32]
 8005962:	b90b      	cbnz	r3, 8005968 <_vfiprintf_r+0x18>
 8005964:	f7fe fada 	bl	8003f1c <__sinit>
 8005968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800596a:	07d9      	lsls	r1, r3, #31
 800596c:	d405      	bmi.n	800597a <_vfiprintf_r+0x2a>
 800596e:	89ab      	ldrh	r3, [r5, #12]
 8005970:	059a      	lsls	r2, r3, #22
 8005972:	d402      	bmi.n	800597a <_vfiprintf_r+0x2a>
 8005974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005976:	f7fe fccc 	bl	8004312 <__retarget_lock_acquire_recursive>
 800597a:	89ab      	ldrh	r3, [r5, #12]
 800597c:	071b      	lsls	r3, r3, #28
 800597e:	d501      	bpl.n	8005984 <_vfiprintf_r+0x34>
 8005980:	692b      	ldr	r3, [r5, #16]
 8005982:	b99b      	cbnz	r3, 80059ac <_vfiprintf_r+0x5c>
 8005984:	4629      	mov	r1, r5
 8005986:	4630      	mov	r0, r6
 8005988:	f7fe fbf0 	bl	800416c <__swsetup_r>
 800598c:	b170      	cbz	r0, 80059ac <_vfiprintf_r+0x5c>
 800598e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005990:	07dc      	lsls	r4, r3, #31
 8005992:	d504      	bpl.n	800599e <_vfiprintf_r+0x4e>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	b01d      	add	sp, #116	@ 0x74
 800599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	0598      	lsls	r0, r3, #22
 80059a2:	d4f7      	bmi.n	8005994 <_vfiprintf_r+0x44>
 80059a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059a6:	f7fe fcb5 	bl	8004314 <__retarget_lock_release_recursive>
 80059aa:	e7f3      	b.n	8005994 <_vfiprintf_r+0x44>
 80059ac:	2300      	movs	r3, #0
 80059ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80059b0:	2320      	movs	r3, #32
 80059b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80059ba:	2330      	movs	r3, #48	@ 0x30
 80059bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b6c <_vfiprintf_r+0x21c>
 80059c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059c4:	f04f 0901 	mov.w	r9, #1
 80059c8:	4623      	mov	r3, r4
 80059ca:	469a      	mov	sl, r3
 80059cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d0:	b10a      	cbz	r2, 80059d6 <_vfiprintf_r+0x86>
 80059d2:	2a25      	cmp	r2, #37	@ 0x25
 80059d4:	d1f9      	bne.n	80059ca <_vfiprintf_r+0x7a>
 80059d6:	ebba 0b04 	subs.w	fp, sl, r4
 80059da:	d00b      	beq.n	80059f4 <_vfiprintf_r+0xa4>
 80059dc:	465b      	mov	r3, fp
 80059de:	4622      	mov	r2, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	4630      	mov	r0, r6
 80059e4:	f7ff ffa1 	bl	800592a <__sfputs_r>
 80059e8:	3001      	adds	r0, #1
 80059ea:	f000 80a7 	beq.w	8005b3c <_vfiprintf_r+0x1ec>
 80059ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059f0:	445a      	add	r2, fp
 80059f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80059f4:	f89a 3000 	ldrb.w	r3, [sl]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 809f 	beq.w	8005b3c <_vfiprintf_r+0x1ec>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f04f 32ff 	mov.w	r2, #4294967295
 8005a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a08:	f10a 0a01 	add.w	sl, sl, #1
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	9307      	str	r3, [sp, #28]
 8005a10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a14:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a16:	4654      	mov	r4, sl
 8005a18:	2205      	movs	r2, #5
 8005a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a1e:	4853      	ldr	r0, [pc, #332]	@ (8005b6c <_vfiprintf_r+0x21c>)
 8005a20:	f7fa fbe6 	bl	80001f0 <memchr>
 8005a24:	9a04      	ldr	r2, [sp, #16]
 8005a26:	b9d8      	cbnz	r0, 8005a60 <_vfiprintf_r+0x110>
 8005a28:	06d1      	lsls	r1, r2, #27
 8005a2a:	bf44      	itt	mi
 8005a2c:	2320      	movmi	r3, #32
 8005a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a32:	0713      	lsls	r3, r2, #28
 8005a34:	bf44      	itt	mi
 8005a36:	232b      	movmi	r3, #43	@ 0x2b
 8005a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a42:	d015      	beq.n	8005a70 <_vfiprintf_r+0x120>
 8005a44:	9a07      	ldr	r2, [sp, #28]
 8005a46:	4654      	mov	r4, sl
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f04f 0c0a 	mov.w	ip, #10
 8005a4e:	4621      	mov	r1, r4
 8005a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a54:	3b30      	subs	r3, #48	@ 0x30
 8005a56:	2b09      	cmp	r3, #9
 8005a58:	d94b      	bls.n	8005af2 <_vfiprintf_r+0x1a2>
 8005a5a:	b1b0      	cbz	r0, 8005a8a <_vfiprintf_r+0x13a>
 8005a5c:	9207      	str	r2, [sp, #28]
 8005a5e:	e014      	b.n	8005a8a <_vfiprintf_r+0x13a>
 8005a60:	eba0 0308 	sub.w	r3, r0, r8
 8005a64:	fa09 f303 	lsl.w	r3, r9, r3
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	9304      	str	r3, [sp, #16]
 8005a6c:	46a2      	mov	sl, r4
 8005a6e:	e7d2      	b.n	8005a16 <_vfiprintf_r+0xc6>
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	1d19      	adds	r1, r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	9103      	str	r1, [sp, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfbb      	ittet	lt
 8005a7c:	425b      	neglt	r3, r3
 8005a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005a82:	9307      	strge	r3, [sp, #28]
 8005a84:	9307      	strlt	r3, [sp, #28]
 8005a86:	bfb8      	it	lt
 8005a88:	9204      	strlt	r2, [sp, #16]
 8005a8a:	7823      	ldrb	r3, [r4, #0]
 8005a8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a8e:	d10a      	bne.n	8005aa6 <_vfiprintf_r+0x156>
 8005a90:	7863      	ldrb	r3, [r4, #1]
 8005a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a94:	d132      	bne.n	8005afc <_vfiprintf_r+0x1ac>
 8005a96:	9b03      	ldr	r3, [sp, #12]
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	9203      	str	r2, [sp, #12]
 8005a9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005aa2:	3402      	adds	r4, #2
 8005aa4:	9305      	str	r3, [sp, #20]
 8005aa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b7c <_vfiprintf_r+0x22c>
 8005aaa:	7821      	ldrb	r1, [r4, #0]
 8005aac:	2203      	movs	r2, #3
 8005aae:	4650      	mov	r0, sl
 8005ab0:	f7fa fb9e 	bl	80001f0 <memchr>
 8005ab4:	b138      	cbz	r0, 8005ac6 <_vfiprintf_r+0x176>
 8005ab6:	9b04      	ldr	r3, [sp, #16]
 8005ab8:	eba0 000a 	sub.w	r0, r0, sl
 8005abc:	2240      	movs	r2, #64	@ 0x40
 8005abe:	4082      	lsls	r2, r0
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	3401      	adds	r4, #1
 8005ac4:	9304      	str	r3, [sp, #16]
 8005ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aca:	4829      	ldr	r0, [pc, #164]	@ (8005b70 <_vfiprintf_r+0x220>)
 8005acc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ad0:	2206      	movs	r2, #6
 8005ad2:	f7fa fb8d 	bl	80001f0 <memchr>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d03f      	beq.n	8005b5a <_vfiprintf_r+0x20a>
 8005ada:	4b26      	ldr	r3, [pc, #152]	@ (8005b74 <_vfiprintf_r+0x224>)
 8005adc:	bb1b      	cbnz	r3, 8005b26 <_vfiprintf_r+0x1d6>
 8005ade:	9b03      	ldr	r3, [sp, #12]
 8005ae0:	3307      	adds	r3, #7
 8005ae2:	f023 0307 	bic.w	r3, r3, #7
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	9303      	str	r3, [sp, #12]
 8005aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aec:	443b      	add	r3, r7
 8005aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8005af0:	e76a      	b.n	80059c8 <_vfiprintf_r+0x78>
 8005af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005af6:	460c      	mov	r4, r1
 8005af8:	2001      	movs	r0, #1
 8005afa:	e7a8      	b.n	8005a4e <_vfiprintf_r+0xfe>
 8005afc:	2300      	movs	r3, #0
 8005afe:	3401      	adds	r4, #1
 8005b00:	9305      	str	r3, [sp, #20]
 8005b02:	4619      	mov	r1, r3
 8005b04:	f04f 0c0a 	mov.w	ip, #10
 8005b08:	4620      	mov	r0, r4
 8005b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b0e:	3a30      	subs	r2, #48	@ 0x30
 8005b10:	2a09      	cmp	r2, #9
 8005b12:	d903      	bls.n	8005b1c <_vfiprintf_r+0x1cc>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0c6      	beq.n	8005aa6 <_vfiprintf_r+0x156>
 8005b18:	9105      	str	r1, [sp, #20]
 8005b1a:	e7c4      	b.n	8005aa6 <_vfiprintf_r+0x156>
 8005b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b20:	4604      	mov	r4, r0
 8005b22:	2301      	movs	r3, #1
 8005b24:	e7f0      	b.n	8005b08 <_vfiprintf_r+0x1b8>
 8005b26:	ab03      	add	r3, sp, #12
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	462a      	mov	r2, r5
 8005b2c:	4b12      	ldr	r3, [pc, #72]	@ (8005b78 <_vfiprintf_r+0x228>)
 8005b2e:	a904      	add	r1, sp, #16
 8005b30:	4630      	mov	r0, r6
 8005b32:	f7fd fdb1 	bl	8003698 <_printf_float>
 8005b36:	4607      	mov	r7, r0
 8005b38:	1c78      	adds	r0, r7, #1
 8005b3a:	d1d6      	bne.n	8005aea <_vfiprintf_r+0x19a>
 8005b3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b3e:	07d9      	lsls	r1, r3, #31
 8005b40:	d405      	bmi.n	8005b4e <_vfiprintf_r+0x1fe>
 8005b42:	89ab      	ldrh	r3, [r5, #12]
 8005b44:	059a      	lsls	r2, r3, #22
 8005b46:	d402      	bmi.n	8005b4e <_vfiprintf_r+0x1fe>
 8005b48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b4a:	f7fe fbe3 	bl	8004314 <__retarget_lock_release_recursive>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	065b      	lsls	r3, r3, #25
 8005b52:	f53f af1f 	bmi.w	8005994 <_vfiprintf_r+0x44>
 8005b56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b58:	e71e      	b.n	8005998 <_vfiprintf_r+0x48>
 8005b5a:	ab03      	add	r3, sp, #12
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	462a      	mov	r2, r5
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <_vfiprintf_r+0x228>)
 8005b62:	a904      	add	r1, sp, #16
 8005b64:	4630      	mov	r0, r6
 8005b66:	f7fe f82f 	bl	8003bc8 <_printf_i>
 8005b6a:	e7e4      	b.n	8005b36 <_vfiprintf_r+0x1e6>
 8005b6c:	08006372 	.word	0x08006372
 8005b70:	0800637c 	.word	0x0800637c
 8005b74:	08003699 	.word	0x08003699
 8005b78:	0800592b 	.word	0x0800592b
 8005b7c:	08006378 	.word	0x08006378

08005b80 <__sflush_r>:
 8005b80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b88:	0716      	lsls	r6, r2, #28
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	d454      	bmi.n	8005c3a <__sflush_r+0xba>
 8005b90:	684b      	ldr	r3, [r1, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dc02      	bgt.n	8005b9c <__sflush_r+0x1c>
 8005b96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	dd48      	ble.n	8005c2e <__sflush_r+0xae>
 8005b9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b9e:	2e00      	cmp	r6, #0
 8005ba0:	d045      	beq.n	8005c2e <__sflush_r+0xae>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ba8:	682f      	ldr	r7, [r5, #0]
 8005baa:	6a21      	ldr	r1, [r4, #32]
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	d030      	beq.n	8005c12 <__sflush_r+0x92>
 8005bb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	0759      	lsls	r1, r3, #29
 8005bb6:	d505      	bpl.n	8005bc4 <__sflush_r+0x44>
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bbe:	b10b      	cbz	r3, 8005bc4 <__sflush_r+0x44>
 8005bc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005bc2:	1ad2      	subs	r2, r2, r3
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005bc8:	6a21      	ldr	r1, [r4, #32]
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b0      	blx	r6
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	d106      	bne.n	8005be2 <__sflush_r+0x62>
 8005bd4:	6829      	ldr	r1, [r5, #0]
 8005bd6:	291d      	cmp	r1, #29
 8005bd8:	d82b      	bhi.n	8005c32 <__sflush_r+0xb2>
 8005bda:	4a2a      	ldr	r2, [pc, #168]	@ (8005c84 <__sflush_r+0x104>)
 8005bdc:	40ca      	lsrs	r2, r1
 8005bde:	07d6      	lsls	r6, r2, #31
 8005be0:	d527      	bpl.n	8005c32 <__sflush_r+0xb2>
 8005be2:	2200      	movs	r2, #0
 8005be4:	6062      	str	r2, [r4, #4]
 8005be6:	04d9      	lsls	r1, r3, #19
 8005be8:	6922      	ldr	r2, [r4, #16]
 8005bea:	6022      	str	r2, [r4, #0]
 8005bec:	d504      	bpl.n	8005bf8 <__sflush_r+0x78>
 8005bee:	1c42      	adds	r2, r0, #1
 8005bf0:	d101      	bne.n	8005bf6 <__sflush_r+0x76>
 8005bf2:	682b      	ldr	r3, [r5, #0]
 8005bf4:	b903      	cbnz	r3, 8005bf8 <__sflush_r+0x78>
 8005bf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bfa:	602f      	str	r7, [r5, #0]
 8005bfc:	b1b9      	cbz	r1, 8005c2e <__sflush_r+0xae>
 8005bfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c02:	4299      	cmp	r1, r3
 8005c04:	d002      	beq.n	8005c0c <__sflush_r+0x8c>
 8005c06:	4628      	mov	r0, r5
 8005c08:	f7ff f9fe 	bl	8005008 <_free_r>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c10:	e00d      	b.n	8005c2e <__sflush_r+0xae>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4628      	mov	r0, r5
 8005c16:	47b0      	blx	r6
 8005c18:	4602      	mov	r2, r0
 8005c1a:	1c50      	adds	r0, r2, #1
 8005c1c:	d1c9      	bne.n	8005bb2 <__sflush_r+0x32>
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0c6      	beq.n	8005bb2 <__sflush_r+0x32>
 8005c24:	2b1d      	cmp	r3, #29
 8005c26:	d001      	beq.n	8005c2c <__sflush_r+0xac>
 8005c28:	2b16      	cmp	r3, #22
 8005c2a:	d11e      	bne.n	8005c6a <__sflush_r+0xea>
 8005c2c:	602f      	str	r7, [r5, #0]
 8005c2e:	2000      	movs	r0, #0
 8005c30:	e022      	b.n	8005c78 <__sflush_r+0xf8>
 8005c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	e01b      	b.n	8005c72 <__sflush_r+0xf2>
 8005c3a:	690f      	ldr	r7, [r1, #16]
 8005c3c:	2f00      	cmp	r7, #0
 8005c3e:	d0f6      	beq.n	8005c2e <__sflush_r+0xae>
 8005c40:	0793      	lsls	r3, r2, #30
 8005c42:	680e      	ldr	r6, [r1, #0]
 8005c44:	bf08      	it	eq
 8005c46:	694b      	ldreq	r3, [r1, #20]
 8005c48:	600f      	str	r7, [r1, #0]
 8005c4a:	bf18      	it	ne
 8005c4c:	2300      	movne	r3, #0
 8005c4e:	eba6 0807 	sub.w	r8, r6, r7
 8005c52:	608b      	str	r3, [r1, #8]
 8005c54:	f1b8 0f00 	cmp.w	r8, #0
 8005c58:	dde9      	ble.n	8005c2e <__sflush_r+0xae>
 8005c5a:	6a21      	ldr	r1, [r4, #32]
 8005c5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005c5e:	4643      	mov	r3, r8
 8005c60:	463a      	mov	r2, r7
 8005c62:	4628      	mov	r0, r5
 8005c64:	47b0      	blx	r6
 8005c66:	2800      	cmp	r0, #0
 8005c68:	dc08      	bgt.n	8005c7c <__sflush_r+0xfc>
 8005c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c72:	81a3      	strh	r3, [r4, #12]
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c7c:	4407      	add	r7, r0
 8005c7e:	eba8 0800 	sub.w	r8, r8, r0
 8005c82:	e7e7      	b.n	8005c54 <__sflush_r+0xd4>
 8005c84:	20400001 	.word	0x20400001

08005c88 <_fflush_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	690b      	ldr	r3, [r1, #16]
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	b913      	cbnz	r3, 8005c98 <_fflush_r+0x10>
 8005c92:	2500      	movs	r5, #0
 8005c94:	4628      	mov	r0, r5
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	b118      	cbz	r0, 8005ca2 <_fflush_r+0x1a>
 8005c9a:	6a03      	ldr	r3, [r0, #32]
 8005c9c:	b90b      	cbnz	r3, 8005ca2 <_fflush_r+0x1a>
 8005c9e:	f7fe f93d 	bl	8003f1c <__sinit>
 8005ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f3      	beq.n	8005c92 <_fflush_r+0xa>
 8005caa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cac:	07d0      	lsls	r0, r2, #31
 8005cae:	d404      	bmi.n	8005cba <_fflush_r+0x32>
 8005cb0:	0599      	lsls	r1, r3, #22
 8005cb2:	d402      	bmi.n	8005cba <_fflush_r+0x32>
 8005cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cb6:	f7fe fb2c 	bl	8004312 <__retarget_lock_acquire_recursive>
 8005cba:	4628      	mov	r0, r5
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	f7ff ff5f 	bl	8005b80 <__sflush_r>
 8005cc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cc4:	07da      	lsls	r2, r3, #31
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	d4e4      	bmi.n	8005c94 <_fflush_r+0xc>
 8005cca:	89a3      	ldrh	r3, [r4, #12]
 8005ccc:	059b      	lsls	r3, r3, #22
 8005cce:	d4e1      	bmi.n	8005c94 <_fflush_r+0xc>
 8005cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cd2:	f7fe fb1f 	bl	8004314 <__retarget_lock_release_recursive>
 8005cd6:	e7dd      	b.n	8005c94 <_fflush_r+0xc>

08005cd8 <fiprintf>:
 8005cd8:	b40e      	push	{r1, r2, r3}
 8005cda:	b503      	push	{r0, r1, lr}
 8005cdc:	4601      	mov	r1, r0
 8005cde:	ab03      	add	r3, sp, #12
 8005ce0:	4805      	ldr	r0, [pc, #20]	@ (8005cf8 <fiprintf+0x20>)
 8005ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce6:	6800      	ldr	r0, [r0, #0]
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	f7ff fe31 	bl	8005950 <_vfiprintf_r>
 8005cee:	b002      	add	sp, #8
 8005cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cf4:	b003      	add	sp, #12
 8005cf6:	4770      	bx	lr
 8005cf8:	20000018 	.word	0x20000018

08005cfc <__swhatbuf_r>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	460c      	mov	r4, r1
 8005d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d04:	2900      	cmp	r1, #0
 8005d06:	b096      	sub	sp, #88	@ 0x58
 8005d08:	4615      	mov	r5, r2
 8005d0a:	461e      	mov	r6, r3
 8005d0c:	da0d      	bge.n	8005d2a <__swhatbuf_r+0x2e>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d14:	f04f 0100 	mov.w	r1, #0
 8005d18:	bf14      	ite	ne
 8005d1a:	2340      	movne	r3, #64	@ 0x40
 8005d1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d20:	2000      	movs	r0, #0
 8005d22:	6031      	str	r1, [r6, #0]
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	b016      	add	sp, #88	@ 0x58
 8005d28:	bd70      	pop	{r4, r5, r6, pc}
 8005d2a:	466a      	mov	r2, sp
 8005d2c:	f000 f848 	bl	8005dc0 <_fstat_r>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	dbec      	blt.n	8005d0e <__swhatbuf_r+0x12>
 8005d34:	9901      	ldr	r1, [sp, #4]
 8005d36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d3e:	4259      	negs	r1, r3
 8005d40:	4159      	adcs	r1, r3
 8005d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d46:	e7eb      	b.n	8005d20 <__swhatbuf_r+0x24>

08005d48 <__smakebuf_r>:
 8005d48:	898b      	ldrh	r3, [r1, #12]
 8005d4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d4c:	079d      	lsls	r5, r3, #30
 8005d4e:	4606      	mov	r6, r0
 8005d50:	460c      	mov	r4, r1
 8005d52:	d507      	bpl.n	8005d64 <__smakebuf_r+0x1c>
 8005d54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	6163      	str	r3, [r4, #20]
 8005d60:	b003      	add	sp, #12
 8005d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d64:	ab01      	add	r3, sp, #4
 8005d66:	466a      	mov	r2, sp
 8005d68:	f7ff ffc8 	bl	8005cfc <__swhatbuf_r>
 8005d6c:	9f00      	ldr	r7, [sp, #0]
 8005d6e:	4605      	mov	r5, r0
 8005d70:	4639      	mov	r1, r7
 8005d72:	4630      	mov	r0, r6
 8005d74:	f7ff f9bc 	bl	80050f0 <_malloc_r>
 8005d78:	b948      	cbnz	r0, 8005d8e <__smakebuf_r+0x46>
 8005d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d7e:	059a      	lsls	r2, r3, #22
 8005d80:	d4ee      	bmi.n	8005d60 <__smakebuf_r+0x18>
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	f043 0302 	orr.w	r3, r3, #2
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	e7e2      	b.n	8005d54 <__smakebuf_r+0xc>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	6020      	str	r0, [r4, #0]
 8005d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d9e:	b15b      	cbz	r3, 8005db8 <__smakebuf_r+0x70>
 8005da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005da4:	4630      	mov	r0, r6
 8005da6:	f000 f81d 	bl	8005de4 <_isatty_r>
 8005daa:	b128      	cbz	r0, 8005db8 <__smakebuf_r+0x70>
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	81a3      	strh	r3, [r4, #12]
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	431d      	orrs	r5, r3
 8005dbc:	81a5      	strh	r5, [r4, #12]
 8005dbe:	e7cf      	b.n	8005d60 <__smakebuf_r+0x18>

08005dc0 <_fstat_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4d07      	ldr	r5, [pc, #28]	@ (8005de0 <_fstat_r+0x20>)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	f7fb fee0 	bl	8001b92 <_fstat>
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d102      	bne.n	8005ddc <_fstat_r+0x1c>
 8005dd6:	682b      	ldr	r3, [r5, #0]
 8005dd8:	b103      	cbz	r3, 8005ddc <_fstat_r+0x1c>
 8005dda:	6023      	str	r3, [r4, #0]
 8005ddc:	bd38      	pop	{r3, r4, r5, pc}
 8005dde:	bf00      	nop
 8005de0:	20004204 	.word	0x20004204

08005de4 <_isatty_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4d06      	ldr	r5, [pc, #24]	@ (8005e00 <_isatty_r+0x1c>)
 8005de8:	2300      	movs	r3, #0
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f7fb fedf 	bl	8001bb2 <_isatty>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_isatty_r+0x1a>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_isatty_r+0x1a>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20004204 	.word	0x20004204

08005e04 <_sbrk_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d06      	ldr	r5, [pc, #24]	@ (8005e20 <_sbrk_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	f7fb fee8 	bl	8001be4 <_sbrk>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_sbrk_r+0x1a>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_sbrk_r+0x1a>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20004204 	.word	0x20004204

08005e24 <memcpy>:
 8005e24:	440a      	add	r2, r1
 8005e26:	4291      	cmp	r1, r2
 8005e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e2c:	d100      	bne.n	8005e30 <memcpy+0xc>
 8005e2e:	4770      	bx	lr
 8005e30:	b510      	push	{r4, lr}
 8005e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	d1f9      	bne.n	8005e32 <memcpy+0xe>
 8005e3e:	bd10      	pop	{r4, pc}

08005e40 <abort>:
 8005e40:	b508      	push	{r3, lr}
 8005e42:	2006      	movs	r0, #6
 8005e44:	f000 f85e 	bl	8005f04 <raise>
 8005e48:	2001      	movs	r0, #1
 8005e4a:	f7fb fe52 	bl	8001af2 <_exit>

08005e4e <_calloc_r>:
 8005e4e:	b570      	push	{r4, r5, r6, lr}
 8005e50:	fba1 5402 	umull	r5, r4, r1, r2
 8005e54:	b934      	cbnz	r4, 8005e64 <_calloc_r+0x16>
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7ff f94a 	bl	80050f0 <_malloc_r>
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	b928      	cbnz	r0, 8005e6c <_calloc_r+0x1e>
 8005e60:	4630      	mov	r0, r6
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	220c      	movs	r2, #12
 8005e66:	6002      	str	r2, [r0, #0]
 8005e68:	2600      	movs	r6, #0
 8005e6a:	e7f9      	b.n	8005e60 <_calloc_r+0x12>
 8005e6c:	462a      	mov	r2, r5
 8005e6e:	4621      	mov	r1, r4
 8005e70:	f7fe f9d2 	bl	8004218 <memset>
 8005e74:	e7f4      	b.n	8005e60 <_calloc_r+0x12>

08005e76 <__ascii_mbtowc>:
 8005e76:	b082      	sub	sp, #8
 8005e78:	b901      	cbnz	r1, 8005e7c <__ascii_mbtowc+0x6>
 8005e7a:	a901      	add	r1, sp, #4
 8005e7c:	b142      	cbz	r2, 8005e90 <__ascii_mbtowc+0x1a>
 8005e7e:	b14b      	cbz	r3, 8005e94 <__ascii_mbtowc+0x1e>
 8005e80:	7813      	ldrb	r3, [r2, #0]
 8005e82:	600b      	str	r3, [r1, #0]
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	1e10      	subs	r0, r2, #0
 8005e88:	bf18      	it	ne
 8005e8a:	2001      	movne	r0, #1
 8005e8c:	b002      	add	sp, #8
 8005e8e:	4770      	bx	lr
 8005e90:	4610      	mov	r0, r2
 8005e92:	e7fb      	b.n	8005e8c <__ascii_mbtowc+0x16>
 8005e94:	f06f 0001 	mvn.w	r0, #1
 8005e98:	e7f8      	b.n	8005e8c <__ascii_mbtowc+0x16>

08005e9a <__ascii_wctomb>:
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4608      	mov	r0, r1
 8005e9e:	b141      	cbz	r1, 8005eb2 <__ascii_wctomb+0x18>
 8005ea0:	2aff      	cmp	r2, #255	@ 0xff
 8005ea2:	d904      	bls.n	8005eae <__ascii_wctomb+0x14>
 8005ea4:	228a      	movs	r2, #138	@ 0x8a
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	4770      	bx	lr
 8005eae:	700a      	strb	r2, [r1, #0]
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	4770      	bx	lr

08005eb4 <_raise_r>:
 8005eb4:	291f      	cmp	r1, #31
 8005eb6:	b538      	push	{r3, r4, r5, lr}
 8005eb8:	4605      	mov	r5, r0
 8005eba:	460c      	mov	r4, r1
 8005ebc:	d904      	bls.n	8005ec8 <_raise_r+0x14>
 8005ebe:	2316      	movs	r3, #22
 8005ec0:	6003      	str	r3, [r0, #0]
 8005ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005eca:	b112      	cbz	r2, 8005ed2 <_raise_r+0x1e>
 8005ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ed0:	b94b      	cbnz	r3, 8005ee6 <_raise_r+0x32>
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f830 	bl	8005f38 <_getpid_r>
 8005ed8:	4622      	mov	r2, r4
 8005eda:	4601      	mov	r1, r0
 8005edc:	4628      	mov	r0, r5
 8005ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ee2:	f000 b817 	b.w	8005f14 <_kill_r>
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d00a      	beq.n	8005f00 <_raise_r+0x4c>
 8005eea:	1c59      	adds	r1, r3, #1
 8005eec:	d103      	bne.n	8005ef6 <_raise_r+0x42>
 8005eee:	2316      	movs	r3, #22
 8005ef0:	6003      	str	r3, [r0, #0]
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	e7e7      	b.n	8005ec6 <_raise_r+0x12>
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005efc:	4620      	mov	r0, r4
 8005efe:	4798      	blx	r3
 8005f00:	2000      	movs	r0, #0
 8005f02:	e7e0      	b.n	8005ec6 <_raise_r+0x12>

08005f04 <raise>:
 8005f04:	4b02      	ldr	r3, [pc, #8]	@ (8005f10 <raise+0xc>)
 8005f06:	4601      	mov	r1, r0
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	f7ff bfd3 	b.w	8005eb4 <_raise_r>
 8005f0e:	bf00      	nop
 8005f10:	20000018 	.word	0x20000018

08005f14 <_kill_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d07      	ldr	r5, [pc, #28]	@ (8005f34 <_kill_r+0x20>)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	602b      	str	r3, [r5, #0]
 8005f22:	f7fb fdd6 	bl	8001ad2 <_kill>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	d102      	bne.n	8005f30 <_kill_r+0x1c>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	b103      	cbz	r3, 8005f30 <_kill_r+0x1c>
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	bd38      	pop	{r3, r4, r5, pc}
 8005f32:	bf00      	nop
 8005f34:	20004204 	.word	0x20004204

08005f38 <_getpid_r>:
 8005f38:	f7fb bdc3 	b.w	8001ac2 <_getpid>

08005f3c <sqrt>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	ed2d 8b02 	vpush	{d8}
 8005f42:	ec55 4b10 	vmov	r4, r5, d0
 8005f46:	f000 f825 	bl	8005f94 <__ieee754_sqrt>
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	4620      	mov	r0, r4
 8005f50:	4629      	mov	r1, r5
 8005f52:	eeb0 8a40 	vmov.f32	s16, s0
 8005f56:	eef0 8a60 	vmov.f32	s17, s1
 8005f5a:	f7fa fdf7 	bl	8000b4c <__aeabi_dcmpun>
 8005f5e:	b990      	cbnz	r0, 8005f86 <sqrt+0x4a>
 8005f60:	2200      	movs	r2, #0
 8005f62:	2300      	movs	r3, #0
 8005f64:	4620      	mov	r0, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	f7fa fdc8 	bl	8000afc <__aeabi_dcmplt>
 8005f6c:	b158      	cbz	r0, 8005f86 <sqrt+0x4a>
 8005f6e:	f7fe f9a5 	bl	80042bc <__errno>
 8005f72:	2321      	movs	r3, #33	@ 0x21
 8005f74:	6003      	str	r3, [r0, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f7fa fc75 	bl	800086c <__aeabi_ddiv>
 8005f82:	ec41 0b18 	vmov	d8, r0, r1
 8005f86:	eeb0 0a48 	vmov.f32	s0, s16
 8005f8a:	eef0 0a68 	vmov.f32	s1, s17
 8005f8e:	ecbd 8b02 	vpop	{d8}
 8005f92:	bd38      	pop	{r3, r4, r5, pc}

08005f94 <__ieee754_sqrt>:
 8005f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	4a66      	ldr	r2, [pc, #408]	@ (8006134 <__ieee754_sqrt+0x1a0>)
 8005f9a:	ec55 4b10 	vmov	r4, r5, d0
 8005f9e:	43aa      	bics	r2, r5
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	d110      	bne.n	8005fc8 <__ieee754_sqrt+0x34>
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	4620      	mov	r0, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	f7fa fb34 	bl	8000618 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa f978 	bl	80002ac <__adddf3>
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	460d      	mov	r5, r1
 8005fc0:	ec45 4b10 	vmov	d0, r4, r5
 8005fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	dc0e      	bgt.n	8005fea <__ieee754_sqrt+0x56>
 8005fcc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005fd0:	4322      	orrs	r2, r4
 8005fd2:	d0f5      	beq.n	8005fc0 <__ieee754_sqrt+0x2c>
 8005fd4:	b19d      	cbz	r5, 8005ffe <__ieee754_sqrt+0x6a>
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	4620      	mov	r0, r4
 8005fda:	4629      	mov	r1, r5
 8005fdc:	f7fa f964 	bl	80002a8 <__aeabi_dsub>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	f7fa fc42 	bl	800086c <__aeabi_ddiv>
 8005fe8:	e7e8      	b.n	8005fbc <__ieee754_sqrt+0x28>
 8005fea:	152a      	asrs	r2, r5, #20
 8005fec:	d115      	bne.n	800601a <__ieee754_sqrt+0x86>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	e009      	b.n	8006006 <__ieee754_sqrt+0x72>
 8005ff2:	0acb      	lsrs	r3, r1, #11
 8005ff4:	3a15      	subs	r2, #21
 8005ff6:	0549      	lsls	r1, r1, #21
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0fa      	beq.n	8005ff2 <__ieee754_sqrt+0x5e>
 8005ffc:	e7f7      	b.n	8005fee <__ieee754_sqrt+0x5a>
 8005ffe:	462a      	mov	r2, r5
 8006000:	e7fa      	b.n	8005ff8 <__ieee754_sqrt+0x64>
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	3001      	adds	r0, #1
 8006006:	02dc      	lsls	r4, r3, #11
 8006008:	d5fb      	bpl.n	8006002 <__ieee754_sqrt+0x6e>
 800600a:	1e44      	subs	r4, r0, #1
 800600c:	1b12      	subs	r2, r2, r4
 800600e:	f1c0 0420 	rsb	r4, r0, #32
 8006012:	fa21 f404 	lsr.w	r4, r1, r4
 8006016:	4323      	orrs	r3, r4
 8006018:	4081      	lsls	r1, r0
 800601a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800601e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006026:	07d2      	lsls	r2, r2, #31
 8006028:	bf5c      	itt	pl
 800602a:	005b      	lslpl	r3, r3, #1
 800602c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006030:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006034:	bf58      	it	pl
 8006036:	0049      	lslpl	r1, r1, #1
 8006038:	2600      	movs	r6, #0
 800603a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800603e:	107f      	asrs	r7, r7, #1
 8006040:	0049      	lsls	r1, r1, #1
 8006042:	2016      	movs	r0, #22
 8006044:	4632      	mov	r2, r6
 8006046:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800604a:	1915      	adds	r5, r2, r4
 800604c:	429d      	cmp	r5, r3
 800604e:	bfde      	ittt	le
 8006050:	192a      	addle	r2, r5, r4
 8006052:	1b5b      	suble	r3, r3, r5
 8006054:	1936      	addle	r6, r6, r4
 8006056:	0fcd      	lsrs	r5, r1, #31
 8006058:	3801      	subs	r0, #1
 800605a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800605e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006062:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006066:	d1f0      	bne.n	800604a <__ieee754_sqrt+0xb6>
 8006068:	4605      	mov	r5, r0
 800606a:	2420      	movs	r4, #32
 800606c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006070:	4293      	cmp	r3, r2
 8006072:	eb0c 0e00 	add.w	lr, ip, r0
 8006076:	dc02      	bgt.n	800607e <__ieee754_sqrt+0xea>
 8006078:	d113      	bne.n	80060a2 <__ieee754_sqrt+0x10e>
 800607a:	458e      	cmp	lr, r1
 800607c:	d811      	bhi.n	80060a2 <__ieee754_sqrt+0x10e>
 800607e:	f1be 0f00 	cmp.w	lr, #0
 8006082:	eb0e 000c 	add.w	r0, lr, ip
 8006086:	da3f      	bge.n	8006108 <__ieee754_sqrt+0x174>
 8006088:	2800      	cmp	r0, #0
 800608a:	db3d      	blt.n	8006108 <__ieee754_sqrt+0x174>
 800608c:	f102 0801 	add.w	r8, r2, #1
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	458e      	cmp	lr, r1
 8006094:	bf88      	it	hi
 8006096:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800609a:	eba1 010e 	sub.w	r1, r1, lr
 800609e:	4465      	add	r5, ip
 80060a0:	4642      	mov	r2, r8
 80060a2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80060a6:	3c01      	subs	r4, #1
 80060a8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80060ac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80060b0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80060b4:	d1dc      	bne.n	8006070 <__ieee754_sqrt+0xdc>
 80060b6:	4319      	orrs	r1, r3
 80060b8:	d01b      	beq.n	80060f2 <__ieee754_sqrt+0x15e>
 80060ba:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8006138 <__ieee754_sqrt+0x1a4>
 80060be:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800613c <__ieee754_sqrt+0x1a8>
 80060c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80060c6:	e9db 2300 	ldrd	r2, r3, [fp]
 80060ca:	f7fa f8ed 	bl	80002a8 <__aeabi_dsub>
 80060ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4640      	mov	r0, r8
 80060d8:	4649      	mov	r1, r9
 80060da:	f7fa fd19 	bl	8000b10 <__aeabi_dcmple>
 80060de:	b140      	cbz	r0, 80060f2 <__ieee754_sqrt+0x15e>
 80060e0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80060e4:	e9da 0100 	ldrd	r0, r1, [sl]
 80060e8:	e9db 2300 	ldrd	r2, r3, [fp]
 80060ec:	d10e      	bne.n	800610c <__ieee754_sqrt+0x178>
 80060ee:	3601      	adds	r6, #1
 80060f0:	4625      	mov	r5, r4
 80060f2:	1073      	asrs	r3, r6, #1
 80060f4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80060f8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80060fc:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8006100:	086b      	lsrs	r3, r5, #1
 8006102:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8006106:	e759      	b.n	8005fbc <__ieee754_sqrt+0x28>
 8006108:	4690      	mov	r8, r2
 800610a:	e7c1      	b.n	8006090 <__ieee754_sqrt+0xfc>
 800610c:	f7fa f8ce 	bl	80002ac <__adddf3>
 8006110:	e9da 8900 	ldrd	r8, r9, [sl]
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa fcee 	bl	8000afc <__aeabi_dcmplt>
 8006120:	b120      	cbz	r0, 800612c <__ieee754_sqrt+0x198>
 8006122:	1cab      	adds	r3, r5, #2
 8006124:	bf08      	it	eq
 8006126:	3601      	addeq	r6, #1
 8006128:	3502      	adds	r5, #2
 800612a:	e7e2      	b.n	80060f2 <__ieee754_sqrt+0x15e>
 800612c:	1c6b      	adds	r3, r5, #1
 800612e:	f023 0501 	bic.w	r5, r3, #1
 8006132:	e7de      	b.n	80060f2 <__ieee754_sqrt+0x15e>
 8006134:	7ff00000 	.word	0x7ff00000
 8006138:	080065a0 	.word	0x080065a0
 800613c:	08006598 	.word	0x08006598

08006140 <_init>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	bf00      	nop
 8006144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006146:	bc08      	pop	{r3}
 8006148:	469e      	mov	lr, r3
 800614a:	4770      	bx	lr

0800614c <_fini>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr
